{
	// Specifies the style of the gravatar default (fallback) images
	//  - identicon: A geometric pattern
	//  - mp: A simple, cartoon-style silhouetted outline of a person (does not vary by email hash)
	//  - monsterid: A monster with different colors, faces, etc
	//  - retro: 8-bit arcade-style pixelated faces
	//  - robohash: A robot with different colors, faces, etc
	//  - wavatar: A face with differing features and backgrounds
	"gitlens.defaultGravatarsStyle": "robohash",

	// Specifies whether the file annotations button in the editor title shows a menu or immediately toggles the specified file annotations
	//  - null: Shows a menu to choose which file annotations to toggle
	//  - blame: Toggles gutter blame annotations
	//  - heatmap: Toggles gutter heatmap annotations
	//  - changes: Toggles gutter changes annotations
	"gitlens.fileAnnotations.command": null,

	// Deprecated. Use the [Insiders edition](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens-insiders) of GitLens instead
	// 
	"gitlens.insiders": null,

	// Specifies how much (if any) output will be sent to the GitLens output channel
	//  - silent: Logs nothing
	//  - errors: Logs only errors
	//  - verbose: Logs all errors, warnings, and messages
	//  - debug: Logs all errors, warnings, and messages with extra context useful for debugging
	"gitlens.outputLevel": "errors",

	// Specifies whether to show the Welcome (Quick Setup) experience on first install
	"gitlens.showWelcomeOnInstall": true,

	// Specifies whether to show the What's New notification after upgrading to new feature releases
	"gitlens.showWhatsNewAfterUpgrades": true,

	// Controls whether the editor shows CodeLens.
	"diffEditor.codeLens": false,

	// When enabled, the diff editor ignores changes in leading or trailing whitespace.
	"diffEditor.ignoreTrimWhitespace": true,

	// Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.
	"diffEditor.maxComputationTime": 5000,

	// Maximum file size in MB for which to compute diffs. Use 0 for no limit.
	"diffEditor.maxFileSize": 50,

	// Controls whether the diff editor shows +/- indicators for added/removed changes.
	"diffEditor.renderIndicators": true,

	// Controls whether the diff editor shows the diff side by side or inline.
	"diffEditor.renderSideBySide": true,

	// 
	//  - off: Lines will never wrap.
	//  - on: Lines will wrap at the viewport width.
	//  - inherit: Lines will wrap according to the `editor.wordWrap` setting.
	"diffEditor.wordWrap": "inherit",

	// Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
	"editor.acceptSuggestionOnCommitCharacter": true,

	// Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.
	//  - on
	//  - smart: Only accept a suggestion with `Enter` when it makes a textual change.
	//  - off
	"editor.acceptSuggestionOnEnter": "on",

	// Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.
	"editor.accessibilityPageSize": 10,

	// Controls whether the editor should run in a mode where it is optimized for screen readers. Setting to on will disable word wrapping.
	//  - auto: The editor will use platform APIs to detect when a Screen Reader is attached.
	//  - on: The editor will be permanently optimized for usage with a Screen Reader. Word wrapping will be disabled.
	//  - off: The editor will never be optimized for usage with a Screen Reader.
	"editor.accessibilitySupport": "auto",

	// Controls whether the editor should automatically close brackets after the user adds an opening bracket.
	//  - always
	//  - languageDefined: Use language configurations to determine when to autoclose brackets.
	//  - beforeWhitespace: Autoclose brackets only when the cursor is to the left of whitespace.
	//  - never
	"editor.autoClosingBrackets": "languageDefined",

	// Controls whether the editor should remove adjacent closing quotes or brackets when deleting.
	//  - always
	//  - auto: Remove adjacent closing quotes or brackets only if they were automatically inserted.
	//  - never
	"editor.autoClosingDelete": "auto",

	// Controls whether the editor should type over closing quotes or brackets.
	//  - always
	//  - auto: Type over closing quotes or brackets only if they were automatically inserted.
	//  - never
	"editor.autoClosingOvertype": "auto",

	// Controls whether the editor should automatically close quotes after the user adds an opening quote.
	//  - always
	//  - languageDefined: Use language configurations to determine when to autoclose quotes.
	//  - beforeWhitespace: Autoclose quotes only when the cursor is to the left of whitespace.
	//  - never
	"editor.autoClosingQuotes": "languageDefined",

	// Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
	//  - none: The editor will not insert indentation automatically.
	//  - keep: The editor will keep the current line's indentation.
	//  - brackets: The editor will keep the current line's indentation and honor language defined brackets.
	//  - advanced: The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.
	//  - full: The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
	"editor.autoIndent": "full",

	// Controls whether the editor should automatically surround selections when typing quotes or brackets.
	//  - languageDefined: Use language configurations to determine when to automatically surround selections.
	//  - quotes: Surround with quotes but not brackets.
	//  - brackets: Surround with brackets but not quotes.
	//  - never
	"editor.autoSurround": "languageDefined",

	// Controls whether bracket pair colorization is enabled or not. Use 'workbench.colorCustomizations' to override the bracket highlight colors.
	"editor.bracketPairColorization.enabled": false,

	// Code action kinds to be run on save.
	"editor.codeActionsOnSave": {},

	// Controls whether the editor shows CodeLens.
	"editor.codeLens": true,

	// Controls the font family for CodeLens.
	"editor.codeLensFontFamily": "",

	// Controls the font size in pixels for CodeLens. When set to `0`, 90% of `editor.fontSize` is used.
	"editor.codeLensFontSize": 0,

	// Controls whether the editor should render the inline color decorators and color picker.
	"editor.colorDecorators": true,

	// Enable that the selection with the mouse and keys is doing column selection.
	"editor.columnSelection": false,

	// Controls if empty lines should be ignored with toggle, add or remove actions for line comments.
	"editor.comments.ignoreEmptyLines": true,

	// Controls whether a space character is inserted when commenting.
	"editor.comments.insertSpace": true,

	// Controls whether syntax highlighting should be copied into the clipboard.
	"editor.copyWithSyntaxHighlighting": true,

	// Control the cursor animation style.
	"editor.cursorBlinking": "blink",

	// Controls whether the smooth caret animation should be enabled.
	"editor.cursorSmoothCaretAnimation": false,

	// Controls the cursor style.
	"editor.cursorStyle": "line",

	// Controls the minimal number of visible leading and trailing lines surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.
	"editor.cursorSurroundingLines": 0,

	// Controls when `cursorSurroundingLines` should be enforced.
	//  - default: `cursorSurroundingLines` is enforced only when triggered via the keyboard or API.
	//  - all: `cursorSurroundingLines` is enforced always.
	"editor.cursorSurroundingLinesStyle": "default",

	// Controls the width of the cursor when `editor.cursorStyle` is set to `line`.
	"editor.cursorWidth": 0,

	// Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
	//  - null: None
	//  - formulahendry.auto-close-tag: Automatically add HTML/XML close tag, same as Visual Studio IDE or Sublime Text
	//  - formulahendry.auto-rename-tag: Auto rename paired HTML/XML tag
	//  - njpwerner.autodocstring: Automatically generates detailed docstrings for python functions
	//  - shakram02.bash-beautify: Format / Beautify bash and shell scripts
	//  - HookyQR.beautify: Beautify code in place for VS Code
	//  - aaron-bond.better-comments: Improve your code commenting by annotating with alert, informational, TODOs, and more!
	//  - danielpinto8zz6.c-cpp-compile-run: Compile & Run single c/c++ files easly
	//  - formulahendry.code-runner: Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring
	//  - ms-vscode.cpptools: C/C++ IntelliSense, debugging, and code browsing.
	//  - ms-dotnettools.csharp: C# for Visual Studio Code (powered by OmniSharp).
	//  - vscode.css-language-features: Provides rich language support for CSS, LESS and SCSS files.
	//  - cipchk.cssrem: Converts between px and rem & rpx units in VSCode
	//  - Dart-Code.dart-code: Dart language support and debugger for Visual Studio Code.
	//  - shamanu4.django-intellisense: Full autocomplete support for django magic methods
	//  - necinc.elmmet: Convert emmet abbreviations to composition of elm functions
	//  - Dart-Code.flutter: Flutter support and debugger for Visual Studio Code.
	//  - golang.go: Rich Go language support for Visual Studio Code
	//  - vscode.html-language-features: Provides rich language support for HTML and Handlebar files
	//  - vscode.json-language-features: Provides rich language support for JSON files.
	//  - ms-toolsai.jupyter: Jupyter notebook support, interactive programming and computing that supports Intellisense, debugging and more.
	//  - kiteco.kite: AI code completions for all languages, intellisense, code snippets, code signatures, and cursor-following documentation for VS Code. Kite supports .js .jsx .vue .tsx .ts .css .html .less .c .cc .cpp .cs .h .hpp .m .scala .java .kt .py .go .php .rb and .sh filetypes.
	//  - yzhang.markdown-all-in-one: All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more)
	//  - vscode.markdown-language-features: Provides rich language support for Markdown.
	//  - vscode.php-language-features: Provides rich language support for PHP files.
	//  - esbenp.prettier-vscode: Code formatter using prettier
	//  - passionkind.prettier-vscode-with-tabs: VS Code plugin for jlongster/prettier with tabs support
	//  - ms-python.python: IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), Jupyter Notebooks, code formatting, refactoring, unit tests, and more.
	//  - donjayamanne.python-environment-manager: View and manage Python environments & pacakges.
	//  - mgesbert.python-path: Python imports utils.
	//  - dongli.python-preview: Provide Preview for Python Execution.
	//  - mechatroner.rainbow-csv: Highlight CSV and TSV files, Run SQL-like queries
	//  - ms-vscode.references-view: Reference Search results as separate, stable view in the sidebar
	//  - ms-vscode-remote.remote-ssh-edit: Edit SSH configuration files
	//  - vscode.search-result: Provides syntax highlighting and language features for tabbed search results.
	//  - mtxr.sqltools: Database management done right. Connection explorer, query runner, intellisense, bookmarks, query history. Feel like a database hero!
	//  - mtxr.sqltools-driver-mysql: SQLTools MySQL/MariaDB
	//  - mtxr.sqltools-driver-pg: SQLTools PostgreSQL/Redshift Driver
	//  - mtxr.sqltools-driver-sqlite: SQLTools SQLite
	//  - jock.svg: SVG Coding, Minify, Pretty, Preview All-In-One
	//  - TabNine.tabnine-vscode: 👩‍💻🤖 JavaScript, Python, Java, Typescript & all other languages - AI Code completion plugin. Tabnine makes developers more productive by auto-completing their code.
	//  - vscode.typescript-language-features: Provides rich language support for JavaScript and TypeScript.
	//  - KevinRose.vsc-python-indent: Correct python indentation.
	//  - llvm-vs-code-extensions.vscode-clangd: C and C++ completion, navigation, and insights
	//  - batisteo.vscode-django: Beautiful syntax and scoped snippets for perfectionists with deadlines
	//  - ms-azuretools.vscode-docker: Makes it easy to create, manage, and debug containerized applications.
	//  - jaycetyle.vscode-gnu-global: Intellisense for C/C++ using GNU Global
	//  - ecmel.vscode-html-css: CSS Intellisense for HTML
	//  - sburg.vscode-javascript-booster: Boost your productivity with advanced JavaScript/TypeScript refactorings and commands
	//  - mgmcdermott.vscode-language-babel: VSCode syntax highlighting for today's JavaScript
	//  - ms-python.vscode-pylance: A performant, feature-rich language server for Python in VS Code
	//  - njqdev.vscode-python-typehint: Type hint completion for Python.
	//  - redhat.vscode-xml: XML Language Support by Red Hat
	//  - redhat.vscode-yaml: YAML Language Support by Red Hat, with built-in Kubernetes syntax support
	//  - dual.zsh-completion-script: zsh completion script detect
	//  - Atishay-Jain.All-Autocomplete: Create autocomplete items from open files in VSCode.
	//  - krizzdewizz.autorun: Automatically build/launch whenever a folder is opened in VS Code
	//  - ms-vscode.azure-account: A common Sign-In and Subscription management extension for VS Code.
	//  - TheHolyCoder.badge-viewer: A place to view your badges.
	//  - mads-hartmann.bash-ide-vscode: A language server for Bash
	//  - alefragnani.Bookmarks: Mark lines and jump to them
	//  - CoenraadS.bracket-pair-colorizer: A customizable extension for colorizing matching brackets
	//  - CoenraadS.bracket-pair-colorizer-2: A customizable extension for colorizing matching brackets
	//  - lixquid.calculator: Calculation commands and tools for VS Code.
	//  - twxs.cmake: CMake langage support for Visual Studio Code
	//  - ms-vscode.cmake-tools: Extended CMake support in Visual Studio Code
	//  - austin.code-gnu-global: C/C++ Intellisense with the help of GNU Global tags
	//  - Shan.code-settings-sync: Synchronize Settings, Snippets, Themes, File Icons, Launch, Keybindings, Workspaces and Extensions Across Multiple Machines Using GitHub Gist.
	//  - streetsidesoftware.code-spell-checker: Spelling checker for source code
	//  - naumovs.color-highlight: Highlight web colors in your editor
	//  - ExodiusStudios.comment-anchors: Place anchor tags within comments for easy file & workspace navigation.
	//  - vscode.configuration-editing: Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.
	//  - GitHub.copilot-nightly: Your AI pair programmer
	//  - vscode.debug-auto-launch: Helper for auto-attach feature when node-debug extensions are not active.
	//  - vscode.debug-server-ready: Open URI in browser if server under debugging is ready.
	//  - msjsdiag.debugger-for-chrome: Debug your JavaScript code in the Chrome browser, or any other target that supports the Chrome Debugger protocol.
	//  - cschlosser.doxdocgen: Let me generate Doxygen documentation from your source code for you.
	//  - EditorConfig.EditorConfig: EditorConfig Support for Visual Studio Code
	//  - vscode.emmet: Emmet support for VS Code
	//  - ysemeniuk.emmet-live: Expand your Emmet abbreviations dynamically
	//  - vscode.extension-editing: Provides linting capabilities for authoring extensions.
	//  - evan-buss.font-switcher: Quickly configure your font settings.
	//  - vscode.git: Git SCM Integration
	//  - mhutchie.git-graph: View a Git Graph of your repository, and perform Git actions from the graph.
	//  - donjayamanne.githistory: View git log, file history, compare branches or commits
	//  - vscode.github: GitHub features for VS Code
	//  - vscode.github-authentication: GitHub Authentication Provider
	//  - eamodio.gitlens: Supercharge the Git capabilities built into Visual Studio Code — Visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more
	//  - vscode.grunt: Extension to add Grunt capabilities to VS Code.
	//  - spywhere.guides: An extension for more guide lines
	//  - vscode.gulp: Extension to add Gulp capabilities to VSCode.
	//  - helgardrichard.helium-icon-theme: Helium and Material Design Icons for Visual Studio Code
	//  - antfu.iconify: Intelligent Iconify previewing and searching for VS Code
	//  - vscode.image-preview: Provides VS Code's built-in image preview
	//  - ajshort.include-autocomplete: Autocompletion for C++ includes
	//  - oderwat.indent-rainbow: Makes indentation easier to read
	//  - SirTori.indenticator: Highlights your current indent depth
	//  - vscode.ipynb: Provides basic support for opening and reading Jupyter's .ipynb notebook files
	//  - vscode.jake: Extension to add Jake capabilities to VS Code.
	//  - ms-vscode.js-debug: An extension for debugging Node.js programs and Chrome.
	//  - ms-vscode.js-debug-companion: Companion extension to js-debug that provides capability for remote debugging
	//  - ms-vscode.js-debug-nightly: An extension for debugging Node.js programs and Chrome.
	//  - ms-toolsai.jupyter-renderers: Renderers for Jupyter Notebooks (with plotly, vega, latex, gif, png, svg, jpeg and other such outputs)
	//  - hdg.live-html-previewer: Edit and preview HTML documents in VS Code
	//  - negokaz.live-server-preview: Preview your HTML file with localhost server live-reloading enabled
	//  - xirider.livecode: Real-time python variable evaluation
	//  - ritwickdey.LiveServer: Launch a development local Server with live reload feature for static & dynamic pages
	//  - leidichen.markdown-add-quote: 快速给 Markdown 文档增加一个引用标签
	//  - bierner.markdown-emoji: Adds emoji syntax support to VS Code's built-in markdown preview
	//  - vscode.markdown-math: Adds math support to Markdown in notebooks.
	//  - yzane.markdown-pdf: Convert Markdown to PDF
	//  - shd101wyy.markdown-preview-enhanced: Markdown Preview Enhanced ported to vscode
	//  - PKief.material-icon-theme: Material Design Icons for Visual Studio Code
	//  - zhuangtongfa.material-theme: Atom‘s iconic One Dark theme for Visual Studio Code
	//  - vscode.merge-conflict: Highlighting and commands for inline merge conflicts.
	//  - vscode.microsoft-authentication: Microsoft authentication provider
	//  - FallenMax.mithril-emmet: Support Emmet(zen-coding) syntax for Mithril
	//  - vscode.npm: Extension to add task support for npm scripts.
	//  - christian-kohler.npm-intellisense: Visual Studio Code plugin that autocompletes npm modules in import statements
	//  - techer.open-in-browser: This allows you to open the current file in your default browser or application.
	//  - christian-kohler.path-intellisense: Visual Studio Code plugin that autocompletes filenames
	//  - slightc.pip-manager: manage python package
	//  - etmoffat.pip-packages: Install/update pip packages into virtual environments
	//  - pnp.polacode: 📸  Polaroid for your code
	//  - alefragnani.project-manager: Easily switch between projects
	//  - tht13.python: Python language extension for vscode
	//  - nils-ballmann.python-coding-tools: The PCT are a compilation of tools, which are helpful when coding Python. The feature list may change over time, as functionality provided by other extensions, will be removed from PCT.
	//  - Mukundan.python-docs: open the offical python docs
	//  - WallabyJs.quokka-vscode: JavaScript and TypeScript playground in your editor.
	//  - ms-vscode-remote.remote-containers: Open any folder or repository inside a Docker container and take advantage of Visual Studio Code's full feature set.
	//  - ms-vscode-remote.remote-ssh: Open any folder on a remote machine using SSH and take advantage of VS Code's full feature set.
	//  - ms-vscode-remote.remote-wsl: Open any folder in the Windows Subsystem for Linux (WSL) and take advantage of Visual Studio Code's full feature set.
	//  - GitHub.remotehub: Remotely browse and edit any GitHub repository
	//  - emeraldwalk.RunOnSave: Run commands when a file is saved in vscode.
	//  - vscode.simple-browser: A very basic built-in webview for displaying web content.
	//  - ms-vscode.test-adapter-converter: Converter extension from the Test Adapter UI to native VS Code testing
	//  - Gruntfuggly.todo-tree: Show TODO, FIXME, etc. comment tags in a tree view
	//  - ms-azuretools.vscode-azureappservice: An Azure App Service management extension for Visual Studio Code.
	//  - ms-azuretools.vscode-azureresourcegroups: An extension for viewing and managing Azure resources.
	//  - pranaygp.vscode-css-peek: Allow peeking to css ID and class strings as definitions from html files to respective CSS. Allows peek and goto definition.
	//  - deerawan.vscode-faker: Generate fake data for name, address, lorem ipsum, commerce and much more
	//  - firefox-devtools.vscode-firefox-debug: Debug your web application or browser extension in Firefox
	//  - tomasvergara.vscode-fontawesome-gallery: VSCode Extension Sidebar Panel with a gallery view of FontAwesome's 5 free icons.
	//  - PsykoSoldi3r.vscode-git-flow: Git Flow UI interface for Visual Studio Code
	//  - yoko0180.vscode-git-quick-commit: Quick commit with select text
	//  - KnisterPeter.vscode-github: Integrates github and its workflows into vscode
	//  - kisstkondoros.vscode-gutter-preview: Shows image preview in the gutter and on hover
	//  - ms-vscode.vscode-js-profile-table: Text visualizer for profiles taken from the JavaScript debugger
	//  - DavidAnson.vscode-markdownlint: Markdown linting and style checking for Visual Studio Code
	//  - eg2.vscode-npm-script: npm support for VS Code
	//  - johnpapa.vscode-peacock: Subtly change the workspace color of your workspace. Ideal when you have multiple VS Code instances and you want to quickly identify which is which.
	//  - GitHub.vscode-pull-request-github: Pull Request and Issue Provider for GitHub
	//  - fabioz.vscode-pydev: Python with the PyDev Language Server (Linting, Intellisense, Code Formatting, Quick Fixes and more).
	//  - littlefoxteam.vscode-python-test-adapter: Run your Python tests in the Sidebar of Visual Studio Code
	//  - chenxsan.vscode-standard-format: Converts your code into Standard JavaScript Format
	//  - hbenl.vscode-test-explorer: Run your tests in the Sidebar of Visual Studio Code
	//  - hbenl.vscode-test-explorer-liveshare: Use the Test Explorer in your Visual Studio Live Share sessions
	//  - Umoxfo.vscode-w3cvalidation: Adds W3C validation support to Visual Studio Code.
	//  - WakaTime.vscode-wakatime: Metrics, insights, and time tracking automatically generated from your programming activity.
	//  - gamunu.vscode-yarn: Yarn commands for VSCode
	//  - VisualStudioExptTeam.vscodeintellicode: AI-assisted development
	//  - ms-vsliveshare.vsliveshare: Real-time collaborative development from the comfort of your favorite tools.
	//  - ms-vsliveshare.vsliveshare-audio: Adds audio calling capabilities to Visual Studio Live Share
	//  - WASTeamAccount.WebTemplateStudio-dev-nightly: Web Template Studio enables developers to quickly scaffold full-stack web applications with cloud services.
	//  - CelianRiboulet.webvalidator: Check the validity of your HTML/CSS files in one click
	"editor.defaultFormatter": null,

	// Controls whether the Go to Definition mouse gesture always opens the peek widget.
	"editor.definitionLinkOpensInPeek": false,

	// Controls whether `editor.tabSize#` and `#editor.insertSpaces` will be automatically detected when a file is opened based on the file contents.
	"editor.detectIndentation": true,

	// Controls whether the editor should allow moving selections via drag and drop.
	"editor.dragAndDrop": true,

	// Controls whether copying without a selection copies the current line.
	"editor.emptySelectionClipboard": true,

	// Scrolling speed multiplier when pressing `Alt`.
	"editor.fastScrollSensitivity": 5,

	// Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.
	"editor.find.addExtraSpaceOnTop": true,

	// Controls the condition for turning on Find in Selection automatically.
	//  - never: Never turn on Find in Selection automatically (default).
	//  - always: Always turn on Find in Selection automatically.
	//  - multiline: Turn on Find in Selection automatically when multiple lines of content are selected.
	"editor.find.autoFindInSelection": "never",

	// Controls whether the cursor should jump to find matches while typing.
	"editor.find.cursorMoveOnType": true,

	// Controls whether the Find Widget should read or modify the shared find clipboard on macOS.
	"editor.find.globalFindClipboard": false,

	// Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.
	"editor.find.loop": true,

	// Controls whether the search string in the Find Widget is seeded from the editor selection.
	//  - never: Never seed search string from the editor selection.
	//  - always: Always seed search string from the editor selection, including word at cursor position.
	//  - selection: Only seed search string from the editor selection.
	"editor.find.seedSearchStringFromSelection": "always",

	// Controls whether the editor has code folding enabled.
	"editor.folding": true,

	// Controls whether the editor should highlight folded ranges.
	"editor.foldingHighlight": true,

	// Controls whether the editor automatically collapses import ranges.
	"editor.foldingImportsByDefault": false,

	// Controls the strategy for computing folding ranges.
	//  - auto: Use a language-specific folding strategy if available, else the indentation-based one.
	//  - indentation: Use the indentation-based folding strategy.
	"editor.foldingStrategy": "auto",

	// Controls the font family.
	"editor.fontFamily": "Menlo, Monaco, 'Courier New', monospace",

	// Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.
	"editor.fontLigatures": false,

	// Controls the font size in pixels.
	"editor.fontSize": 12,

	// Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"editor.fontWeight": "normal",

	// Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
	"editor.formatOnPaste": false,

	// Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
	"editor.formatOnSave": false,

	// Controls if format on save formats the whole file or only modifications. Only applies when `editor.formatOnSave` is enabled.
	//  - file: Format the whole file.
	//  - modifications: Format modifications (requires source control).
	//  - modificationsIfAvailable: Will attempt to format modifications only (requires source control). If source control can't be used, then the whole file will be formatted.
	"editor.formatOnSaveMode": "file",

	// Controls whether the editor should automatically format the line after typing.
	"editor.formatOnType": false,

	// Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
	"editor.glyphMargin": true,

	// Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.
	"editor.gotoLocation.alternativeDeclarationCommand": "editor.action.goToReferences",

	// Alternative command id that is being executed when the result of 'Go to Definition' is the current location.
	"editor.gotoLocation.alternativeDefinitionCommand": "editor.action.goToReferences",

	// Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.
	"editor.gotoLocation.alternativeImplementationCommand": "",

	// Alternative command id that is being executed when the result of 'Go to Reference' is the current location.
	"editor.gotoLocation.alternativeReferenceCommand": "",

	// Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.
	"editor.gotoLocation.alternativeTypeDefinitionCommand": "editor.action.goToReferences",

	// This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.
	// 
	"editor.gotoLocation.multiple": null,

	// Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleDeclarations": "peek",

	// Controls the behavior the 'Go to Definition'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleDefinitions": "peek",

	// Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleImplementations": "peek",

	// Controls the behavior the 'Go to References'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleReferences": "peek",

	// Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.
	//  - peek: Show peek view of the results (default)
	//  - gotoAndPeek: Go to the primary result and show a peek view
	//  - goto: Go to the primary result and enable peek-less navigation to others
	"editor.gotoLocation.multipleTypeDefinitions": "peek",

	// Controls whether bracket pair guides are enabled or not.
	//  - true: Enables bracket pair guides.
	//  - active: Enables bracket pair guides only for the active bracket pair.
	//  - false: Disables bracket pair guides.
	"editor.guides.bracketPairs": false,

	// Controls whether horizontal bracket pair guides are enabled or not.
	//  - true: Enables horizontal guides as addition to vertical bracket pair guides.
	//  - active: Enables horizontal guides only for the active bracket pair.
	//  - false: Disables horizontal bracket pair guides.
	"editor.guides.bracketPairsHorizontal": "active",

	// Controls whether bracket pair guides are enabled or not.
	"editor.guides.highlightActiveBracketPair": true,

	// Controls whether the editor should highlight the active indent guide.
	"editor.guides.highlightActiveIndentation": true,

	// Controls whether the editor should render indent guides.
	"editor.guides.indentation": true,

	// Controls whether the cursor should be hidden in the overview ruler.
	"editor.hideCursorInOverviewRuler": false,

	// Prefer showing hovers above the line, if there's space.
	"editor.hover.above": true,

	// Controls the delay in milliseconds after which the hover is shown.
	"editor.hover.delay": 300,

	// Controls whether the hover is shown.
	"editor.hover.enabled": true,

	// Controls whether the hover should remain visible when mouse is moved over it.
	"editor.hover.sticky": true,

	// Enables the inlay hints in the editor.
	"editor.inlayHints.enabled": true,

	// Controls font family of inlay hints in the editor. When set to empty, the `editor.fontFamily` is used.
	"editor.inlayHints.fontFamily": "",

	// Controls font size of inlay hints in the editor. A default of 90% of `editor.fontSize` is used when the configured value is less than `5` or greater than the editor font size.
	"editor.inlayHints.fontSize": 0,

	// Controls whether to automatically show inline suggestions in the editor.
	"editor.inlineSuggest.enabled": true,

	// Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
	"editor.insertSpaces": true,

	// Defines the bracket symbols that increase or decrease the indentation.
	"editor.language.brackets": false,

	// Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.
	"editor.language.colorizedBracketPairs": false,

	// Special handling for large files to disable certain memory intensive features.
	"editor.largeFileOptimizations": true,

	// Controls the letter spacing in pixels.
	"editor.letterSpacing": 0,

	// Enables the code action lightbulb in the editor.
	"editor.lightbulb.enabled": true,

	// Controls the line height. 
	//  - Use 0 to automatically compute the line height from the font size.
	//  - Values between 0 and 8 will be used as a multiplier with the font size.
	//  - Values greater than or equal to 8 will be used as effective values.
	"editor.lineHeight": 0,

	// Controls the display of line numbers.
	//  - off: Line numbers are not rendered.
	//  - on: Line numbers are rendered as absolute number.
	//  - relative: Line numbers are rendered as distance in lines to cursor position.
	//  - interval: Line numbers are rendered every 10 lines.
	"editor.lineNumbers": "on",

	// Controls whether the editor has linked editing enabled. Depending on the language, related symbols, e.g. HTML tags, are updated while editing.
	"editor.linkedEditing": false,

	// Controls whether the editor should detect links and make them clickable.
	"editor.links": true,

	// Highlight matching brackets.
	"editor.matchBrackets": "always",

	// Lines above this length will not be tokenized for performance reasons
	"editor.maxTokenizationLineLength": 20000,

	// Controls whether the minimap is shown.
	"editor.minimap.enabled": true,

	// Limit the width of the minimap to render at most a certain number of columns.
	"editor.minimap.maxColumn": 120,

	// Render the actual characters on a line as opposed to color blocks.
	"editor.minimap.renderCharacters": true,

	// Scale of content drawn in the minimap: 1, 2 or 3.
	"editor.minimap.scale": 1,

	// Controls when the minimap slider is shown.
	"editor.minimap.showSlider": "mouseover",

	// Controls the side where to render the minimap.
	"editor.minimap.side": "right",

	// Controls the size of the minimap.
	//  - proportional: The minimap has the same size as the editor contents (and might scroll).
	//  - fill: The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).
	//  - fit: The minimap will shrink as necessary to never be larger than the editor (no scrolling).
	"editor.minimap.size": "proportional",

	// A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
	"editor.mouseWheelScrollSensitivity": 1,

	// Zoom the font of the editor when using mouse wheel and holding `Ctrl`.
	"editor.mouseWheelZoom": false,

	// Merge multiple cursors when they are overlapping.
	"editor.multiCursorMergeOverlapping": true,

	// The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier. [Read more](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).
	//  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
	//  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
	"editor.multiCursorModifier": "alt",

	// Controls pasting when the line count of the pasted text matches the cursor count.
	//  - spread: Each cursor pastes a single line of the text.
	//  - full: Each cursor pastes the full text.
	"editor.multiCursorPaste": "spread",

	// Controls whether the editor should highlight semantic symbol occurrences.
	"editor.occurrencesHighlight": true,

	// Controls whether a border should be drawn around the overview ruler.
	"editor.overviewRulerBorder": true,

	// Controls the amount of space between the bottom edge of the editor and the last line.
	"editor.padding.bottom": 0,

	// Controls the amount of space between the top edge of the editor and the first line.
	"editor.padding.top": 0,

	// Controls whether the parameter hints menu cycles or closes when reaching the end of the list.
	"editor.parameterHints.cycle": false,

	// Enables a pop-up that shows parameter documentation and type information as you type.
	"editor.parameterHints.enabled": true,

	// Controls whether to focus the inline editor or the tree in the peek widget.
	//  - tree: Focus the tree when opening peek
	//  - editor: Focus the editor when opening peek
	"editor.peekWidgetDefaultFocus": "tree",

	// Controls whether suggestions should automatically show up while typing.
	"editor.quickSuggestions": {
		"other": true,
		"comments": false,
		"strings": false
	},

	// Controls the delay in milliseconds after which quick suggestions will show up.
	"editor.quickSuggestionsDelay": 10,

	// Enable/disable the ability to preview changes before renaming
	"editor.rename.enablePreview": true,

	// Deprecated, use `editor.linkedEditing` instead.
	// Controls whether the editor auto renames on type.
	"editor.renameOnType": false,

	// Controls whether the editor should render control characters.
	"editor.renderControlCharacters": true,

	// Render last line number when the file ends with a newline.
	"editor.renderFinalNewline": true,

	// Controls how the editor should render the current line highlight.
	//  - none
	//  - gutter
	//  - line
	//  - all: Highlights both the gutter and the current line.
	"editor.renderLineHighlight": "line",

	// Controls if the editor should render the current line highlight only when the editor is focused.
	"editor.renderLineHighlightOnlyWhenFocus": false,

	// Controls how the editor should render whitespace characters.
	//  - none
	//  - boundary: Render whitespace characters except for single spaces between words.
	//  - selection: Render whitespace characters only on selected text.
	//  - trailing: Render only trailing whitespace characters.
	//  - all
	"editor.renderWhitespace": "selection",

	// Controls whether selections should have rounded corners.
	"editor.roundedSelection": true,

	// Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
	"editor.rulers": [],

	// Controls the visibility of the horizontal scrollbar.
	//  - auto: The horizontal scrollbar will be visible only when necessary.
	//  - visible: The horizontal scrollbar will always be visible.
	//  - hidden: The horizontal scrollbar will always be hidden.
	"editor.scrollbar.horizontal": "auto",

	// The height of the horizontal scrollbar.
	"editor.scrollbar.horizontalScrollbarSize": 12,

	// Controls whether clicks scroll by page or jump to click position.
	"editor.scrollbar.scrollByPage": false,

	// Controls the visibility of the vertical scrollbar.
	//  - auto: The vertical scrollbar will be visible only when necessary.
	//  - visible: The vertical scrollbar will always be visible.
	//  - hidden: The vertical scrollbar will always be hidden.
	"editor.scrollbar.vertical": "auto",

	// The width of the vertical scrollbar.
	"editor.scrollbar.verticalScrollbarSize": 14,

	// Controls the number of extra characters beyond which the editor will scroll horizontally.
	"editor.scrollBeyondLastColumn": 5,

	// Controls whether the editor will scroll beyond the last line.
	"editor.scrollBeyondLastLine": true,

	// Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.
	"editor.scrollPredominantAxis": true,

	// Controls whether the editor should highlight matches similar to the selection.
	"editor.selectionHighlight": true,

	// Controls whether the semanticHighlighting is shown for the languages that support it.
	//  - true: Semantic highlighting enabled for all color themes.
	//  - false: Semantic highlighting disabled for all color themes.
	//  - configuredByTheme: Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting.
	"editor.semanticHighlighting.enabled": "configuredByTheme",

	// Overrides editor semantic token color and styles from the currently selected color theme.
	"editor.semanticTokenColorCustomizations": {},

	// Controls strikethrough deprecated variables.
	"editor.showDeprecated": true,

	// Controls when the folding controls on the gutter are shown.
	//  - always: Always show the folding controls.
	//  - mouseover: Only show the folding controls when the mouse is over the gutter.
	"editor.showFoldingControls": "mouseover",

	// Controls fading out of unused code.
	"editor.showUnused": true,

	// Whether leading and trailing whitespace should always be selected.
	"editor.smartSelect.selectLeadingAndTrailingWhitespace": true,

	// Controls whether the editor will scroll using an animation.
	"editor.smoothScrolling": false,

	// Controls whether snippets are shown with other suggestions and how they are sorted.
	//  - top: Show snippet suggestions on top of other suggestions.
	//  - bottom: Show snippet suggestions below other suggestions.
	//  - inline: Show snippets suggestions with other suggestions.
	//  - none: Do not show snippet suggestions.
	"editor.snippetSuggestions": "inline",

	// Keep peek editors open even when double clicking their content or when hitting `Escape`.
	"editor.stablePeek": false,

	// Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.
	"editor.stickyTabStops": false,

	// This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.
	// 
	"editor.suggest.filteredTypes": {},

	// Controls whether filtering and sorting suggestions accounts for small typos.
	"editor.suggest.filterGraceful": true,

	// Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.
	//  - insert: Insert suggestion without overwriting text right of the cursor.
	//  - replace: Insert suggestion and overwrite text right of the cursor.
	"editor.suggest.insertMode": "insert",

	// Controls whether sorting favors words that appear close to the cursor.
	"editor.suggest.localityBonus": false,

	// This setting is deprecated. The suggest widget can now be resized.
	// 
	"editor.suggest.maxVisibleSuggestions": 0,

	// Controls whether to preview the suggestion outcome in the editor.
	"editor.suggest.preview": false,

	// Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `editor.suggestSelection`).
	"editor.suggest.shareSuggestSelections": false,

	// When enabled IntelliSense shows `class`-suggestions.
	"editor.suggest.showClasses": true,

	// When enabled IntelliSense shows `color`-suggestions.
	"editor.suggest.showColors": true,

	// When enabled IntelliSense shows `constant`-suggestions.
	"editor.suggest.showConstants": true,

	// When enabled IntelliSense shows `constructor`-suggestions.
	"editor.suggest.showConstructors": true,

	// When enabled IntelliSense shows `customcolor`-suggestions.
	"editor.suggest.showCustomcolors": true,

	// When enabled IntelliSense shows `deprecated`-suggestions.
	"editor.suggest.showDeprecated": true,

	// When enabled IntelliSense shows `enumMember`-suggestions.
	"editor.suggest.showEnumMembers": true,

	// When enabled IntelliSense shows `enum`-suggestions.
	"editor.suggest.showEnums": true,

	// When enabled IntelliSense shows `event`-suggestions.
	"editor.suggest.showEvents": true,

	// When enabled IntelliSense shows `field`-suggestions.
	"editor.suggest.showFields": true,

	// When enabled IntelliSense shows `file`-suggestions.
	"editor.suggest.showFiles": true,

	// When enabled IntelliSense shows `folder`-suggestions.
	"editor.suggest.showFolders": true,

	// When enabled IntelliSense shows `function`-suggestions.
	"editor.suggest.showFunctions": true,

	// Controls whether to show or hide icons in suggestions.
	"editor.suggest.showIcons": true,

	// Controls whether suggest details show inline with the label or only in the details widget
	"editor.suggest.showInlineDetails": true,

	// When enabled IntelliSense shows `interface`-suggestions.
	"editor.suggest.showInterfaces": true,

	// When enabled IntelliSense shows `issues`-suggestions.
	"editor.suggest.showIssues": true,

	// When enabled IntelliSense shows `keyword`-suggestions.
	"editor.suggest.showKeywords": true,

	// When enabled IntelliSense shows `method`-suggestions.
	"editor.suggest.showMethods": true,

	// When enabled IntelliSense shows `module`-suggestions.
	"editor.suggest.showModules": true,

	// When enabled IntelliSense shows `operator`-suggestions.
	"editor.suggest.showOperators": true,

	// When enabled IntelliSense shows `property`-suggestions.
	"editor.suggest.showProperties": true,

	// When enabled IntelliSense shows `reference`-suggestions.
	"editor.suggest.showReferences": true,

	// When enabled IntelliSense shows `snippet`-suggestions.
	"editor.suggest.showSnippets": true,

	// Controls the visibility of the status bar at the bottom of the suggest widget.
	"editor.suggest.showStatusBar": false,

	// When enabled IntelliSense shows `struct`-suggestions.
	"editor.suggest.showStructs": true,

	// When enabled IntelliSense shows `typeParameter`-suggestions.
	"editor.suggest.showTypeParameters": true,

	// When enabled IntelliSense shows `unit`-suggestions.
	"editor.suggest.showUnits": true,

	// When enabled IntelliSense shows `user`-suggestions.
	"editor.suggest.showUsers": true,

	// When enabled IntelliSense shows `value`-suggestions.
	"editor.suggest.showValues": true,

	// When enabled IntelliSense shows `variable`-suggestions.
	"editor.suggest.showVariables": true,

	// When enabled IntelliSense shows `text`-suggestions.
	"editor.suggest.showWords": true,

	// Controls whether an active snippet prevents quick suggestions.
	"editor.suggest.snippetsPreventQuickSuggestions": true,

	// Font size for the suggest widget. When set to `0`, the value of `editor.fontSize` is used.
	"editor.suggestFontSize": 0,

	// Line height for the suggest widget. When set to `0`, the value of `editor.lineHeight` is used. The minimum value is 8.
	"editor.suggestLineHeight": 0,

	// Controls whether suggestions should automatically show up when typing trigger characters.
	"editor.suggestOnTriggerCharacters": true,

	// Controls how suggestions are pre-selected when showing the suggest list.
	//  - first: Always select the first suggestion.
	//  - recentlyUsed: Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.
	//  - recentlyUsedByPrefix: Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.
	"editor.suggestSelection": "recentlyUsed",

	// Enables tab completions.
	//  - on: Tab complete will insert the best matching suggestion when pressing tab.
	//  - off: Disable tab completions.
	//  - onlySnippets: Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.
	"editor.tabCompletion": "off",

	// The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
	"editor.tabSize": 4,

	// Overrides editor syntax colors and font style from the currently selected color theme.
	"editor.tokenColorCustomizations": {},

	// Remove trailing auto inserted whitespace.
	"editor.trimAutoWhitespace": true,

	// Controls whether clicking on the empty content after a folded line will unfold the line.
	"editor.unfoldOnClickAfterEndOfLine": false,

	// Remove unusual line terminators that might cause problems.
	//  - auto: Unusual line terminators are automatically removed.
	//  - off: Unusual line terminators are ignored.
	//  - prompt: Unusual line terminators prompt to be removed.
	"editor.unusualLineTerminators": "prompt",

	// Inserting and deleting whitespace follows tab stops.
	"editor.useTabStops": true,

	// Controls whether completions should be computed based on words in the document.
	"editor.wordBasedSuggestions": true,

	// Controls from which documents word based completions are computed.
	//  - currentDocument: Only suggest words from the active document.
	//  - matchingDocuments: Suggest words from all open documents of the same language.
	//  - allDocuments: Suggest words from all open documents.
	"editor.wordBasedSuggestionsMode": "matchingDocuments",

	// Characters that will be used as word separators when doing word related navigations or operations.
	"editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

	// Controls how lines should wrap.
	//  - off: Lines will never wrap.
	//  - on: Lines will wrap at the viewport width.
	//  - wordWrapColumn: Lines will wrap at `editor.wordWrapColumn`.
	//  - bounded: Lines will wrap at the minimum of viewport and `editor.wordWrapColumn`.
	"editor.wordWrap": "off",

	// Controls the wrapping column of the editor when `editor.wordWrap` is `wordWrapColumn` or `bounded`.
	"editor.wordWrapColumn": 80,

	// Controls the indentation of wrapped lines.
	//  - none: No indentation. Wrapped lines begin at column 1.
	//  - same: Wrapped lines get the same indentation as the parent.
	//  - indent: Wrapped lines get +1 indentation toward the parent.
	//  - deepIndent: Wrapped lines get +2 indentation toward the parent.
	"editor.wrappingIndent": "same",

	// Controls the algorithm that computes wrapping points.
	//  - simple: Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.
	//  - advanced: Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases.
	"editor.wrappingStrategy": "simple",

	// Controls whether inline actions are always visible in the Source Control view.
	"scm.alwaysShowActions": false,

	// Controls whether repositories should always be visible in the SCM view.
	"scm.alwaysShowRepositories": false,

	// Controls whether the SCM view should automatically reveal and select files when opening them.
	"scm.autoReveal": true,

	// Controls the count badge on the Source Control icon on the Activity Bar.
	//  - all: Show the sum of all Source Control Provider count badges.
	//  - focused: Show the count badge of the focused Source Control Provider.
	//  - off: Disable the Source Control count badge.
	"scm.countBadge": "all",

	// Controls the default Source Control repository view mode.
	//  - tree: Show the repository changes as a tree.
	//  - list: Show the repository changes as a list.
	"scm.defaultViewMode": "list",

	// Controls diff decorations in the editor.
	//  - all: Show the diff decorations in all available locations.
	//  - gutter: Show the diff decorations only in the editor gutter.
	//  - overview: Show the diff decorations only in the overview ruler.
	//  - minimap: Show the diff decorations only in the minimap.
	//  - none: Do not show the diff decorations.
	"scm.diffDecorations": "all",

	// Controls the behavior of Source Control diff gutter decorations.
	//  - diff: Show the inline diff peek view on click.
	//  - none: Do nothing.
	"scm.diffDecorationsGutterAction": "diff",

	// Controls the visibility of the Source Control diff decorator in the gutter.
	//  - always: Show the diff decorator in the gutter at all times.
	//  - hover: Show the diff decorator in the gutter only on hover.
	"scm.diffDecorationsGutterVisibility": "always",

	// Controls the width(px) of diff decorations in gutter (added & modified).
	"scm.diffDecorationsGutterWidth": 3,

	// Controls whether leading and trailing whitespace is ignored in Source Control diff gutter decorations.
	//  - true: Ignore leading and trailing whitespace.
	//  - false: Do not ignore leading and trailing whitespace.
	//  - inherit: Inherit from `diffEditor.ignoreTrimWhitespace`.
	"scm.diffDecorationsIgnoreTrimWhitespace": "false",

	// Controls the font for the input message. Use `default` for the workbench user interface font family, `editor` for the `editor.fontFamily`'s value, or a custom font family.
	"scm.inputFontFamily": "default",

	// Controls the font size for the input message in pixels.
	"scm.inputFontSize": 13,

	// Controls the count badges on Source Control Provider headers. These headers only appear when there is more than one provider.
	//  - hidden: Hide Source Control Provider count badges.
	//  - auto: Only show count badge for Source Control Provider when non-zero.
	//  - visible: Show Source Control Provider count badges.
	"scm.providerCountBadge": "hidden",

	// Controls how many repositories are visible in the Source Control Repositories section. Set to `0` to be able to manually resize the view.
	"scm.repositories.visible": 10,

	// Controls whether an action button can be shown in the SCM view.
	"scm.showActionButton": true,

	// Controls when the restricted mode banner is shown.
	//  - always: Show the banner every time an untrusted workspace is open.
	//  - untilDismissed: Show the banner when an untrusted workspace is opened until dismissed.
	//  - never: Do not show the banner when an untrusted workspace is open.
	"security.workspace.trust.banner": "untilDismissed",

	// Controls whether or not the empty window is trusted by default within VS Code. When used with `security.workspace.trust.untrustedFiles`, you can enable the full functionality of VS Code without prompting in an empty window.
	"security.workspace.trust.emptyWindow": true,

	// Controls whether or not workspace trust is enabled within VS Code.
	"security.workspace.trust.enabled": true,

	// Controls when the startup prompt to trust a workspace is shown.
	//  - always: Ask for trust every time an untrusted workspace is opened.
	//  - once: Ask for trust the first time an untrusted workspace is opened.
	//  - never: Do not ask for trust when an untrusted workspace is opened.
	"security.workspace.trust.startupPrompt": "once",

	// Controls how to handle opening untrusted files in a trusted workspace. This setting also applies to opening files in an empty window which is trusted via `security.workspace.trust.emptyWindow`.
	//  - prompt: Ask how to handle untrusted files for each workspace. Once untrusted files are introduced to a trusted workspace, you will not be prompted again.
	//  - open: Always allow untrusted files to be introduced to a trusted workspace without prompting.
	//  - newWindow: Always open untrusted files in a separate window in restricted mode without prompting.
	"security.workspace.trust.untrustedFiles": "prompt",

	// Controls the behavior of clicking an activity bar icon in the workbench.
	//  - toggle: Hide the side bar if the clicked item is already visible.
	//  - focus: Focus side bar if the clicked item is already visible.
	"workbench.activityBar.iconClickBehavior": "toggle",

	// Controls the visibility of the activity bar in the workbench.
	"workbench.activityBar.visible": true,

	// Overrides colors from the currently selected color theme.
	"workbench.colorCustomizations": {},

	// Specifies the color theme used in the workbench.
	"workbench.colorTheme": "Default Dark+",

	// Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.
	"workbench.commandPalette.history": 50,

	// Controls whether the last typed input to the command palette should be restored when opening it the next time.
	"workbench.commandPalette.preserveInput": false,

	// If an editor matching one of the listed types is opened as the first in an editor group and more than one group is open, the group is automatically locked. Locked groups will only be used for opening editors when explicitly chosen by user gesture (e.g. drag and drop), but not by default. Consequently the active editor in a locked group is less likely to be replaced accidentally with a different editor.
	"workbench.editor.autoLockGroups": {
		"workbench.input.interactive": false,
		"interactive": false,
		"workbench.editorinputs.searchEditorInput": false,
		"imagePreview.previewEditor": false,
		"vscode.markdown.preview.editor": false,
		"jsProfileVisualizer.cpuprofile.table": false,
		"gitlens.rebase": false,
		"terminalEditor": true,
		"default": false,
		"jupyter-notebook": false,
		"mainThreadWebview-markdown.preview": false
	},

	// Controls if the centered layout should automatically resize to maximum width when more than one group is open. Once only one group is open it will resize back to the original centered width.
	"workbench.editor.centeredLayoutAutoResize": true,

	// Controls the behavior of empty editor groups when the last tab in the group is closed. When enabled, empty groups will automatically close. When disabled, empty groups will remain part of the grid.
	"workbench.editor.closeEmptyGroups": true,

	// Controls whether editors showing a file that was opened during the session should close automatically when getting deleted or renamed by some other process. Disabling this will keep the editor open  on such an event. Note that deleting from within the application will always close the editor and that editors with unsaved changes will never close to preserve your data.
	"workbench.editor.closeOnFileDelete": false,

	// Controls whether editor file decorations should use badges.
	"workbench.editor.decorations.badges": true,

	// Controls whether editor file decorations should use colors.
	"workbench.editor.decorations.colors": true,

	// Controls whether opened editors show as preview. Preview editors do not keep open and are reused until explicitly set to be kept open (e.g. via double click or editing) and show up with an italic font style.
	"workbench.editor.enablePreview": true,

	// Controls whether editors remain in preview when a code navigation is started from them. Preview editors do not keep open and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
	"workbench.editor.enablePreviewFromCodeNavigation": false,

	// Controls whether editors opened from Quick Open show as preview. Preview editors do not keep open and are reused until explicitly set to be kept open (e.g. via double click or editing). This value is ignored when `workbench.editor.enablePreview` is disabled.
	"workbench.editor.enablePreviewFromQuickOpen": false,

	// Controls whether tabs are closed in most recently used order or from left to right.
	"workbench.editor.focusRecentEditorAfterClose": true,

	// Controls whether a top border is drawn on tabs for editors that have unsaved changes. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.highlightModifiedTabs": false,

	// Controls the format of the label for an editor.
	//  - default: Show the name of the file. When tabs are enabled and two files have the same name in one group the distinguishing sections of each file's path are added. When tabs are disabled, the path relative to the workspace folder is shown if the editor is active.
	//  - short: Show the name of the file followed by its directory name.
	//  - medium: Show the name of the file followed by its path relative to the workspace folder.
	//  - long: Show the name of the file followed by its absolute path.
	"workbench.editor.labelFormat": "default",

	// Controls whether the language in a text editor is automatically detected unless the language has been explicitly set by the language picker. This can also be scoped by language so you can specify which languages you do not want to be switched off of. This is useful for languages like Markdown that often contain other languages that might trick language detection into thinking it's the embedded language and not Markdown.
	"workbench.editor.languageDetection": true,

	// Controls if the number of opened editors should be limited or not. When enabled, less recently used editors will close to make space for newly opening editors.
	"workbench.editor.limit.enabled": false,

	// Controls if the limit of maximum opened editors should apply per editor group or across all editor groups.
	"workbench.editor.limit.perEditorGroup": false,

	// Controls the maximum number of opened editors. Use the `workbench.editor.limit.perEditorGroup` setting to control this limit per editor group or across all groups.
	"workbench.editor.limit.value": 10,

	// Navigate between open files using mouse buttons four and five if provided.
	"workbench.editor.mouseBackForwardToNavigate": true,

	// Controls where editors open. Select `left` or `right` to open editors to the left or right of the currently active one. Select `first` or `last` to open editors independently from the currently active one.
	"workbench.editor.openPositioning": "right",

	// Controls the default direction of editors that are opened side by side (for example, from the Explorer). By default, editors will open on the right hand side of the currently active one. If changed to `down`, the editors will open below the currently active one.
	"workbench.editor.openSideBySideDirection": "right",

	// Controls the sizing of pinned editor tabs. Pinned tabs are sorted to the beginning of all opened tabs and typically do not close until unpinned. This value is ignored when `workbench.editor.showTabs` is disabled.
	//  - normal: A pinned tab inherits the look of non pinned tabs.
	//  - compact: A pinned tab will show in a compact form with only icon or first letter of the editor name.
	//  - shrink: A pinned tab shrinks to a compact fixed size showing parts of the editor name.
	"workbench.editor.pinnedTabSizing": "normal",

	// Restores the last editor view state (e.g. scroll position) when re-opening editors after they have been closed. Editor view state is stored per editor group and discarded when a group closes. Use the `workbench.editor.sharedViewState` setting to use the last known view state across all editor groups in case no previous view state was found for a editor group.
	"workbench.editor.restoreViewState": true,

	// Controls whether an editor is revealed in any of the visible groups if opened. If disabled, an editor will prefer to open in the currently active editor group. If enabled, an already opened editor will be revealed instead of opened again in the currently active editor group. Note that there are some cases where this setting is ignored, e.g. when forcing an editor to open in a specific group or to the side of the currently active group.
	"workbench.editor.revealIfOpen": false,

	// Controls whether scrolling over tabs will open them or not. By default tabs will only reveal upon scrolling, but not open. You can press and hold the Shift-key while scrolling to change this behavior for that duration. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.scrollToSwitchTabs": false,

	// Preserves the most recent editor view state (e.g. scroll position) across all editor groups and restores that if no specific editor view state is found for the editor group.
	"workbench.editor.sharedViewState": false,

	// Controls whether opened editors should show with an icon or not. This requires a file icon theme to be enabled as well.
	"workbench.editor.showIcons": true,

	// Controls whether opened editors should show in tabs or not.
	"workbench.editor.showTabs": true,

	// Controls the layout for when an editor is split in an editor group to be either vertical or horizontal.
	//  - vertical: Editors are positioned from top to bottom.
	//  - horizontal: Editors are positioned from left to right.
	"workbench.editor.splitInGroupLayout": "horizontal",

	// Controls if editor groups can be split from drag and drop operations by dropping an editor or file on the edges of the editor area.
	"workbench.editor.splitOnDragAndDrop": true,

	// Controls the sizing of editor groups when splitting them.
	//  - distribute: Splits all the editor groups to equal parts.
	//  - split: Splits the active editor group to equal parts.
	"workbench.editor.splitSizing": "distribute",

	// Controls the position of the editor's tabs close buttons, or disables them when set to 'off'. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.tabCloseButton": "right",

	// Controls the sizing of editor tabs. This value is ignored when `workbench.editor.showTabs` is disabled.
	//  - fit: Always keep tabs large enough to show the full editor label.
	//  - shrink: Allow tabs to get smaller when the available space is not enough to show all tabs at once.
	"workbench.editor.tabSizing": "fit",

	// Controls the height of the scrollbars used for tabs and breadcrumbs in the editor title area.
	//  - default: The default size.
	//  - large: Increases the size, so it can be grabbed more easily with the mouse.
	"workbench.editor.titleScrollbarSizing": "default",

	// Controls if the untitled hint should be inline text in the editor or a floating button or hidden.
	"workbench.editor.untitled.hint": "text",

	// Controls the format of the label for an untitled editor.
	//  - content: The name of the untitled file is derived from the contents of its first line unless it has an associated file path. It will fallback to the name in case the line is empty or contains no word characters.
	//  - name: The name of the untitled file is not derived from the contents of the file.
	"workbench.editor.untitled.labelFormat": "content",

	// Controls whether tabs should be wrapped over multiple lines when exceeding available space or whether a scrollbar should appear instead. This value is ignored when `workbench.editor.showTabs` is disabled.
	"workbench.editor.wrapTabs": false,

	// Configure glob patterns to editors (e.g. `"*.hex": "hexEditor.hexEdit"`). These have precedence over the default behavior.
	"workbench.editorAssociations": {},

	// Fetches experiments to run from a Microsoft online service.
	"workbench.enableExperiments": true,

	// Controls whether the layout control button in the custom title bar is enabled.
	"workbench.experimental.layoutControl.enabled": true,

	// Controls the alignment of the panel (terminal, debug console, output, problems) and whether or not it spans beneath the side bar and side panel.
	"workbench.experimental.panel.alignment": "center",

	// Controls whether the side panel opposite the side bar is enabled.
	"workbench.experimental.sidePanel.enabled": false,

	// Configure the opener to use for external URIs (http, https).
	"workbench.externalUriOpeners": {},

	// Controls font aliasing method in the workbench.
	//  - default: Sub-pixel font smoothing. On most non-retina displays this will give the sharpest text.
	//  - antialiased: Smooth the font on the level of the pixel, as opposed to the subpixel. Can make the font appear lighter overall.
	//  - none: Disables font smoothing. Text will show with jagged sharp edges.
	//  - auto: Applies `default` or `antialiased` automatically based on the DPI of displays.
	"workbench.fontAliasing": "default",

	// Controls the delay in milliseconds after which the hover is shown for workbench items (ex. some extension provided tree view items). Already visible items may require a refresh before reflecting this setting change.
	"workbench.hover.delay": 1500,

	// Specifies the file icon theme used in the workbench or 'null' to not show any file icons.
	//  - null: No file icons
	//  - vs-minimal
	//  - vs-seti
	//  - vscode-great-icons
	//  - helium-icon-theme
	//  - material-icon-theme
	"workbench.iconTheme": "vs-seti",

	// Controls whether keyboard navigation in lists and trees is automatically triggered simply by typing. If set to `false`, keyboard navigation is only triggered when executing the `list.toggleKeyboardNavigation` command, for which you can assign a keyboard shortcut.
	"workbench.list.automaticKeyboardNavigation": true,

	// Scrolling speed multiplier when pressing `Alt`.
	"workbench.list.fastScrollSensitivity": 5,

	// Controls whether lists and trees support horizontal scrolling in the workbench. Warning: turning on this setting has a performance implication.
	"workbench.list.horizontalScrolling": false,

	// Controls the keyboard navigation style for lists and trees in the workbench. Can be simple, highlight and filter.
	//  - simple: Simple keyboard navigation focuses elements which match the keyboard input. Matching is done only on prefixes.
	//  - highlight: Highlight keyboard navigation highlights elements which match the keyboard input. Further up and down navigation will traverse only the highlighted elements.
	//  - filter: Filter keyboard navigation will filter out and hide all the elements which do not match the keyboard input.
	"workbench.list.keyboardNavigation": "highlight",

	// A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
	"workbench.list.mouseWheelScrollSensitivity": 1,

	// The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.
	//  - ctrlCmd: Maps to `Control` on Windows and Linux and to `Command` on macOS.
	//  - alt: Maps to `Alt` on Windows and Linux and to `Option` on macOS.
	"workbench.list.multiSelectModifier": "ctrlCmd",

	// Controls how to open items in trees and lists using the mouse (if supported). Note that some trees and lists might choose to ignore this setting if it is not applicable.
	"workbench.list.openMode": "singleClick",

	// Controls whether lists and trees have smooth scrolling.
	"workbench.list.smoothScrolling": false,

	// Controls the default location of the panel (terminal, debug console, output, problems). It can either show at the bottom, right, or left of the workbench.
	"workbench.panel.defaultLocation": "bottom",

	// Controls whether the panel opens maximized. It can either always open maximized, never open maximized, or open to the last state it was in before being closed.
	//  - always: Always maximize the panel when opening it.
	//  - never: Never maximize the panel when opening it. The panel will open un-maximized.
	//  - preserve: Open the panel to the state that it was in, before it was closed.
	"workbench.panel.opensMaximized": "preserve",

	// Specifies the preferred color theme for dark OS appearance when `window.autoDetectColorScheme` is enabled.
	"workbench.preferredDarkColorTheme": "Default Dark+",

	// Specifies the preferred color theme used in high contrast mode when `window.autoDetectHighContrast` is enabled.
	"workbench.preferredHighContrastColorTheme": "Default High Contrast",

	// Specifies the preferred color theme for light OS appearance when `window.autoDetectColorScheme` is enabled.
	"workbench.preferredLightColorTheme": "Default Light+",

	// Specifies the product icon theme used.
	//  - Default: Default
	//  - icons-carbon
	"workbench.productIconTheme": "Default",

	// Controls whether Quick Open should close automatically once it loses focus.
	"workbench.quickOpen.closeOnFocusLost": true,

	// Controls whether the last typed input to Quick Open should be restored when opening it the next time.
	"workbench.quickOpen.preserveInput": false,

	// Controls the hover feedback delay in milliseconds of the dragging area in between views/editors.
	"workbench.sash.hoverDelay": 300,

	// Controls the feedback area size in pixels of the dragging area in between views/editors. Set it to a larger value if you feel it's hard to resize views using the mouse.
	"workbench.sash.size": 4,

	// Determines which settings editor to use by default.
	//  - ui: Use the settings UI editor.
	//  - json: Use the JSON file editor.
	"workbench.settings.editor": "ui",

	// Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.
	"workbench.settings.enableNaturalLanguageSearch": true,

	// Controls whether opening keybinding settings also opens an editor showing all default keybindings.
	"workbench.settings.openDefaultKeybindings": false,

	// Controls whether opening settings also opens an editor showing all default settings.
	"workbench.settings.openDefaultSettings": false,

	// Controls the behavior of the settings editor Table of Contents while searching.
	//  - hide: Hide the Table of Contents while searching.
	//  - filter: Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category.
	"workbench.settings.settingsSearchTocBehavior": "filter",

	// Controls whether to use the split JSON editor when editing settings as JSON.
	"workbench.settings.useSplitJSON": false,

	// Controls the location of the sidebar and activity bar. They can either show on the left or right of the workbench.
	"workbench.sideBar.location": "left",

	// Controls which editor is shown at startup, if none are restored from the previous session.
	//  - none: Start without an editor.
	//  - welcomePage: Open the Welcome page, with content to aid in getting started with VS Code and extensions.
	//  - readme: Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise. Note: This is only observed as a global configuration, it will be ignored if set in a workspace or folder configuration.
	//  - newUntitledFile: Open a new untitled file (only applies when opening an empty window).
	//  - welcomePageInEmptyWorkbench: Open the Welcome page when opening an empty workbench.
	"workbench.startupEditor": "welcomePage",

	// Controls the visibility of the status bar at the bottom of the workbench.
	"workbench.statusBar.visible": true,

	// When enabled, will show the watermark tips when no editor is open.
	"workbench.tips.enabled": true,

	// Controls how tree folders are expanded when clicking the folder names. Note that some trees and lists might choose to ignore this setting if it is not applicable.
	"workbench.tree.expandMode": "singleClick",

	// Controls tree indentation in pixels.
	"workbench.tree.indent": 8,

	// Controls whether the tree should render indent guides.
	"workbench.tree.renderIndentGuides": "onHover",

	// When enabled, trusted domain prompts will appear when opening links in trusted workspaces.
	"workbench.trustedDomains.promptInTrustedWorkspace": false,

	// Controls the visibility of view header actions. View header actions may either be always visible, or only visible when that view is focused or hovered over.
	"workbench.view.alwaysShowHeaderActions": false,

	// When enabled, reduce motion in welcome page.
	"workbench.welcomePage.preferReducedMotion": false,

	// When enabled, an extension's walkthrough will open upon install of the extension.
	"workbench.welcomePage.walkthroughs.openOnInstall": true,

	// If set, automatically switch to the preferred color theme based on the OS appearance. If the OS appearance is dark, the theme specified at `workbench.preferredDarkColorTheme#` is used, for light `#workbench.preferredLightColorTheme`.
	"window.autoDetectColorScheme": false,

	// If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme. The high contrast theme to use is specified by `workbench.preferredHighContrastColorTheme`
	"window.autoDetectHighContrast": true,

	// If enabled, clicking on an inactive window will both activate the window and trigger the element under the mouse if it is clickable. If disabled, clicking anywhere on an inactive window will activate it only and a second click is required on the element.
	"window.clickThroughInactive": true,

	// Controls whether closing the last editor should also close the window. This setting only applies for windows that do not show folders.
	"window.closeWhenEmpty": false,

	// Adjust the appearance of dialog windows.
	"window.dialogStyle": "native",

	// If enabled, double clicking the application icon in the title bar will close the window and the window cannot be dragged by the icon. This setting only has an effect when `window.titleBarStyle` is set to `custom`.
	"window.doubleClickIconToClose": false,

	// Controls if native full-screen should be used on macOS. Disable this option to prevent macOS from creating a new space when going full-screen.
	"window.nativeFullScreen": true,

	// Enables macOS Sierra window tabs. Note that changes require a full restart to apply and that native tabs will disable a custom title bar style if configured.
	"window.nativeTabs": false,

	// Controls the dimensions of opening a new window when at least one window is already opened. Note that this setting does not have an impact on the first window that is opened. The first window will always restore the size and location as you left it before closing.
	//  - default: Open new windows in the center of the screen.
	//  - inherit: Open new windows with same dimension as last active one.
	//  - offset: Open new windows with same dimension as last active one with an offset position.
	//  - maximized: Open new windows maximized.
	//  - fullscreen: Open new windows in full screen mode.
	"window.newWindowDimensions": "default",

	// Controls whether files should open in a new window. 
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Files will open in a new window.
	//  - off: Files will open in the window with the files' folder open or the last active window.
	//  - default: Files will open in the window with the files' folder open or the last active window unless opened via the Dock or from Finder.
	"window.openFilesInNewWindow": "off",

	// Controls whether folders should open in a new window or replace the last active window.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Folders will open in a new window.
	//  - off: Folders will replace the last active window.
	//  - default: Folders will open in a new window unless a folder is picked from within the application (e.g. via the File menu).
	"window.openFoldersInNewWindow": "default",

	// Controls whether a new empty window should open when starting a second instance without arguments or if the last running instance should get focus.
	// Note that there can still be cases where this setting is ignored (e.g. when using the `--new-window` or `--reuse-window` command line option).
	//  - on: Open a new empty window.
	//  - off: Focus the last active running instance.
	"window.openWithoutArgumentsInNewWindow": "off",

	// Controls whether a window should restore to full screen mode if it was exited in full screen mode.
	"window.restoreFullscreen": false,

	// Controls how windows are being reopened after starting for the first time. This setting has no effect when the application is already running.
	//  - preserve: Always reopen all windows. If a folder or workspace is opened (e.g. from the command line) it opens as a new window unless it was opened before. If files are opened they will open in one of the restored windows.
	//  - all: Reopen all windows unless a folder, workspace or file is opened (e.g. from the command line).
	//  - folders: Reopen all windows that had folders or workspaces opened unless a folder, workspace or file is opened (e.g. from the command line).
	//  - one: Reopen the last active window unless a folder, workspace or file is opened (e.g. from the command line).
	//  - none: Never reopen a window. Unless a folder or workspace is opened (e.g. from the command line), an empty window will appear.
	"window.restoreWindows": "all",

	// Controls the window title based on the active editor. Variables are substituted based on the context:
	// - `${activeEditorShort}`: the file name (e.g. myFile.txt).
	// - `${activeEditorMedium}`: the path of the file relative to the workspace folder (e.g. myFolder/myFileFolder/myFile.txt).
	// - `${activeEditorLong}`: the full path of the file (e.g. /Users/Development/myFolder/myFileFolder/myFile.txt).
	// - `${activeFolderShort}`: the name of the folder the file is contained in (e.g. myFileFolder).
	// - `${activeFolderMedium}`: the path of the folder the file is contained in, relative to the workspace folder (e.g. myFolder/myFileFolder).
	// - `${activeFolderLong}`: the full path of the folder the file is contained in (e.g. /Users/Development/myFolder/myFileFolder).
	// - `${folderName}`: name of the workspace folder the file is contained in (e.g. myFolder).
	// - `${folderPath}`: file path of the workspace folder the file is contained in (e.g. /Users/Development/myFolder).
	// - `${rootName}`: name of the opened workspace or folder (e.g. myFolder or myWorkspace).
	// - `${rootPath}`: file path of the opened workspace or folder (e.g. /Users/Development/myWorkspace).
	// - `${appName}`: e.g. VS Code.
	// - `${remoteName}`: e.g. SSH
	// - `${dirty}`: an indicator for when the active editor has unsaved changes.
	// - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
	"window.title": "${activeEditorShort}${separator}${rootName}",

	// Adjust the appearance of the window title bar. On Linux and Windows, this setting also affects the application and context menu appearances. Changes require a full restart to apply.
	"window.titleBarStyle": "custom",

	// Separator used by `window.title`.
	"window.titleSeparator": " — ",

	// Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.
	"window.zoomLevel": 0,

	// Configure file associations to languages (e.g. `"*.extension": "html"`). These have precedence over the default associations of the languages installed.
	"files.associations": {},

	// When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language. Note, this setting is not respected by text search. Only `files.encoding` is respected.
	"files.autoGuessEncoding": false,

	// Controls auto save of editors that have unsaved changes. Read more about autosave [here](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save).
	//  - off: An editor with changes is never automatically saved.
	//  - afterDelay: An editor with changes is automatically saved after the configured `files.autoSaveDelay`.
	//  - onFocusChange: An editor with changes is automatically saved when the editor loses focus.
	//  - onWindowChange: An editor with changes is automatically saved when the window loses focus.
	"files.autoSave": "off",

	// Controls the delay in milliseconds after which an editor with unsaved changes is saved automatically. Only applies when `files.autoSave` is set to `afterDelay`.
	"files.autoSaveDelay": 1000,

	// The default language mode that is assigned to new files. If configured to `${activeEditorLanguage}`, will use the language mode of the currently active text editor if any.
	"files.defaultLanguage": "",

	// Moves files/folders to the OS trash (recycle bin on Windows) when deleting. Disabling this will delete files/folders permanently.
	"files.enableTrash": true,

	// The default character set encoding to use when reading and writing files. This setting can also be configured per language.
	//  - utf8: UTF-8
	//  - utf8bom: UTF-8 with BOM
	//  - utf16le: UTF-16 LE
	//  - utf16be: UTF-16 BE
	//  - windows1252: Western (Windows 1252)
	//  - iso88591: Western (ISO 8859-1)
	//  - iso88593: Western (ISO 8859-3)
	//  - iso885915: Western (ISO 8859-15)
	//  - macroman: Western (Mac Roman)
	//  - cp437: DOS (CP 437)
	//  - windows1256: Arabic (Windows 1256)
	//  - iso88596: Arabic (ISO 8859-6)
	//  - windows1257: Baltic (Windows 1257)
	//  - iso88594: Baltic (ISO 8859-4)
	//  - iso885914: Celtic (ISO 8859-14)
	//  - windows1250: Central European (Windows 1250)
	//  - iso88592: Central European (ISO 8859-2)
	//  - cp852: Central European (CP 852)
	//  - windows1251: Cyrillic (Windows 1251)
	//  - cp866: Cyrillic (CP 866)
	//  - iso88595: Cyrillic (ISO 8859-5)
	//  - koi8r: Cyrillic (KOI8-R)
	//  - koi8u: Cyrillic (KOI8-U)
	//  - iso885913: Estonian (ISO 8859-13)
	//  - windows1253: Greek (Windows 1253)
	//  - iso88597: Greek (ISO 8859-7)
	//  - windows1255: Hebrew (Windows 1255)
	//  - iso88598: Hebrew (ISO 8859-8)
	//  - iso885910: Nordic (ISO 8859-10)
	//  - iso885916: Romanian (ISO 8859-16)
	//  - windows1254: Turkish (Windows 1254)
	//  - iso88599: Turkish (ISO 8859-9)
	//  - windows1258: Vietnamese (Windows 1258)
	//  - gbk: Simplified Chinese (GBK)
	//  - gb18030: Simplified Chinese (GB18030)
	//  - cp950: Traditional Chinese (Big5)
	//  - big5hkscs: Traditional Chinese (Big5-HKSCS)
	//  - shiftjis: Japanese (Shift JIS)
	//  - eucjp: Japanese (EUC-JP)
	//  - euckr: Korean (EUC-KR)
	//  - windows874: Thai (Windows 874)
	//  - iso885911: Latin/Thai (ISO 8859-11)
	//  - koi8ru: Cyrillic (KOI8-RU)
	//  - koi8t: Tajik (KOI8-T)
	//  - gb2312: Simplified Chinese (GB 2312)
	//  - cp865: Nordic DOS (CP 865)
	//  - cp850: Western European DOS (CP 850)
	"files.encoding": "utf8",

	// The default end of line character.
	//  - \n: LF
	//  - \r\n: CRLF
	//  - auto: Uses operating system specific end of line character.
	"files.eol": "auto",

	// Configure glob patterns for excluding files and folders. For example, the file Explorer decides which files and folders to show or hide based on this setting. Refer to the `search.exclude` setting to define search specific excludes. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"files.exclude": {
		"**/.git": true,
		"**/.svn": true,
		"**/.hg": true,
		"**/CVS": true,
		"**/.DS_Store": true,
		"**/Thumbs.db": true
	},

	// Experimental: changes the file service to be sandboxed. Do not change this unless instructed!
	"files.experimentalSandboxedFileService": true,

	// Controls whether unsaved files are remembered between sessions, allowing the save prompt when exiting the editor to be skipped.
	//  - off: Disable hot exit. A prompt will show when attempting to close a window with editors that have unsaved changes.
	//  - onExit: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu). All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
	//  - onExitAndWindowClose: Hot exit will be triggered when the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), and also for any window with a folder opened regardless of whether it's the last window. All windows without folders opened will be restored upon next launch. A list of previously opened windows with unsaved files can be accessed via `File > Open Recent > More...`
	"files.hotExit": "onExit",

	// When enabled, insert a final new line at the end of the file when saving it.
	"files.insertFinalNewline": false,

	// Controls the mechanism used for file watching. Only change this when you see issues related to file watching.
	//  - on: Enable the legacy file watcher in case you see issues with the new file watcher.
	//  - off: Disable the legacy file watcher and enable the new file watcher to benefit from its capabilities.
	//  - default: The new file watcher will be enabled.
	"files.legacyWatcher": "default",

	// Controls the memory available to VS Code after restart when trying to open large files. Same effect as specifying `--max-memory=NEWSIZE` on the command line.
	"files.maxMemoryForLargeFilesMB": 4096,

	// Timeout in milliseconds after which file participants for create, rename, and delete are cancelled. Use `0` to disable participants.
	"files.participants.timeout": 60000,

	// Restore the undo stack when a file is reopened.
	"files.restoreUndoStack": true,

	// A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.
	//  - askUser: Will refuse to save and ask for resolving the save conflict manually.
	//  - overwriteFileOnDisk: Will resolve the save conflict by overwriting the file on disk with the changes in the editor.
	"files.saveConflictResolution": "askUser",

	// Enables the simple file dialog. The simple file dialog replaces the system file dialog when enabled.
	"files.simpleDialog.enable": false,

	// When enabled, will trim all new lines after the final new line at the end of the file when saving it.
	"files.trimFinalNewlines": false,

	// When enabled, will trim trailing whitespace when saving a file.
	"files.trimTrailingWhitespace": false,

	// Configure paths or glob patterns to exclude from file watching. Paths that are relative (for example `build/output`) will be resolved to an absolute path using the currently opened workspace. Glob patterns must match on absolute paths (i.e. prefix with `**/` or the full path and suffix with `/**` to match files within a path) to match properly (for example `**/build/output/**` or `/Users/name/workspaces/project/build/output/**`). When you experience the file watcher process consuming a lot of CPU, make sure to exclude large folders that are of less interest (such as build output folders).
	"files.watcherExclude": {
		"**/.git/objects/**": true,
		"**/.git/subtree-cache/**": true,
		"**/node_modules/*/**": true,
		"**/.hg/store/**": true
	},

	// Configure extra paths to watch for changes inside the workspace. By default, all workspace folders will be watched recursively, except for folders that are symbolic links. You can explicitly add absolute or relative paths to support watching folders that are symbolic links. Relative paths will be resolved to an absolute path using the currently opened workspace.
	"files.watcherInclude": [],

	// Controls the font size (in pixels) of the screencast mode keyboard.
	"screencastMode.fontSize": 56,

	// Controls how long (in milliseconds) the keyboard overlay is shown in screencast mode.
	"screencastMode.keyboardOverlayTimeout": 800,

	// Controls what is displayed in the keyboard overlay when showing only shortcuts.
	//  - keys: Keys.
	//  - command: Command title.
	//  - commandWithGroup: Command title prefixed by its group.
	//  - commandAndKeys: Command title and keys.
	//  - commandWithGroupAndKeys: Command title and keys, with the command prefixed by its group.
	"screencastMode.keyboardShortcutsFormat": "commandAndKeys",

	// Controls the color in hex (#RGB, #RGBA, #RRGGBB or #RRGGBBAA) of the mouse indicator in screencast mode.
	"screencastMode.mouseIndicatorColor": "#FF0000",

	// Controls the size (in pixels) of the mouse indicator in screencast mode.
	"screencastMode.mouseIndicatorSize": 20,

	// Only show keyboard shortcuts in screencast mode.
	"screencastMode.onlyKeyboardShortcuts": false,

	// Controls the vertical offset of the screencast mode overlay from the bottom as a percentage of the workbench height.
	"screencastMode.verticalOffset": 20,

	// Controls whether turning on Zen Mode also centers the layout.
	"zenMode.centerLayout": true,

	// Controls whether turning on Zen Mode also puts the workbench into full screen mode.
	"zenMode.fullScreen": true,

	// Controls whether turning on Zen Mode also hides the activity bar either at the left or right of the workbench.
	"zenMode.hideActivityBar": true,

	// Controls whether turning on Zen Mode also hides the editor line numbers.
	"zenMode.hideLineNumbers": true,

	// Controls whether turning on Zen Mode also hides the status bar at the bottom of the workbench.
	"zenMode.hideStatusBar": true,

	// Controls whether turning on Zen Mode also hides workbench tabs.
	"zenMode.hideTabs": true,

	// Controls whether a window should restore to zen mode if it was exited in zen mode.
	"zenMode.restore": true,

	// Controls whether notifications are shown while in zen mode. If true, only error notifications will pop out.
	"zenMode.silentNotifications": true,

	// Specifies how to format absolute dates (e.g. using the `${date}` token) for the current line blame annotation. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.currentLine.dateFormat": null,

	// Specifies whether to provide a blame annotation for the current line, by default. Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`) to toggle the annotations on and off for the current window
	"gitlens.currentLine.enabled": true,

	// Specifies the format of the current line blame annotation. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.currentLine.dateFormat` setting
	"gitlens.currentLine.format": "${author, }${agoOrDate}${' via 'pullRequest}${ • message|50?}",

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the current line blame annotation. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.currentLine.pullRequests.enabled": true,

	// Specifies whether the current line blame annotation can be scrolled into view when it is outside the viewport. **NOTE**: Setting this to `false` will inhibit the hovers from showing over the annotation; Set `gitlens.hovers.currentLine.over` to `line` to enable the hovers to show anywhere over the line.
	"gitlens.currentLine.scrollable": true,

	// Controls whether the explorer should automatically reveal and select files when opening them.
	//  - true: Files will be revealed and selected.
	//  - false: Files will not be revealed and selected.
	//  - focusNoScroll: Files will not be scrolled into view, but will still be focused.
	"explorer.autoReveal": true,

	// Controls whether the explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.
	"explorer.compactFolders": true,

	// Controls whether the explorer should ask for confirmation when deleting a file via the trash.
	"explorer.confirmDelete": true,

	// Controls whether the explorer should ask for confirmation to move files and folders via drag and drop.
	"explorer.confirmDragAndDrop": true,

	// The path separation character used when copying relative file paths.
	//  - /: Use slash as path separation character.
	//  - \: Use backslash as path separation character.
	//  - auto: Uses operating system specific path separation character.
	"explorer.copyRelativePathSeparator": "auto",

	// Controls whether file decorations should use badges.
	"explorer.decorations.badges": true,

	// Controls whether file decorations should use colors.
	"explorer.decorations.colors": true,

	// Controls whether the explorer should allow to move files and folders via drag and drop. This setting only effects drag and drop from inside the explorer.
	"explorer.enableDragAndDrop": true,

	// Controls whether the explorer should expand multi-root workspaces containing only one folder during initilization
	"explorer.expandSingleFolderWorkspaces": true,

	// Controls what naming strategy to use when a giving a new name to a duplicated explorer item on paste.
	//  - simple: Appends the word "copy" at the end of the duplicated name potentially followed by a number
	//  - smart: Adds a number at the end of the duplicated name. If some number is already part of the name, tries to increase that number
	"explorer.incrementalNaming": "simple",

	// Controls the sorting order of editors in the Open Editors pane.
	//  - editorOrder: Editors are ordered in the same order editor tabs are shown.
	//  - alphabetical: Editors are ordered in alphabetical order inside each editor group.
	"explorer.openEditors.sortOrder": "editorOrder",

	// Number of editors shown in the Open Editors pane. Setting this to 0 hides the Open Editors pane.
	"explorer.openEditors.visible": 9,

	// Controls the property-based sorting of files and folders in the explorer.
	//  - default: Files and folders are sorted by their names. Folders are displayed before files.
	//  - mixed: Files and folders are sorted by their names. Files are interwoven with folders.
	//  - filesFirst: Files and folders are sorted by their names. Files are displayed before folders.
	//  - type: Files and folders are grouped by extension type then sorted by their names. Folders are displayed before files.
	//  - modified: Files and folders are sorted by last modified date in descending order. Folders are displayed before files.
	"explorer.sortOrder": "default",

	// Controls the lexicographic sorting of file and folder names in the Explorer.
	//  - default: Uppercase and lowercase names are mixed together.
	//  - upper: Uppercase names are grouped together before lowercase names.
	//  - lower: Lowercase names are grouped together before uppercase names.
	//  - unicode: Names are sorted in unicode order.
	"explorer.sortOrderLexicographicOptions": "default",

	// Specifies the command to be executed when an _authors_ code lens is clicked
	//  - false: Disables click interaction
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Searches for commits within the range
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit url to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file url to the clipboard (when available)
	"gitlens.codeLens.authors.command": "gitlens.toggleFileBlame",

	// Specifies whether to provide an _authors_ code lens, showing number of authors of the file or code block and the most prominent author (if there is more than one)
	"gitlens.codeLens.authors.enabled": true,

	// Specifies whether to provide any Git code lens, by default. Use the `Toggle Git Code Lens` command (`gitlens.toggleCodeLens`) to toggle the Git code lens on and off for the current window
	"gitlens.codeLens.enabled": true,

	// Specifies whether to provide any Git code lens on symbols that span only a single line
	"gitlens.codeLens.includeSingleLineSymbols": false,

	// Specifies the command to be executed when a _recent change_ code lens is clicked
	//  - false: Disables click interaction
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.diffWithPrevious: Compares the current committed file with the previous commit
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Searches for the commit
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit url to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file url to the clipboard (when available)
	"gitlens.codeLens.recentChange.command": "gitlens.showQuickCommitFileDetails",

	// Specifies whether to provide a _recent change_ code lens, showing the author and date of the most recent commit for the file or code block
	"gitlens.codeLens.recentChange.enabled": true,

	// Specifies where Git code lens will be shown in the document
	//  - document: Adds code lens at the top of the document
	//  - containers: Adds code lens at the start of container-like symbols (modules, classes, interfaces, etc)
	//  - blocks: Adds code lens at the start of block-like symbols (functions, methods, etc) lines
	"gitlens.codeLens.scopes": [
		"document",
		"containers"
	],

	// Deprecated. Use the per-language `gitlens.codeLens.scopes#` and `#gitlens.codeLens.symbolScopes` settings instead
	// 
	"gitlens.codeLens.scopesByLanguage": null,

	// Specifies a set of document symbols where Git code lens will or will not be shown in the document. Prefix with `!` to avoid providing a Git code lens for the symbol. Must be a member of `SymbolKind`
	"gitlens.codeLens.symbolScopes": [],

	// Specifies the string to be shown in place of the _authors_ code lens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.authorsOnly": "$(ellipsis)",

	// Specifies the string to be shown in place of both the _recent change_ and _authors_ code lens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors": "$(ellipsis)",

	// Specifies the string to be shown in place of the _recent change_ code lens when there are unsaved changes
	"gitlens.strings.codeLens.unsavedChanges.recentChangeOnly": "$(ellipsis)",

	// Specifies the blame alignment in the status bar
	//  - left: Aligns to the left
	//  - right: Aligns to the right
	"gitlens.statusBar.alignment": "right",

	// Specifies the command to be executed when the blame status bar item is clicked
	//  - gitlens.toggleFileBlame: Toggles file blame
	//  - gitlens.toggleFileHeatmap: Toggles file heatmap
	//  - gitlens.toggleFileChanges: Toggles file changes since before the commit
	//  - gitlens.toggleFileChangesOnly: Toggles file changes from the commit
	//  - gitlens.toggleCodeLens: Toggles Git code lens
	//  - gitlens.diffWithPrevious: Compares the current line commit with the previous
	//  - gitlens.diffWithWorking: Compares the current line commit with the working tree
	//  - gitlens.revealCommitInView: Reveals the commit in the Side Bar
	//  - gitlens.showCommitsInView: Searches for the commit
	//  - gitlens.showQuickCommitDetails: Shows a commit details quick pick menu
	//  - gitlens.showQuickCommitFileDetails: Shows a commit file details quick pick menu
	//  - gitlens.showQuickFileHistory: Shows a file history quick pick menu
	//  - gitlens.showQuickRepoHistory: Shows a branch history quick pick menu
	//  - gitlens.openCommitOnRemote: Opens the commit on the remote service (when available)
	//  - gitlens.copyRemoteCommitUrl: Copies the remote commit url to the clipboard (when available)
	//  - gitlens.openFileOnRemote: Opens the file revision on the remote service (when available)
	//  - gitlens.copyRemoteFileUrl: Copies the remote file url to the clipboard (when available)
	"gitlens.statusBar.command": "gitlens.showQuickCommitDetails",

	// Specifies how to format absolute dates (e.g. using the `${date}` token) in the blame information in the status bar. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.statusBar.dateFormat": null,

	// Specifies whether to provide blame information in the status bar
	"gitlens.statusBar.enabled": true,

	// Specifies the format of the blame information in the status bar. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.statusBar.dateFormat` setting
	"gitlens.statusBar.format": "${author}, ${agoOrDate}${' via 'pullRequest}",

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the status bar. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.statusBar.pullRequests.enabled": true,

	// Specifies whether to avoid clearing the previous blame information when changing lines to reduce status bar "flashing"
	"gitlens.statusBar.reduceFlicker": true,

	// Specifies the format (in markdown) of hover shown over the blame information in the status bar. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.statusBar.tooltipFormat": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}\n\n${commands}${\n\n---\n\nfootnotes}",

	// Specifies whether to provide a _changes (diff)_ hover for all lines when showing blame annotations
	"gitlens.hovers.annotations.changes": true,

	// Specifies whether to provide a _commit details_ hover for all lines when showing blame annotations
	"gitlens.hovers.annotations.details": true,

	// Specifies whether to provide any hovers when showing blame annotations
	"gitlens.hovers.annotations.enabled": true,

	// Specifies when to trigger hovers when showing blame annotations
	//  - annotation: Only shown when hovering over the line annotation
	//  - line: Shown when hovering anywhere over the line
	"gitlens.hovers.annotations.over": "line",

	// Specifies whether to automatically link external resources in commit messages
	"gitlens.hovers.autolinks.enabled": true,

	// Specifies whether to lookup additional details about automatically link external resources in commit messages. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.hovers.autolinks.enhanced": true,

	// Specifies whether to show avatar images in hovers
	"gitlens.hovers.avatars": true,

	// Specifies the size of the avatar images in hovers
	"gitlens.hovers.avatarSize": 32,

	// Specifies whether to show just the changes to the line or the set of related changes in the _changes (diff)_ hover
	//  - line: Shows only the changes to the line
	//  - hunk: Shows the set of related changes
	"gitlens.hovers.changesDiff": "line",

	// Specifies whether to provide a _changes (diff)_ hover for the current line
	"gitlens.hovers.currentLine.changes": true,

	// Specifies whether to provide a _commit details_ hover for the current line
	"gitlens.hovers.currentLine.details": true,

	// Specifies whether to provide any hovers for the current line
	"gitlens.hovers.currentLine.enabled": true,

	// Specifies when to trigger hovers for the current line
	//  - annotation: Only shown when hovering over the line annotation
	//  - line: Shown when hovering anywhere over the line
	"gitlens.hovers.currentLine.over": "annotation",

	// Specifies the format (in markdown) of the _commit details_ hover. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.hovers.detailsMarkdownFormat": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}\n\n${commands}${\n\n---\n\nfootnotes}",

	// Specifies whether to provide any hovers
	"gitlens.hovers.enabled": true,

	// Specifies whether to provide information about the Pull Request (if any) that introduced the commit in the hovers. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.hovers.pullRequests.enabled": true,

	// Controls the positioning of the actionbar on rows in the search view.
	//  - auto: Position the actionbar to the right when the search view is narrow, and immediately after the content when the search view is wide.
	//  - right: Always position the actionbar to the right.
	"search.actionsPosition": "right",

	// Controls whether the search results will be collapsed or expanded.
	//  - auto: Files with less than 10 results are expanded. Others are collapsed.
	//  - alwaysCollapse
	//  - alwaysExpand
	"search.collapseResults": "alwaysExpand",

	// Configure glob patterns for excluding files and folders in fulltext searches and quick open. Inherits all glob patterns from the `files.exclude` setting. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"search.exclude": {
		"**/node_modules": true,
		"**/bower_components": true,
		"**/*.code-search": true
	},

	// Controls whether to follow symlinks while searching.
	"search.followSymlinks": true,

	// Controls whether the search view should read or modify the shared find clipboard on macOS.
	"search.globalFindClipboard": false,

	// This setting is deprecated. You can drag the search icon to a new location instead.
	// Controls whether the search will be shown as a view in the sidebar or as a panel in the panel area for more horizontal space.
	"search.location": "sidebar",

	// The search cache is kept in the extension host which never shuts down, so this setting is no longer needed.
	// When enabled, the searchService process will be kept alive instead of being shut down after an hour of inactivity. This will keep the file search cache in memory.
	"search.maintainFileSearchCache": false,

	// Controls the maximum number of search results, this can be set to `null` (empty) to return unlimited results.
	"search.maxResults": 20000,

	// Controls where new `Search: Find in Files` and `Find in Folder` operations occur: either in the sidebar's search view, or in a search editor
	//  - view: Search in the search view, either in the panel or sidebar.
	//  - reuseEditor: Search in an existing search editor if present, otherwise in a new search editor.
	//  - newEditor: Search in a new search editor.
	"search.mode": "view",

	// Controls sorting order of editor history in quick open when filtering.
	//  - default: History entries are sorted by relevance based on the filter value used. More relevant entries appear first.
	//  - recency: History entries are sorted by recency. More recently opened entries appear first.
	"search.quickOpen.history.filterSortOrder": "default",

	// Whether to include results from recently opened files in the file results for Quick Open.
	"search.quickOpen.includeHistory": true,

	// Whether to include results from a global symbol search in the file results for Quick Open.
	"search.quickOpen.includeSymbols": false,

	// The default number of surrounding context lines to use when creating new Search Editors. If using `search.searchEditor.reusePriorSearchConfiguration`, this can be set to `null` (empty) to use the prior Search Editor's configuration.
	"search.searchEditor.defaultNumberOfContextLines": 1,

	// Configure effect of double clicking a result in a search editor.
	//  - selectWord: Double clicking selects the word under the cursor.
	//  - goToLocation: Double clicking opens the result in the active editor group.
	//  - openLocationToSide: Double clicking opens the result in the editor group to the side, creating one if it does not yet exist.
	"search.searchEditor.doubleClickBehaviour": "goToLocation",

	// When enabled, new Search Editors will reuse the includes, excludes, and flags of the previously opened Search Editor.
	"search.searchEditor.reusePriorSearchConfiguration": false,

	// Search all files as you type.
	"search.searchOnType": true,

	// When `search.searchOnType` is enabled, controls the timeout in milliseconds between a character being typed and the search starting. Has no effect when `search.searchOnType` is disabled.
	"search.searchOnTypeDebouncePeriod": 300,

	// Update the search query to the editor's selected text when focusing the search view. This happens either on click or when triggering the `workbench.views.search.focus` command.
	"search.seedOnFocus": false,

	// Enable seeding search from the word nearest the cursor when the active editor has no selection.
	"search.seedWithNearestWord": false,

	// Controls whether to show line numbers for search results.
	"search.showLineNumbers": false,

	// Search case-insensitively if the pattern is all lowercase, otherwise, search case-sensitively.
	"search.smartCase": false,

	// Controls sorting order of search results.
	//  - default: Results are sorted by folder and file names, in alphabetical order.
	//  - fileNames: Results are sorted by file names ignoring folder order, in alphabetical order.
	//  - type: Results are sorted by file extensions, in alphabetical order.
	//  - modified: Results are sorted by file last modified date, in descending order.
	//  - countDescending: Results are sorted by count per file, in descending order.
	//  - countAscending: Results are sorted by count per file, in ascending order.
	"search.sortOrder": "default",

	// Controls whether to use global `.gitignore` and `.ignore` files when searching for files. Requires `search.useIgnoreFiles` to be enabled.
	"search.useGlobalIgnoreFiles": false,

	// Controls whether to use `.gitignore` and `.ignore` files when searching for files.
	"search.useIgnoreFiles": true,

	// Deprecated. PCRE2 will be used automatically when using regex features that are only supported by PCRE2.
	// Whether to use the PCRE2 regex engine in text search. This enables using some advanced regex features like lookahead and backreferences. However, not all PCRE2 features are supported - only features that are also supported by JavaScript.
	"search.usePCRE2": false,

	// Controls whether to open Replace Preview when selecting or replacing a match.
	"search.useReplacePreview": true,

	// Deprecated. Consider "search.usePCRE2" for advanced regex feature support.
	// This setting is deprecated and now falls back on "search.usePCRE2".
	"search.useRipgrep": true,

	// The proxy setting to use. If not set, will be inherited from the `http_proxy` and `https_proxy` environment variables.
	"http.proxy": "",

	// The value to send as the `Proxy-Authorization` header for every network request.
	"http.proxyAuthorization": null,

	// Controls whether the proxy server certificate should be verified against the list of supplied CAs.
	"http.proxyStrictSSL": true,

	// Use the proxy support for extensions.
	//  - off: Disable proxy support for extensions.
	//  - on: Enable proxy support for extensions.
	//  - fallback: Enable proxy support for extensions, fall back to request options, when no proxy found.
	//  - override: Enable proxy support for extensions, override request options.
	"http.proxySupport": "override",

	// Controls whether CA certificates should be loaded from the OS. (On Windows and macOS, a reload of the window is required after turning this off.)
	"http.systemCertificates": true,

	// Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.
	"keyboard.dispatch": "code",

	// Enables the macOS touchbar buttons on the keyboard if available.
	"keyboard.touchbar.enabled": true,

	// A set of identifiers for entries in the touchbar that should not show up (for example `workbench.action.navigateBack`).
	"keyboard.touchbar.ignored": [],

	// This setting is deprecated, please use 'update.mode' instead.
	// Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
	"update.channel": "default",

	// Configure whether you receive automatic updates. Requires a restart after change. The updates are fetched from a Microsoft online service.
	//  - none: Disable updates.
	//  - manual: Disable automatic background update checks. Updates will be available if you manually check for updates.
	//  - start: Check for updates only on startup. Disable automatic background update checks.
	//  - default: Enable automatic update checks. Code will check for updates automatically and periodically.
	"update.mode": "default",

	// Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service.
	"update.showReleaseNotes": true,

	// Controls when the comments panel should open.
	"comments.openPanel": "openOnSessionStartWithComments",

	// Allow setting breakpoints in any file.
	"debug.allowBreakpointsEverywhere": false,

	// Controls whether to confirm when the window closes if there are active debug sessions.
	//  - never: Never confirm.
	//  - always: Always confirm if there are debug sessions.
	"debug.confirmOnExit": "never",

	// Controls whether suggestions should be accepted on enter in the debug console. enter is also used to evaluate whatever is typed in the debug console.
	"debug.console.acceptSuggestionOnEnter": "off",

	// Controls if the debug console should be automatically closed when the debug session ends.
	"debug.console.closeOnEnd": false,

	// Controls if the debug console should collapse identical lines and show a number of occurrences with a badge.
	"debug.console.collapseIdenticalLines": true,

	// Controls the font family in the debug console.
	"debug.console.fontFamily": "default",

	// Controls the font size in pixels in the debug console.
	"debug.console.fontSize": 12,

	// Controls if the debug console should suggest previously typed input.
	"debug.console.historySuggestions": true,

	// Controls the line height in pixels in the debug console. Use 0 to compute the line height from the font size.
	"debug.console.lineHeight": 0,

	// Controls if the lines should wrap in the debug console.
	"debug.console.wordWrap": true,

	// Show Source Code in Disassembly View.
	"debug.disassemblyView.showSourceCode": true,

	// Controls whether the workbench window should be focused when the debugger breaks.
	"debug.focusWindowOnBreak": true,

	// Show variable values inline in editor while debugging.
	//  - true: Always show variable values inline in editor while debugging.
	//  - false: Never show variable values inline in editor while debugging.
	//  - auto: Show variable values inline in editor while debugging when the language supports inline value locations.
	"debug.inlineValues": "auto",

	// Controls when the internal debug console should open.
	"debug.internalConsoleOptions": "openOnFirstSessionStart",

	// Controls what to do when errors are encountered after running a preLaunchTask.
	//  - debugAnyway: Ignore task errors and start debugging.
	//  - showErrors: Show the Problems view and do not start debugging.
	//  - prompt: Prompt user.
	//  - abort: Cancel debugging.
	"debug.onTaskErrors": "prompt",

	// Controls when the debug view should open.
	"debug.openDebug": "openOnDebugBreak",

	// Automatically open the explorer view at the end of a debug session.
	"debug.openExplorerOnEnd": false,

	// Controls what editors to save before starting a debug session.
	//  - allEditorsInActiveGroup: Save all editors in the active group before starting a debug session.
	//  - nonUntitledEditorsInActiveGroup: Save all editors in the active group except untitled ones before starting a debug session.
	//  - none: Don't save any editors before starting a debug session.
	"debug.saveBeforeStart": "allEditorsInActiveGroup",

	// Controls whether breakpoints should be shown in the overview ruler.
	"debug.showBreakpointsInOverviewRuler": false,

	// Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging.
	"debug.showInlineBreakpointCandidates": true,

	// Controls when the debug status bar should be visible.
	//  - never: Never show debug in status bar
	//  - always: Always show debug in status bar
	//  - onFirstSessionStart: Show debug in status bar only after debug was started for the first time
	"debug.showInStatusBar": "onFirstSessionStart",

	// Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session.
	"debug.showSubSessionsInToolBar": false,

	// Before starting a new debug session in an integrated or external terminal, clear the terminal.
	"debug.terminal.clearBeforeReusing": false,

	// Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`.
	"debug.toolBarLocation": "floating",

	// Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces.
	"launch": {
		"configurations": [],
		"compounds": []
	},

	// Enable/disable autoclosing of HTML tags.
	"html.autoClosingTags": true,

	// Controls the default value for attributes when completion is accepted.
	//  - doublequotes: Attribute value is set to "".
	//  - singlequotes: Attribute value is set to ''.
	//  - empty: Attribute value is not set.
	"html.completion.attributeDefaultValue": "doublequotes",

	// A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-html-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code loads custom data on startup to enhance its HTML support for the custom HTML tags, attributes and attribute values you specify in the JSON files.
	// 
	// The file paths are relative to workspace and only workspace folder settings are considered.
	"html.customData": [],

	// List of tags, comma separated, where the content shouldn't be reformatted. `null` defaults to the `pre` tag.
	"html.format.contentUnformatted": "pre,code,textarea",

	// Enable/disable default HTML formatter.
	"html.format.enable": true,

	// End with a newline.
	"html.format.endWithNewline": false,

	// List of tags, comma separated, that should have an extra newline before them. `null` defaults to `"head, body, /html"`.
	"html.format.extraLiners": "head, body, /html",

	// Format and indent `{{#foo}}` and `{{/foo}}`.
	"html.format.indentHandlebars": false,

	// Indent `<head>` and `<body>` sections.
	"html.format.indentInnerHtml": false,

	// Maximum number of line breaks to be preserved in one chunk. Use `null` for unlimited.
	"html.format.maxPreserveNewLines": null,

	// Controls whether existing line breaks before elements should be preserved. Only works before elements, not inside tags or for text.
	"html.format.preserveNewLines": true,

	// Honor django, erb, handlebars and php templating language tags.
	"html.format.templating": false,

	// List of tags, comma separated, that shouldn't be reformatted. `null` defaults to all tags listed at https://www.w3.org/TR/html5/dom.html#phrasing-content.
	"html.format.unformatted": "wbr",

	// Keep text content together between this string.
	"html.format.unformattedContentDelimiter": "",

	// Wrap attributes.
	//  - auto: Wrap attributes only when line length is exceeded.
	//  - force: Wrap each attribute except first.
	//  - force-aligned: Wrap each attribute except first and keep aligned.
	//  - force-expand-multiline: Wrap each attribute.
	//  - aligned-multiple: Wrap when line length is exceeded, align attributes vertically.
	//  - preserve: Preserve wrapping of attributes.
	//  - preserve-aligned: Preserve wrapping of attributes but align.
	"html.format.wrapAttributes": "auto",

	// Indent wrapped attributes to after N characters. Use `null` to use the default indent size. Ignored if `html.format.wrapAttributes` is set to 'aligned'.
	"html.format.wrapAttributesIndentSize": null,

	// Maximum amount of characters per line (0 = disable).
	"html.format.wrapLineLength": 120,

	// Show tag and attribute documentation in hover.
	"html.hover.documentation": true,

	// Show references to MDN in hover.
	"html.hover.references": true,

	// Deprecated in favor of `editor.linkedEditing`
	// Enable/disable mirroring cursor on matching HTML tag.
	"html.mirrorCursorOnMatchingTag": false,

	// Controls whether the built-in HTML language support suggests HTML5 tags, properties and values.
	"html.suggest.html5": true,

	// Traces the communication between VS Code and the HTML language server.
	"html.trace.server": "off",

	// Controls whether the built-in HTML language support validates embedded scripts.
	"html.validate.scripts": true,

	// Controls whether the built-in HTML language support validates embedded styles.
	"html.validate.styles": true,

	// The setting `json.colorDecorators.enable` has been deprecated in favor of `editor.colorDecorators`.
	// Enables or disables color decorators
	"json.colorDecorators.enable": true,

	// Enable/disable default JSON formatter
	"json.format.enable": true,

	// The maximum number of outline symbols and folding regions computed (limited for performance reasons).
	"json.maxItemsComputed": 5000,

	// When enabled, JSON schemas can be fetched from http and https locations.
	"json.schemaDownload.enable": true,

	// Associate schemas to JSON files in the current project.
	"json.schemas": [],

	// Traces the communication between VS Code and the JSON language server.
	"json.trace.server": "off",

	// Controls where links in Markdown files should be opened.
	//  - currentGroup: Open links in the active editor group.
	//  - beside: Open links beside the active editor.
	"markdown.links.openLocation": "currentGroup",

	// Sets how line-breaks are rendered in the Markdown preview. Setting it to 'true' creates a <br> for newlines inside paragraphs.
	"markdown.preview.breaks": false,

	// Double click in the Markdown preview to switch to the editor.
	"markdown.preview.doubleClickToSwitchToEditor": true,

	// Controls the font family used in the Markdown preview.
	"markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', system-ui, 'Ubuntu', 'Droid Sans', sans-serif",

	// Controls the font size in pixels used in the Markdown preview.
	"markdown.preview.fontSize": 14,

	// Controls the line height used in the Markdown preview. This number is relative to the font size.
	"markdown.preview.lineHeight": 1.6,

	// Enable or disable conversion of URL-like text to links in the Markdown preview.
	"markdown.preview.linkify": true,

	// Mark the current editor selection in the Markdown preview.
	"markdown.preview.markEditorSelection": true,

	// Controls how links to other Markdown files in the Markdown preview should be opened.
	//  - inPreview: Try to open links in the Markdown preview.
	//  - inEditor: Try to open links in the editor.
	"markdown.preview.openMarkdownLinks": "inPreview",

	// When a Markdown preview is scrolled, update the view of the editor.
	"markdown.preview.scrollEditorWithPreview": true,

	// When a Markdown editor is scrolled, update the view of the preview.
	"markdown.preview.scrollPreviewWithEditor": true,

	// Enable or disable some language-neutral replacement and quotes beautification in the Markdown preview.
	"markdown.preview.typographer": false,

	// A list of URLs or local paths to CSS style sheets to use from the Markdown preview. Relative paths are interpreted relative to the folder open in the Explorer. If there is no open folder, they are interpreted relative to the location of the Markdown file. All '\' need to be written as '\\'.
	"markdown.styles": [],

	// Enable debug logging for the Markdown extension.
	"markdown.trace": "off",

	// Controls whether the built-in PHP language suggestions are enabled. The support suggests PHP globals and variables.
	"php.suggest.basic": true,

	// Enable/disable built-in PHP validation.
	"php.validate.enable": true,

	// Points to the PHP executable.
	"php.validate.executablePath": null,

	// Whether the linter is run on save or on type.
	"php.validate.run": "onSave",

	// Enable/disable automatic closing of JSX tags.
	"javascript.autoClosingTags": true,

	// Enable/disable default JavaScript formatter.
	"javascript.format.enable": true,

	// Defines space handling after a comma delimiter.
	"javascript.format.insertSpaceAfterCommaDelimiter": true,

	// Defines space handling after the constructor keyword.
	"javascript.format.insertSpaceAfterConstructor": false,

	// Defines space handling after function keyword for anonymous functions.
	"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// Defines space handling after keywords in a control flow statement.
	"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// Defines space handling after opening and before closing empty braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// Defines space handling after opening and before closing JSX expression braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// Defines space handling after opening and before closing non-empty braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// Defines space handling after opening and before closing non-empty brackets.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// Defines space handling after opening and before closing non-empty parenthesis.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// Defines space handling after opening and before closing template string braces.
	"javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// Defines space handling after a semicolon in a for statement.
	"javascript.format.insertSpaceAfterSemicolonInForStatements": true,

	// Defines space handling after a binary operator.
	"javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// Defines space handling before function argument parentheses.
	"javascript.format.insertSpaceBeforeFunctionParenthesis": false,

	// Defines whether an open brace is put onto a new line for control blocks or not.
	"javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// Defines whether an open brace is put onto a new line for functions or not.
	"javascript.format.placeOpenBraceOnNewLineForFunctions": false,

	// Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.
	//  - ignore: Don't insert or remove any semicolons.
	//  - insert: Insert semicolons at statement ends.
	//  - remove: Remove unnecessary semicolons.
	"javascript.format.semicolons": "ignore",

	// This setting has been deprecated in favor of `js/ts.implicitProjectConfig.checkJs`.
	// Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"javascript.implicitProjectConfig.checkJs": false,

	// This setting has been deprecated in favor of `js/ts.implicitProjectConfig.experimentalDecorators`.
	// Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"javascript.implicitProjectConfig.experimentalDecorators": false,

	// Enable/disable inlay hints for member values in enum declarations:
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.enumMemberValues.enabled": false,

	// Enable/disable inlay hints for implicit return types on function signatures:
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.functionLikeReturnTypes.enabled": false,

	// Enable/disable inlay hints for parameter names:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	//  - none: Disable parameter name hints.
	//  - literals: Enable parameter name hints only for literal arguments.
	//  - all: Enable parameter name hints for literal and non-literal arguments.
	"javascript.inlayHints.parameterNames.enabled": "none",

	// Suppress parameter name hints on arguments whose text is identical to the parameter name.
	"javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// Enable/disable inlay hints for implicit parameter types:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.parameterTypes.enabled": false,

	// Enable/disable inlay hints for implicit types on property declarations:
	// ```typescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.propertyDeclarationTypes.enabled": false,

	// Enable/disable inlay hints for implicit variable types:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"javascript.inlayHints.variableTypes.enabled": false,

	// Preferred path style for auto imports.
	//  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
	//  - relative: Prefers a relative path to the imported file location.
	//  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
	//  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory. Requires using TypeScript 4.2+ in the workspace.
	"javascript.preferences.importModuleSpecifier": "shortest",

	// Preferred path ending for auto imports. Requires using TypeScript 4.5+ in the workspace.
	//  - auto: Use project settings to select a default.
	//  - minimal: Shorten `./component/index.js` to `./component`.
	//  - index: Shorten `./component/index.js` to `./component/index`.
	//  - js: Do not shorten path endings; include the `.js` extension.
	"javascript.preferences.importModuleSpecifierEnding": "auto",

	// Preferred style for JSX attribute completions.
	//  - auto: Insert `={}` or `=""` after attribute names based on the prop type.
	//  - braces: Insert `={}` after attribute names.
	//  - none: Only insert attribute names.
	"javascript.preferences.jsxAttributeCompletionStyle": "auto",

	// Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports.
	"javascript.preferences.quoteStyle": "auto",

	// The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"javascript.preferences.renameShorthandProperties": true,

	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"javascript.preferences.useAliasesForRenames": true,

	// Enable/disable references CodeLens in JavaScript files.
	"javascript.referencesCodeLens.enabled": false,

	// Enable/disable references CodeLens on all functions in JavaScript files.
	"javascript.referencesCodeLens.showOnAllFunctions": false,

	// Enable/disable auto import suggestions.
	"javascript.suggest.autoImports": true,

	// Complete functions with their parameter signature.
	"javascript.suggest.completeFunctionCalls": false,

	// Enable/disable suggestion to complete JSDoc comments.
	"javascript.suggest.completeJSDocs": true,

	// Enabled/disable autocomplete suggestions.
	"javascript.suggest.enabled": true,

	// Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.
	"javascript.suggest.includeAutomaticOptionalChainCompletions": true,

	// Enable/disable auto-import-style completions on partially-typed import statements. Requires using TypeScript 4.3+ in the workspace.
	"javascript.suggest.includeCompletionsForImportStatements": true,

	// Enable/disable snippet completions for class members. Requires using TypeScript 4.5+ in the workspace
	"javascript.suggest.includeCompletionsWithClassMemberSnippets": true,

	// Enable/disable generating `@return` annotations for JSDoc templates. Requires using TypeScript 4.2+ in the workspace.
	"javascript.suggest.jsdoc.generateReturns": true,

	// Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.
	"javascript.suggest.names": true,

	// Enable/disable suggestions for paths in import statements and require calls.
	"javascript.suggest.paths": true,

	// Enable/disable suggestion diagnostics for JavaScript files in the editor.
	"javascript.suggestionActions.enabled": true,

	// Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
	//  - prompt: Prompt on each rename.
	//  - always: Always update paths automatically.
	//  - never: Never rename paths and don't prompt.
	"javascript.updateImportsOnFileMove.enabled": "prompt",

	// Enable/disable JavaScript validation.
	"javascript.validate.enable": true,

	// Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.checkJs": false,

	// Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.experimentalDecorators": false,

	// Enable/disable [strict function types](https://www.typescriptlang.org/tsconfig#strictFunctionTypes) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.strictFunctionTypes": true,

	// Enable/disable [strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
	"js/ts.implicitProjectConfig.strictNullChecks": false,

	// Enable/disable automatic closing of JSX tags.
	"typescript.autoClosingTags": true,

	// Check if npm is installed for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
	"typescript.check.npmIsInstalled": true,

	// Disables [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition). Automatic type acquisition fetches `@types` packages from npm to improve IntelliSense for external libraries.
	"typescript.disableAutomaticTypeAcquisition": false,

	// Enables prompting of users to use the TypeScript version configured in the workspace for Intellisense.
	"typescript.enablePromptUseWorkspaceTsdk": false,

	// Enable/disable default TypeScript formatter.
	"typescript.format.enable": true,

	// Defines space handling after a comma delimiter.
	"typescript.format.insertSpaceAfterCommaDelimiter": true,

	// Defines space handling after the constructor keyword.
	"typescript.format.insertSpaceAfterConstructor": false,

	// Defines space handling after function keyword for anonymous functions.
	"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

	// Defines space handling after keywords in a control flow statement.
	"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

	// Defines space handling after opening and before closing empty braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,

	// Defines space handling after opening and before closing JSX expression braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

	// Defines space handling after opening and before closing non-empty braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

	// Defines space handling after opening and before closing non-empty brackets.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

	// Defines space handling after opening and before closing non-empty parenthesis.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

	// Defines space handling after opening and before closing template string braces.
	"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

	// Defines space handling after a semicolon in a for statement.
	"typescript.format.insertSpaceAfterSemicolonInForStatements": true,

	// Defines space handling after type assertions in TypeScript.
	"typescript.format.insertSpaceAfterTypeAssertion": false,

	// Defines space handling after a binary operator.
	"typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

	// Defines space handling before function argument parentheses.
	"typescript.format.insertSpaceBeforeFunctionParenthesis": false,

	// Defines whether an open brace is put onto a new line for control blocks or not.
	"typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

	// Defines whether an open brace is put onto a new line for functions or not.
	"typescript.format.placeOpenBraceOnNewLineForFunctions": false,

	// Defines handling of optional semicolons. Requires using TypeScript 3.7 or newer in the workspace.
	//  - ignore: Don't insert or remove any semicolons.
	//  - insert: Insert semicolons at statement ends.
	//  - remove: Remove unnecessary semicolons.
	"typescript.format.semicolons": "ignore",

	// Enable/disable implementations CodeLens. This CodeLens shows the implementers of an interface.
	"typescript.implementationsCodeLens.enabled": false,

	// Enable/disable inlay hints for member values in enum declarations:
	// ```typescript
	// 
	// enum MyValue {
	// 	A /* = 0 */;
	// 	B /* = 1 */;
	// }
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.enumMemberValues.enabled": false,

	// Enable/disable inlay hints for implicit return types on function signatures:
	// ```typescript
	// 
	// function foo() /* :number */ {
	// 	return Date.now();
	// } 
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.functionLikeReturnTypes.enabled": false,

	// Enable/disable inlay hints for parameter names:
	// ```typescript
	// 
	// parseInt(/* str: */ '123', /* radix: */ 8)
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	//  - none: Disable parameter name hints.
	//  - literals: Enable parameter name hints only for literal arguments.
	//  - all: Enable parameter name hints for literal and non-literal arguments.
	"typescript.inlayHints.parameterNames.enabled": "none",

	// Suppress parameter name hints on arguments whose text is identical to the parameter name.
	"typescript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,

	// Enable/disable inlay hints for implicit parameter types:
	// ```typescript
	// 
	// el.addEventListener('click', e /* :MouseEvent */ => ...)
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.parameterTypes.enabled": false,

	// Enable/disable inlay hints for implicit types on property declarations:
	// ```typescript
	// 
	// class Foo {
	// 	prop /* :number */ = Date.now();
	// }
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.propertyDeclarationTypes.enabled": false,

	// Enable/disable inlay hints for implicit variable types:
	// ```typescript
	// 
	// const foo /* :number */ = Date.now();
	//  
	// ```
	// Requires using TypeScript 4.4+ in the workspace.
	"typescript.inlayHints.variableTypes.enabled": false,

	// Sets the locale used to report JavaScript and TypeScript errors. Defaults to use VS Code's locale.
	"typescript.locale": "",

	// Specifies the path to the npm executable used for [Automatic Type Acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition).
	"typescript.npm": "",

	// Preferred path style for auto imports.
	//  - shortest: Prefers a non-relative import only if one is available that has fewer path segments than a relative import.
	//  - relative: Prefers a relative path to the imported file location.
	//  - non-relative: Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.
	//  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory. Requires using TypeScript 4.2+ in the workspace.
	"typescript.preferences.importModuleSpecifier": "shortest",

	// Preferred path ending for auto imports. Requires using TypeScript 4.5+ in the workspace.
	//  - auto: Use project settings to select a default.
	//  - minimal: Shorten `./component/index.js` to `./component`.
	//  - index: Shorten `./component/index.js` to `./component/index`.
	//  - js: Do not shorten path endings; include the `.js` extension.
	"typescript.preferences.importModuleSpecifierEnding": "auto",

	// Enable/disable searching `package.json` dependencies for available auto imports.
	//  - auto: Search dependencies based on estimated performance impact.
	//  - on: Always search dependencies.
	//  - off: Never search dependencies.
	"typescript.preferences.includePackageJsonAutoImports": "auto",

	// Preferred style for JSX attribute completions.
	//  - auto: Insert `={}` or `=""` after attribute names based on the prop type.
	//  - braces: Insert `={}` after attribute names.
	//  - none: Only insert attribute names.
	"typescript.preferences.jsxAttributeCompletionStyle": "auto",

	// Preferred quote style to use for quick fixes: `single` quotes, `double` quotes, or `auto` infer quote type from existing imports.
	"typescript.preferences.quoteStyle": "auto",

	// The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'
	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"typescript.preferences.renameShorthandProperties": true,

	// Enable/disable introducing aliases for object shorthand properties during renames. Requires using TypeScript 3.4 or newer in the workspace.
	"typescript.preferences.useAliasesForRenames": true,

	// Enable/disable references CodeLens in TypeScript files.
	"typescript.referencesCodeLens.enabled": false,

	// Enable/disable references CodeLens on all functions in TypeScript files.
	"typescript.referencesCodeLens.showOnAllFunctions": false,

	// Report style checks as warnings.
	"typescript.reportStyleChecksAsWarnings": true,

	// Enable/disable auto import suggestions.
	"typescript.suggest.autoImports": true,

	// Complete functions with their parameter signature.
	"typescript.suggest.completeFunctionCalls": false,

	// Enable/disable suggestion to complete JSDoc comments.
	"typescript.suggest.completeJSDocs": true,

	// Enabled/disable autocomplete suggestions.
	"typescript.suggest.enabled": true,

	// Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled.
	"typescript.suggest.includeAutomaticOptionalChainCompletions": true,

	// Enable/disable auto-import-style completions on partially-typed import statements. Requires using TypeScript 4.3+ in the workspace.
	"typescript.suggest.includeCompletionsForImportStatements": true,

	// Enable/disable snippet completions for class members. Requires using TypeScript 4.5+ in the workspace
	"typescript.suggest.includeCompletionsWithClassMemberSnippets": true,

	// Enable/disable snippet completions from TS Server. Requires using TypeScript 4.3+ in the workspace.
	"typescript.suggest.includeCompletionsWithSnippetText": true,

	// Enable/disable generating `@return` annotations for JSDoc templates. Requires using TypeScript 4.2+ in the workspace.
	"typescript.suggest.jsdoc.generateReturns": true,

	// Enable/disable suggestions for paths in import statements and require calls.
	"typescript.suggest.paths": true,

	// Enable/disable suggestion diagnostics for TypeScript files in the editor.
	"typescript.suggestionActions.enabled": true,

	// Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.
	"typescript.surveys.enabled": true,

	// Controls auto detection of tsc tasks.
	//  - on: Create both build and watch tasks.
	//  - off: Disable this feature.
	//  - build: Only create single run compile tasks.
	//  - watch: Only create compile and watch tasks.
	"typescript.tsc.autoDetect": "on",

	// Specifies the folder path to the tsserver and `lib*.d.ts` files under a TypeScript install to use for IntelliSense, for example: `./node_modules/typescript/lib`.
	// 
	// - When specified as a user setting, the TypeScript version from `typescript.tsdk` automatically replaces the built-in TypeScript version.
	// - When specified as a workspace setting, `typescript.tsdk` allows you to switch to use that workspace version of TypeScript for IntelliSense with the `TypeScript: Select TypeScript version` command.
	// 
	// See the [TypeScript documentation](https://code.visualstudio.com/docs/typescript/typescript-compiling#_using-newer-typescript-versions) for more detail about managing TypeScript versions.
	"typescript.tsdk": "",

	// Enables tracing TS server performance to a directory. These trace files can be used to diagnose TS Server performance issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.enableTracing": false,

	// (Experimental) Enables project wide error reporting.
	"typescript.tsserver.experimental.enableProjectDiagnostics": false,

	// Enables logging of the TS server to a file. This log can be used to diagnose TS Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.log": "off",

	// The maximum amount of memory (in MB) to allocate to the TypeScript server process.
	"typescript.tsserver.maxTsServerMemory": 3072,

	// Additional paths to discover TypeScript Language Service plugins.
	"typescript.tsserver.pluginPaths": [],

	// Enables tracing of messages sent to the TS server. This trace can be used to diagnose TS Server issues. The trace may contain file paths, source code, and other potentially sensitive information from your project.
	"typescript.tsserver.trace": "off",

	// This setting has been deprecated in favor of `typescript.tsserver.useSyntaxServer`.
	// Enable/disable spawning a separate TypeScript server that can more quickly respond to syntax related operations, such as calculating folding or computing document symbols. Requires using TypeScript 3.4.0 or newer in the workspace.
	"typescript.tsserver.useSeparateSyntaxServer": true,

	// Controls if TypeScript launches a dedicated server to more quickly handle syntax related operations, such as computing code folding.
	//  - always: Use a lighter weight syntax server to handle all IntelliSense operations. This syntax server can only provide IntelliSense for opened files.
	//  - never: Don't use a dedicated syntax server. Use a single server to handle all IntelliSense operations.
	//  - auto: Spawn both a full server and a lighter weight server dedicated to syntax operations. The syntax server is used to speed up syntax operations and provide IntelliSense while projects are loading.
	"typescript.tsserver.useSyntaxServer": "auto",

	// Configure which watching strategies should be used to keep track of files and directories. Requires using TypeScript 3.8+ in the workspace.
	"typescript.tsserver.watchOptions": {},

	// Enable/disable automatic updating of import paths when you rename or move a file in VS Code.
	//  - prompt: Prompt on each rename.
	//  - always: Always update paths automatically.
	//  - never: Never rename paths and don't prompt.
	"typescript.updateImportsOnFileMove.enabled": "prompt",

	// Enable/disable TypeScript validation.
	"typescript.validate.enable": true,

	// Controls which files are searched by [go to symbol in workspace](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name).
	//  - allOpenProjects: Search all open JavaScript or TypeScript projects for symbols. Requires using TypeScript 3.9 or newer in the workspace.
	//  - currentProject: Only search for symbols in the current JavaScript or TypeScript project.
	"typescript.workspaceSymbols.scope": "allOpenProjects",

	// Deprecated. Use `gitlens.views.formats.commits.description` instead
	// 
	"gitlens.views.commitDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.commitFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.commitFileFormat": null,

	// Deprecated. Use `gitlens.views.commits.files.label` instead
	// 
	"gitlens.views.commitFormat": null,

	// Specifies the default number of items to show in a view list. Use 0 to specify no limit
	"gitlens.views.defaultItemLimit": 10,

	// Specifies the description format of commits in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.commits.description": "${author, }${agoOrDate}",

	// Specifies the format of commits in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.commits.label": "${❰ tips ❱➤  }${message}",

	// Specifies the description format of a file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.formats.files.description": "${directory}${  ←  originalPath}",

	// Specifies the format of a file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs
	"gitlens.views.formats.files.label": "${working  }${file}",

	// Specifies the description format of stashes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.stashes.description": "${agoOrDate}",

	// Specifies the format of stashes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs
	"gitlens.views.formats.stashes.label": "${message}",

	// Specifies the number of items to show in a each page when paginating a view list. Use 0 to specify no limit
	"gitlens.views.pageItemLimit": 40,

	// Specifies whether to show relative date markers (_Less than a week ago_, _Over a week ago_, _Over a month ago_, etc) on revision (commit) histories in the views
	"gitlens.views.showRelativeDateMarkers": true,

	// Deprecated. Use `gitlens.views.formats.stashes.description` instead
	// 
	"gitlens.views.stashDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.stashFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.stashFileFormat": null,

	// Deprecated. Use `gitlens.views.stashes.files.label` instead
	// 
	"gitlens.views.stashFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.description` instead
	// 
	"gitlens.views.statusFileDescriptionFormat": null,

	// Deprecated. Use `gitlens.views.formats.files.label` instead
	// 
	"gitlens.views.statusFileFormat": null,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Commits_ view
	"gitlens.views.commits.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `tree` or `auto`
	"gitlens.views.commits.files.compact": true,

	// Specifies how the _Commits_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.commits.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.commits.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Commits_ view. Only applies when `gitlens.views.commits.files.layout` is set to `auto`
	"gitlens.views.commits.files.threshold": 5,

	// Specifies whether to query for pull requests associated with the current branch and commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with the current branch in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Commits_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.commits.pullRequests.showForCommits": true,

	// Specifies whether to reveal commits in the _Commits_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.commits.reveal": true,

	// Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag. etc) in the _Commits_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the current branch with a user-selected reference
	//  - working: Compares the working tree with a user-selected reference
	"gitlens.views.commits.showBranchComparison": "working",

	// Configures when the error peek view is automatically opened.
	//  - failureAnywhere: Open automatically no matter where the failure is.
	//  - failureInVisibleDocument: Open automatically when a test fails in a visible document.
	//  - never: Never automatically open.
	"testing.automaticallyOpenPeekView": "failureInVisibleDocument",

	// Controls whether to automatically open the peek view during auto-run mode.
	"testing.automaticallyOpenPeekViewDuringAutoRun": false,

	// How long to wait, in milliseconds, after a test is marked as outdated and starting a new run.
	"testing.autoRun.delay": 1000,

	// Controls which tests are automatically run.
	//  - all: Automatically runs all discovered test when auto-run is toggled. Reruns individual tests when they are changed.
	//  - rerun: Reruns individual tests when they are changed. Will not automatically run any tests that have not been already executed.
	"testing.autoRun.mode": "all",

	// Controls the action to take when left-clicking on a test decoration in the gutter.
	//  - run: Run the test.
	//  - debug: Debug the test.
	//  - contextMenu: Open the context menu for more options.
	"testing.defaultGutterClickAction": "run",

	// Controls whether the running test should be followed in the test explorer view
	"testing.followRunningTest": true,

	// Controls whether test decorations are shown in the editor gutter.
	"testing.gutterEnabled": true,

	// Insert semicolon at end of line when completing CSS properties.
	"css.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"css.completion.triggerPropertyValueCompletion": true,

	// A list of relative file paths pointing to JSON files following the [custom data format](https://github.com/microsoft/vscode-css-languageservice/blob/master/docs/customData.md).
	// 
	// VS Code loads custom data on startup to enhance its CSS support for the custom CSS properties, at directives, pseudo classes and pseudo elements you specify in the JSON files.
	// 
	// The file paths are relative to workspace and only workspace folder settings are considered.
	"css.customData": [],

	// Show tag and attribute documentation in CSS hovers.
	"css.hover.documentation": true,

	// Show references to MDN in CSS hovers.
	"css.hover.references": true,

	// Invalid number of parameters.
	"css.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"css.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"css.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"css.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"css.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"css.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"css.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"css.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"css.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"css.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"css.lint.important": "ignore",

	// Import statements do not load in parallel.
	"css.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"css.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"css.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"css.lint.unknownAtRules": "warning",

	// Unknown property.
	"css.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"css.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"css.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"css.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"css.lint.zeroUnits": "ignore",

	// Traces the communication between VS Code and the CSS language server.
	"css.trace.server": "off",

	// Enables or disables all validations.
	"css.validate": true,

	// Specifies whether to automatically refresh the _Repositories_ view when the repository or the file system changes
	"gitlens.views.repositories.autoRefresh": true,

	// Specifies whether to automatically reveal repositories in the _Repositories_ view when opening files
	"gitlens.views.repositories.autoReveal": true,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Repositories_ view
	"gitlens.views.repositories.avatars": true,

	// Specifies how the _Repositories_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.repositories.branches.layout": "tree",

	// Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag. etc) under each branch in the _Repositories_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the branch with a user-selected reference
	"gitlens.views.repositories.branches.showBranchComparison": "branch",

	// Specifies whether to show the _Repositories_ view in a compact display density
	"gitlens.views.repositories.compact": false,

	// Deprecated. This setting is no longer used
	// 
	"gitlens.views.repositories.enabled": null,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `tree` or `auto`
	"gitlens.views.repositories.files.compact": true,

	// Specifies how the _Repositories_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.repositories.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.repositories.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `auto`
	"gitlens.views.repositories.files.threshold": 5,

	// Specifies whether to include working tree file status for each repository in the _Repositories_ view
	"gitlens.views.repositories.includeWorkingTree": false,

	// Specifies whether to query for pull requests associated with branches and commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with branches in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Repositories_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.repositories.pullRequests.showForCommits": true,

	// Specifies whether to show a comparison of the current branch or the working tree with a user-selected reference (branch, tag. etc) in the _Repositories_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the current branch with a user-selected reference
	//  - working: Compares the working tree with a user-selected reference
	"gitlens.views.repositories.showBranchComparison": "working",

	// Specifies whether to show the branches for each repository in the _Repositories_ view
	"gitlens.views.repositories.showBranches": true,

	// Specifies whether to show the commits on the current branch for each repository in the _Repositories_ view
	"gitlens.views.repositories.showCommits": true,

	// Specifies whether to show the contributors for each repository in the _Repositories_ view
	"gitlens.views.repositories.showContributors": true,

	// Specifies whether to show the experimental incoming activity for each repository in the _Repositories_ view
	"gitlens.views.repositories.showIncomingActivity": false,

	// Specifies whether to show the remotes for each repository in the _Repositories_ view
	"gitlens.views.repositories.showRemotes": true,

	// Specifies whether to show the stashes for each repository in the _Repositories_ view
	"gitlens.views.repositories.showStashes": true,

	// Specifies whether to show the tags for each repository in the _Repositories_ view
	"gitlens.views.repositories.showTags": true,

	// Specifies whether to show the upstream status of the current branch for each repository in the _Repositories_ view
	"gitlens.views.repositories.showUpstreamStatus": true,

	// Specifies whether file histories will follow renames — will affect how merge commits are shown in histories
	"gitlens.advanced.fileHistoryFollowsRenames": false,

	// Specifies whether file histories will show commits from all branches
	"gitlens.advanced.fileHistoryShowAllBranches": false,

	// Specifies whether to show avatar images instead of status icons in the _File History_ view
	"gitlens.views.fileHistory.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _File History_ view. Only applies to folder history and when `gitlens.views.fileHistory.files.layout` is set to `tree` or `auto`
	"gitlens.views.fileHistory.files.compact": true,

	// Specifies how the _File History_ view will display files when showing the history of a folder
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.fileHistory.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.fileHistory.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _File History_ view. Only applies to folder history and when `gitlens.views.fileHistory.files.layout` is set to `auto`
	"gitlens.views.fileHistory.files.threshold": 5,

	// Insert semicolon at end of line when completing CSS properties.
	"less.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"less.completion.triggerPropertyValueCompletion": true,

	// Show tag and attribute documentation in LESS hovers.
	"less.hover.documentation": true,

	// Show references to MDN in LESS hovers.
	"less.hover.references": true,

	// Invalid number of parameters.
	"less.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"less.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"less.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"less.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"less.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"less.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"less.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"less.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"less.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"less.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"less.lint.important": "ignore",

	// Import statements do not load in parallel.
	"less.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"less.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"less.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"less.lint.unknownAtRules": "warning",

	// Unknown property.
	"less.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"less.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"less.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"less.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"less.lint.zeroUnits": "ignore",

	// Enables or disables all validations.
	"less.validate": true,

	// Specifies whether to show avatar images instead of status icons in the _Line History_ view
	"gitlens.views.lineHistory.avatars": true,

	// Deprecated. This setting is no longer used
	// 
	"gitlens.views.lineHistory.enabled": null,

	// Insert semicolon at end of line when completing CSS properties.
	"scss.completion.completePropertyWithSemicolon": true,

	// By default, VS Code triggers property value completion after selecting a CSS property. Use this setting to disable this behavior.
	"scss.completion.triggerPropertyValueCompletion": true,

	// Show tag and attribute documentation in SCSS hovers.
	"scss.hover.documentation": true,

	// Show references to MDN in SCSS hovers.
	"scss.hover.references": true,

	// Invalid number of parameters.
	"scss.lint.argumentsInColorFunction": "error",

	// Do not use `width` or `height` when using `padding` or `border`.
	"scss.lint.boxModel": "ignore",

	// When using a vendor-specific prefix make sure to also include all other vendor-specific properties.
	"scss.lint.compatibleVendorPrefixes": "ignore",

	// Do not use duplicate style definitions.
	"scss.lint.duplicateProperties": "ignore",

	// Do not use empty rulesets.
	"scss.lint.emptyRules": "warning",

	// Avoid using `float`. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes.
	"scss.lint.float": "ignore",

	// `@font-face` rule must define `src` and `font-family` properties.
	"scss.lint.fontFaceProperties": "warning",

	// Hex colors must consist of three or six hex numbers.
	"scss.lint.hexColorLength": "error",

	// Selectors should not contain IDs because these rules are too tightly coupled with the HTML.
	"scss.lint.idSelector": "ignore",

	// IE hacks are only necessary when supporting IE7 and older.
	"scss.lint.ieHack": "ignore",

	// Avoid using `!important`. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored.
	"scss.lint.important": "ignore",

	// Import statements do not load in parallel.
	"scss.lint.importStatement": "ignore",

	// Property is ignored due to the display. E.g. with `display: inline`, the `width`, `height`, `margin-top`, `margin-bottom`, and `float` properties have no effect.
	"scss.lint.propertyIgnoredDueToDisplay": "warning",

	// The universal selector (`*`) is known to be slow.
	"scss.lint.universalSelector": "ignore",

	// Unknown at-rule.
	"scss.lint.unknownAtRules": "warning",

	// Unknown property.
	"scss.lint.unknownProperties": "warning",

	// Unknown vendor specific property.
	"scss.lint.unknownVendorSpecificProperties": "ignore",

	// A list of properties that are not validated against the `unknownProperties` rule.
	"scss.lint.validProperties": [],

	// When using a vendor-specific prefix, also include the standard property.
	"scss.lint.vendorPrefix": "warning",

	// No unit for zero needed.
	"scss.lint.zeroUnits": "ignore",

	// Enables or disables all validations.
	"scss.validate": true,

	// Specifies how branches are sorted in quick pick menus and views
	//  - date:desc: Sorts branches by the most recent commit date in descending order
	//  - date:asc: Sorts branches by the most recent commit date in ascending order
	//  - name:asc: Sorts branches by name in ascending order
	//  - name:desc: Sorts branches by name in descending order
	"gitlens.sortBranchesBy": "date:desc",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Branches_ view
	"gitlens.views.branches.avatars": true,

	// Specifies how the _Branches_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.branches.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `tree` or `auto`
	"gitlens.views.branches.files.compact": true,

	// Specifies how the _Branches_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.branches.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.branches.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Branches_ view. Only applies when `gitlens.views.branches.files.layout` is set to `auto`
	"gitlens.views.branches.files.threshold": 5,

	// Specifies whether to query for pull requests associated with branches and commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with branches in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Branches_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.branches.pullRequests.showForCommits": true,

	// Specifies whether to reveal branches in the _Branches_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.branches.reveal": true,

	// Specifies whether to show a comparison of the branch with a user-selected reference (branch, tag. etc) in the _Branches_ view
	//  - false: Hides the branch comparison
	//  - branch: Compares the branch with a user-selected reference
	"gitlens.views.branches.showBranchComparison": "branch",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Remotes_ view
	"gitlens.views.remotes.avatars": true,

	// Specifies how the _Remotes_ view will display branches
	//  - list: Displays branches as a list
	//  - tree: Displays branches as a tree when branch names contain slashes `/`
	"gitlens.views.remotes.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `tree` or `auto`
	"gitlens.views.remotes.files.compact": true,

	// Specifies how the _Remotes_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.remotes.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.remotes.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Remotes_ view. Only applies when `gitlens.views.remotes.files.layout` is set to `auto`
	"gitlens.views.remotes.files.threshold": 5,

	// Specifies whether to query for pull requests associated with branches and commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with branches in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.showForBranches": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Remotes_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.remotes.pullRequests.showForCommits": true,

	// Specifies whether to reveal remotes in the _Remotes_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.remotes.reveal": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `tree` or `auto`
	"gitlens.views.stashes.files.compact": true,

	// Specifies how the _Stashes_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.stashes.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.stashes.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Stashes_ view. Only applies when `gitlens.views.stashes.files.layout` is set to `auto`
	"gitlens.views.stashes.files.threshold": 5,

	// Specifies whether to reveal stashes in the _Stashes_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.stashes.reveal": true,

	// Specifies how tags are sorted in quick pick menus and views
	//  - date:desc: Sorts tags by date in descending order
	//  - date:asc: Sorts tags by date in ascending order
	//  - name:asc: Sorts tags by name in ascending order
	//  - name:desc: Sorts tags by name in descending order
	"gitlens.sortTagsBy": "date:desc",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Tags_ view
	"gitlens.views.tags.avatars": true,

	// Specifies how the _Tags_ view will display tags
	//  - list: Displays tags as a list
	//  - tree: Displays tags as a tree when tags names contain slashes `/`
	"gitlens.views.tags.branches.layout": "tree",

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `tree` or `auto`
	"gitlens.views.tags.files.compact": true,

	// Specifies how the _Tags_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.tags.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.tags.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Tags_ view. Only applies when `gitlens.views.tags.files.layout` is set to `auto`
	"gitlens.views.tags.files.threshold": 5,

	// Specifies whether to reveal tags in the _Tags_ view, otherwise they revealed in the _Repositories_ view
	"gitlens.views.tags.reveal": true,

	// Specifies how contributors are sorted in quick pick menus and views
	//  - count:desc: Sorts contributors by commit count in descending order
	//  - count:asc: Sorts contributors by commit count in ascending order
	//  - date:desc: Sorts contributors by the most recent commit date in descending order
	//  - date:asc: Sorts contributors by the most recent commit date in ascending order
	//  - name:asc: Sorts contributors by name in ascending order
	//  - name:desc: Sorts contributors by name in descending order
	"gitlens.sortContributorsBy": "count:desc",

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Contributors_ view
	"gitlens.views.contributors.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `tree` or `auto`
	"gitlens.views.contributors.files.compact": true,

	// Specifies how the _Contributors_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.contributors.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.contributors.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Contributors_ view. Only applies when `gitlens.views.contributors.files.layout` is set to `auto`
	"gitlens.views.contributors.files.threshold": 5,

	// Specifies whether to query for pull requests associated with branches and commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.contributors.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Contributors_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.contributors.pullRequests.showForCommits": true,

	// Specifies whether to show commits from all branches in the _Contributors_ view
	"gitlens.views.contributors.showAllBranches": false,

	// Specifies whether to show contributor statistics in the _Contributors_ view. This can take a while to compute depending on the repository size
	"gitlens.views.contributors.showStatistics": false,

	// Specifies whether to show avatar images instead of commit (or status) icons in the _Search & Compare_ view
	"gitlens.views.searchAndCompare.avatars": true,

	// Specifies whether to compact (flatten) unnecessary file nesting in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `tree` or `auto`
	"gitlens.views.searchAndCompare.files.compact": true,

	// Specifies how the _Search & Compare_ view will display files
	//  - auto: Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.searchAndCompare.files.threshold` value and the number of files at each nesting level
	//  - list: Displays files as a list
	//  - tree: Displays files as a tree
	"gitlens.views.searchAndCompare.files.layout": "auto",

	// Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Search & Compare_ view. Only applies when `gitlens.views.searchAndCompare.files.layout` is set to `auto`
	"gitlens.views.searchAndCompare.files.threshold": 5,

	// Specifies whether to query for pull requests associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.searchAndCompare.pullRequests.enabled": true,

	// Specifies whether to show pull requests (if any) associated with commits in the _Search & Compare_ view. Requires a connection to a supported remote service (e.g. GitHub)
	"gitlens.views.searchAndCompare.pullRequests.showForCommits": true,

	// When enabled, automatically checks extensions for updates. If an extension has an update, it is marked as outdated in the Extensions view. The updates are fetched from a Microsoft online service.
	"extensions.autoCheckUpdates": true,

	// Controls the automatic update behavior of extensions. The updates are fetched from a Microsoft online service.
	//  - true: Download and install updates automatically for all extensions.
	//  - onlyEnabledExtensions: Download and install updates automatically only for enabled extensions. Disabled extensions will not be updated automatically.
	//  - false: Extensions are not automatically updated.
	"extensions.autoUpdate": true,

	// When enabled, editors with extension details will be automatically closed upon navigating away from the Extensions View.
	"extensions.closeExtensionDetailsOnViewChange": false,

	// When an extension is listed here, a confirmation prompt will not be shown when that extension handles a URI.
	"extensions.confirmedUriHandlerExtensionIds": [],

	// When enabled, the notifications for extension recommendations will not be shown.
	"extensions.ignoreRecommendations": false,

	// This setting is deprecated. Use extensions.ignoreRecommendations setting to control recommendation notifications. Use Extensions view's visibility actions to hide Recommended view by default.
	// 
	"extensions.showRecommendationsOnlyOnDemand": false,

	// Override the untrusted workspace support of an extension. Extensions using `true` will always be enabled. Extensions using `limited` will always be enabled, and the extension will hide functionality that requires trust. Extensions using `false` will only be enabled only when the workspace is trusted.
	"extensions.supportUntrustedWorkspaces": {},

	// Override the virtual workspaces support of an extension.
	"extensions.supportVirtualWorkspaces": {
		"pub.name": false
	},

	// Enable web worker extension host.
	//  - true: The Web Worker Extension Host will always be launched.
	//  - false: The Web Worker Extension Host will never be launched.
	//  - auto: The Web Worker Extension Host will be launched when a web extension needs it.
	"extensions.webWorker": "auto",

	// Enable/disable the ability of smart scrolling in the output view. Smart scrolling allows you to lock scrolling automatically when you click in the output view and unlocks when you click in the last line.
	"output.smartScroll.enabled": true,

	// List of extensions to be ignored while synchronizing. The identifier of an extension is always `${publisher}.${name}`. For example: `vscode.csharp`.
	"settingsSync.ignoredExtensions": [],

	// Configure settings to be ignored while synchronizing.
	"settingsSync.ignoredSettings": [],

	// Synchronize keybindings for each platform.
	"settingsSync.keybindingsPerPlatform": true,

	// When enabled notebook breadcrumbs contain code cells.
	"notebook.breadcrumbs.showCodeCells": true,

	// Controls where the focus indicator is rendered, either along the cell borders or on the left gutter
	"notebook.cellFocusIndicator": "gutter",

	// Where the cell toolbar should be shown, or whether it should be hidden.
	"notebook.cellToolbarLocation": {
		"default": "right"
	},

	// Whether the cell toolbar should appear on hover or click.
	"notebook.cellToolbarVisibility": "click",

	// Control whether the notebook editor should be rendered in a compact form. For example, when turned on, it will decrease the left margin width.
	"notebook.compactView": true,

	// Control whether outputs action should be rendered in the output toolbar.
	"notebook.consolidatedOutputButton": true,

	// Control whether extra actions are shown in a dropdown next to the run button.
	"notebook.consolidatedRunButton": false,

	// Whether to use the enhanced text diff editor for notebook.
	"notebook.diff.enablePreview": true,

	// Hide Metadata Differences
	"notebook.diff.ignoreMetadata": false,

	// Hide Outputs Differences
	"notebook.diff.ignoreOutputs": false,

	// Priority list for output mime types
	"notebook.displayOrder": [],

	// Control whether the notebook editor should allow moving cells through drag and drop.
	"notebook.dragAndDropEnabled": true,

	// Settings for code editors used in notebooks. This can be used to customize most editor.* settings.
	"notebook.editorOptionsCustomizations": {},

	// Control whether to render a global toolbar inside the notebook editor.
	"notebook.globalToolbar": true,

	// Control whether the actions on the notebook toolbar should render label or not.
	"notebook.globalToolbarShowLabel": true,

	// Control where the insert cell actions should appear.
	//  - betweenCells: A toolbar that appears on hover between cells.
	//  - notebookToolbar: The toolbar at the top of the notebook editor.
	//  - both: Both toolbars.
	//  - hidden: The insert actions don't appear anywhere.
	"notebook.insertToolbarLocation": "both",

	// Controls the display of line numbers in the cell editor.
	"notebook.lineNumbers": "off",

	// Controls the font size of rendered markup in notebooks. When set to `0`, 120% of `editor.fontSize` is used.
	"notebook.markup.fontSize": 0,

	// When enabled cursor can navigate to the next/previous cell when the current cursor in the cell editor is at the first/last line.
	"notebook.navigation.allowNavigateToSurroundingCells": true,

	// When enabled notebook outline shows code cells.
	"notebook.outline.showCodeCells": false,

	// Control how many lines of text in a text output is rendered.
	"notebook.output.textLineLimit": 30,

	// Whether the cell status bar should be shown.
	//  - hidden: The cell Status bar is always hidden.
	//  - visible: The cell Status bar is always visible.
	//  - visibleAfterExecute: The cell Status bar is hidden until the cell has executed. Then it becomes visible to show the execution status.
	"notebook.showCellStatusBar": "visible",

	// Controls when the Markdown header folding arrow is shown.
	//  - always: The folding controls are always visible.
	//  - mouseover: The folding controls are visible only on mouseover.
	"notebook.showFoldingControls": "mouseover",

	// Whether to use separate undo/redo stack for each cell.
	"notebook.undoRedoPerCell": true,

	// Customizes what kind of terminal to launch.
	//  - integrated: Use VS Code's integrated terminal.
	//  - external: Use the configured external terminal.
	"terminal.explorerKind": "integrated",

	// Customizes which terminal to run on Linux.
	"terminal.external.linuxExec": "xterm",

	// Customizes which terminal application to run on macOS.
	"terminal.external.osxExec": "Terminal.app",

	// Customizes which terminal to run on Windows.
	"terminal.external.windowsExec": "C:\\Windows\\System32\\cmd.exe",

	// Specifies whether to show avatar images in the gutter blame annotations
	"gitlens.blame.avatars": true,

	// Specifies whether to compact (deduplicate) matching adjacent gutter blame annotations
	"gitlens.blame.compact": true,

	// Specifies how to format absolute dates (e.g. using the `${date}` token) in gutter blame annotations. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.blame.dateFormat": null,

	// Specifies the format of the gutter blame annotations. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `gitlens.blame.dateFormat` setting
	"gitlens.blame.format": "${message|50?} ${agoOrDate|14-}",

	// Specifies whether to provide a heatmap indicator in the gutter blame annotations
	"gitlens.blame.heatmap.enabled": true,

	// Specifies where the heatmap indicators will be shown in the gutter blame annotations
	//  - left: Adds a heatmap indicator on the left edge of the gutter blame annotations
	//  - right: Adds a heatmap indicator on the right edge of the gutter blame annotations
	"gitlens.blame.heatmap.location": "right",

	// Specifies whether to highlight lines associated with the current line
	"gitlens.blame.highlight.enabled": true,

	// Specifies where the associated line highlights will be shown
	//  - gutter: Adds a gutter indicator
	//  - line: Adds a full-line highlight background color
	//  - overview: Adds a decoration to the overview ruler (scroll bar)
	"gitlens.blame.highlight.locations": [
		"gutter",
		"line",
		"overview"
	],

	// Specifies whether gutter blame annotations will be separated by a small gap
	"gitlens.blame.separateLines": true,

	// Specifies how the gutter blame annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.blame.toggleMode": "file",

	// Whether or not to allow chord keybindings in the terminal. Note that when this is true and the keystroke results in a chord it will bypass `terminal.integrated.commandsToSkipShell`, setting this to false is particularly useful when you want ctrl+k to go to your shell (not VS Code).
	"terminal.integrated.allowChords": true,

	// Whether to allow menubar mnemonics (eg. alt+f) to trigger the open the menubar. Note that this will cause all alt keystrokes to skip the shell when true. This does nothing on macOS.
	"terminal.integrated.allowMnemonics": false,

	// If enabled, alt/option + click will reposition the prompt cursor to underneath the mouse when `editor.multiCursorModifier` is set to `'alt'` (the default value). This may not work reliably depending on your shell.
	"terminal.integrated.altClickMovesCursor": true,

	// The terminal profile to use on Linux for automation-related terminal usage like tasks and debug. This setting will currently be ignored if #terminal.integrated.automationShell.linux# is set.
	"terminal.integrated.automationProfile.linux": null,

	// The terminal profile to use on macOS for automation-related terminal usage like tasks and debug. This setting will currently be ignored if #terminal.integrated.automationShell.osx# is set.
	"terminal.integrated.automationProfile.osx": null,

	// The terminal profile to use for automation-related terminal usage like tasks and debug. This setting will currently be ignored if #terminal.integrated.automationShell.windows# is set.
	"terminal.integrated.automationProfile.windows": null,

	// This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with `terminal.integrated.automationProfile.linux`. This will currently take priority over the new automation profile settings but that will change in the future.
	// A path that when set will override `terminal.integrated.shell.linux` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
	"terminal.integrated.automationShell.linux": null,

	// This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with `terminal.integrated.automationProfile.osx`. This will currently take priority over the new automation profile settings but that will change in the future.
	// A path that when set will override `terminal.integrated.shell.osx` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
	"terminal.integrated.automationShell.osx": null,

	// This is deprecated, the new recommended way to configure your automation shell is by creating a terminal automation profile with `terminal.integrated.automationProfile.windows`. This will currently take priority over the new automation profile settings but that will change in the future.
	// A path that when set will override `terminal.integrated.shell.windows` and ignore `shellArgs` values for automation-related terminal usage like tasks and debug.
	"terminal.integrated.automationShell.windows": null,

	// The number of milliseconds to show the bell within a terminal tab when triggered.
	"terminal.integrated.bellDuration": 1000,

	// A set of command IDs whose keybindings will not be sent to the shell but instead always be handled by VS Code. This allows keybindings that would normally be consumed by the shell to act instead the same as when the terminal is not focused, for example `Ctrl+P` to launch Quick Open.
	// 
	// &nbsp;
	// 
	// Many commands are skipped by default. To override a default and pass that command's keybinding to the shell instead, add the command prefixed with the `-` character. For example add `-workbench.action.quickOpen` to allow `Ctrl+P` to reach the shell.
	// 
	// &nbsp;
	// 
	// The following list of default skipped commands is truncated when viewed in Settings Editor. To see the full list, [open the default settings JSON](command:workbench.action.openRawDefaultSettings 'Open Default Settings (JSON)') and search for the first command from the list below.
	// 
	// &nbsp;
	// 
	// Default Skipped Commands:
	// 
	// - editor.action.toggleTabFocusMode
	// - notifications.hideList
	// - notifications.hideToasts
	// - workbench.action.debug.continue
	// - workbench.action.debug.pause
	// - workbench.action.debug.restart
	// - workbench.action.debug.run
	// - workbench.action.debug.start
	// - workbench.action.debug.stepInto
	// - workbench.action.debug.stepOut
	// - workbench.action.debug.stepOver
	// - workbench.action.debug.stop
	// - workbench.action.firstEditorInGroup
	// - workbench.action.focusActiveEditorGroup
	// - workbench.action.focusEighthEditorGroup
	// - workbench.action.focusFifthEditorGroup
	// - workbench.action.focusFirstEditorGroup
	// - workbench.action.focusFourthEditorGroup
	// - workbench.action.focusLastEditorGroup
	// - workbench.action.focusNextPart
	// - workbench.action.focusPreviousPart
	// - workbench.action.focusSecondEditorGroup
	// - workbench.action.focusSeventhEditorGroup
	// - workbench.action.focusSixthEditorGroup
	// - workbench.action.focusThirdEditorGroup
	// - workbench.action.lastEditorInGroup
	// - workbench.action.navigateDown
	// - workbench.action.navigateLeft
	// - workbench.action.navigateRight
	// - workbench.action.navigateUp
	// - workbench.action.nextEditor
	// - workbench.action.nextEditorInGroup
	// - workbench.action.nextPanelView
	// - workbench.action.nextSideBarView
	// - workbench.action.openNextRecentlyUsedEditor
	// - workbench.action.openNextRecentlyUsedEditorInGroup
	// - workbench.action.openPreviousRecentlyUsedEditor
	// - workbench.action.openPreviousRecentlyUsedEditorInGroup
	// - workbench.action.previousEditor
	// - workbench.action.previousEditorInGroup
	// - workbench.action.previousPanelView
	// - workbench.action.previousSideBarView
	// - workbench.action.quickOpen
	// - workbench.action.quickOpenLeastRecentlyUsedEditor
	// - workbench.action.quickOpenLeastRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenPreviousEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditor
	// - workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup
	// - workbench.action.quickOpenView
	// - workbench.action.showCommands
	// - workbench.action.tasks.build
	// - workbench.action.tasks.reRunTask
	// - workbench.action.tasks.restartTask
	// - workbench.action.tasks.runTask
	// - workbench.action.tasks.showLog
	// - workbench.action.tasks.showTasks
	// - workbench.action.tasks.terminate
	// - workbench.action.tasks.test
	// - workbench.action.terminal.clear
	// - workbench.action.terminal.clearSelection
	// - workbench.action.terminal.copySelection
	// - workbench.action.terminal.deleteToLineStart
	// - workbench.action.terminal.deleteWordLeft
	// - workbench.action.terminal.deleteWordRight
	// - workbench.action.terminal.findNext
	// - workbench.action.terminal.findPrevious
	// - workbench.action.terminal.focus
	// - workbench.action.terminal.focusAtIndex1
	// - workbench.action.terminal.focusAtIndex2
	// - workbench.action.terminal.focusAtIndex3
	// - workbench.action.terminal.focusAtIndex4
	// - workbench.action.terminal.focusAtIndex5
	// - workbench.action.terminal.focusAtIndex6
	// - workbench.action.terminal.focusAtIndex7
	// - workbench.action.terminal.focusAtIndex8
	// - workbench.action.terminal.focusAtIndex9
	// - workbench.action.terminal.focusFind
	// - workbench.action.terminal.focusNext
	// - workbench.action.terminal.focusNextPane
	// - workbench.action.terminal.focusPrevious
	// - workbench.action.terminal.focusPreviousPane
	// - workbench.action.terminal.hideFind
	// - workbench.action.terminal.kill
	// - workbench.action.terminal.killEditor
	// - workbench.action.terminal.moveToEditor
	// - workbench.action.terminal.moveToLineEnd
	// - workbench.action.terminal.moveToLineStart
	// - workbench.action.terminal.moveToTerminalPanel
	// - workbench.action.terminal.navigationModeExit
	// - workbench.action.terminal.navigationModeFocusNext
	// - workbench.action.terminal.navigationModeFocusPrevious
	// - workbench.action.terminal.new
	// - workbench.action.terminal.newInActiveWorkspace
	// - workbench.action.terminal.paste
	// - workbench.action.terminal.pasteSelection
	// - workbench.action.terminal.resizePaneDown
	// - workbench.action.terminal.resizePaneLeft
	// - workbench.action.terminal.resizePaneRight
	// - workbench.action.terminal.resizePaneUp
	// - workbench.action.terminal.runActiveFile
	// - workbench.action.terminal.runSelectedText
	// - workbench.action.terminal.scrollDown
	// - workbench.action.terminal.scrollDownPage
	// - workbench.action.terminal.scrollToBottom
	// - workbench.action.terminal.scrollToNextCommand
	// - workbench.action.terminal.scrollToPreviousCommand
	// - workbench.action.terminal.scrollToTop
	// - workbench.action.terminal.scrollUp
	// - workbench.action.terminal.scrollUpPage
	// - workbench.action.terminal.selectAll
	// - workbench.action.terminal.selectToNextCommand
	// - workbench.action.terminal.selectToNextLine
	// - workbench.action.terminal.selectToPreviousCommand
	// - workbench.action.terminal.selectToPreviousLine
	// - workbench.action.terminal.sendSequence
	// - workbench.action.terminal.sizeToContentWidth
	// - workbench.action.terminal.split
	// - workbench.action.terminal.splitInActiveWorkspace
	// - workbench.action.terminal.toggleFindCaseSensitive
	// - workbench.action.terminal.toggleFindRegex
	// - workbench.action.terminal.toggleFindWholeWord
	// - workbench.action.terminal.toggleTerminal
	// - workbench.action.toggleFullScreen
	// - workbench.action.toggleMaximizedPanel
	// - workbench.action.togglePanel
	"terminal.integrated.commandsToSkipShell": [],

	// Controls whether to confirm when the window closes if there are active terminal sessions.
	//  - never: Never confirm.
	//  - always: Always confirm if there are terminals.
	//  - hasChildProcesses: Confirm if there are any terminals that have child processes.
	"terminal.integrated.confirmOnExit": "never",

	// Controls whether to confirm killing terminals when they have child processes. When set to editor, terminals in the editor area will be marked as changed when they have child processes. Note that child process detection may not work well for shells like Git Bash which don't run their processes as child processes of the shell.
	//  - never: Never confirm.
	//  - editor: Confirm if the terminal is in the editor.
	//  - panel: Confirm if the terminal is in the panel.
	//  - always: Confirm if the terminal is either in the editor or panel.
	"terminal.integrated.confirmOnKill": "editor",

	// Controls whether text selected in the terminal will be copied to the clipboard.
	"terminal.integrated.copyOnSelection": false,

	// Controls whether the terminal cursor blinks.
	"terminal.integrated.cursorBlinking": false,

	// Controls the style of terminal cursor.
	"terminal.integrated.cursorStyle": "block",

	// Controls the width of the cursor when `terminal.integrated.cursorStyle` is set to `line`.
	"terminal.integrated.cursorWidth": 1,

	// Whether to draw custom glyphs for block element and box drawing characters instead of using the font, which typically yields better rendering with continuous lines. Note that this doesn't work with the DOM renderer
	"terminal.integrated.customGlyphs": true,

	// An explicit start path where the terminal will be launched, this is used as the current working directory (cwd) for the shell process. This may be particularly useful in workspace settings if the root directory is not a convenient cwd.
	"terminal.integrated.cwd": "",

	// Controls where newly created terminals will appear.
	//  - editor: Create terminals in the editor
	//  - view: Create terminals in the terminal view
	"terminal.integrated.defaultLocation": "view",

	// The default profile used on Linux. This setting will currently be ignored if either `terminal.integrated.shell.linux` or `terminal.integrated.shellArgs.linux` are set.
	"terminal.integrated.defaultProfile.linux": null,

	// The default profile used on macOS. This setting will currently be ignored if either `terminal.integrated.shell.osx` or `terminal.integrated.shellArgs.osx` are set.
	//  - bash: $(terminal-bash) bash
	// - path: bash
	// - args: ['-l']
	//  - zsh: $(terminal) zsh
	// - path: zsh
	// - args: ['-l']
	//  - fish: $(terminal) fish
	// - path: fish
	// - args: ['-l']
	//  - tmux: $(terminal-tmux) tmux
	// - path: tmux
	//  - JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
	// - extensionIdenfifier: ms-vscode.js-debug
	//  - JavaScript Debug Terminal: $($(debug)) JavaScript Debug Terminal
	// - extensionIdenfifier: ms-vscode.js-debug-nightly
	"terminal.integrated.defaultProfile.osx": null,

	// The default profile used on Windows. This setting will currently be ignored if either `terminal.integrated.shell.windows` or `terminal.integrated.shellArgs.windows` are set.
	"terminal.integrated.defaultProfile.windows": null,

	// Controls whether to detect and set the `$LANG` environment variable to a UTF-8 compliant option since VS Code's terminal only supports UTF-8 encoded data coming from the shell.
	//  - auto: Set the `$LANG` environment variable if the existing variable does not exist or it does not end in `'.UTF-8'`.
	//  - off: Do not set the `$LANG` environment variable.
	//  - on: Always set the `$LANG` environment variable.
	"terminal.integrated.detectLocale": "auto",

	// Controls whether bold text in the terminal will always use the "bright" ANSI color variant.
	"terminal.integrated.drawBoldTextInBrightColors": true,

	// Controls whether the terminal bell is enabled, this shows up as a visual bell next to the terminal's name.
	"terminal.integrated.enableBell": false,

	// Whether to enable file links in the terminal. Links can be slow when working on a network drive in particular because each file link is verified against the file system. Changing this will take effect only in new terminals.
	"terminal.integrated.enableFileLinks": true,

	// Persist terminal sessions for the workspace across window reloads.
	"terminal.integrated.enablePersistentSessions": true,

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux. Set to `null` to delete the environment variable.
	"terminal.integrated.env.linux": {},

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on macOS. Set to `null` to delete the environment variable.
	"terminal.integrated.env.osx": {},

	// Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows. Set to `null` to delete the environment variable.
	"terminal.integrated.env.windows": {},

	// Whether to display the environment changes indicator on each terminal which explains whether extensions have made, or want to make changes to the terminal's environment.
	//  - off: Disable the indicator.
	//  - on: Enable the indicator.
	//  - warnonly: Only show the warning indicator when a terminal's environment is 'stale', not the information indicator that shows a terminal has had its environment modified by an extension.
	"terminal.integrated.environmentChangesIndicator": "warnonly",

	// Whether to relaunch terminals automatically if extension want to contribute to their environment and have not been interacted with yet.
	"terminal.integrated.environmentChangesRelaunch": true,

	// An experimental setting that aims to improve link detection in the terminal by improving when links are detected and by enabling shared link detection with the editor. Currently this only supports web links.
	"terminal.integrated.experimentalLinkProvider": true,

	// Scrolling speed multiplier when pressing `Alt`.
	"terminal.integrated.fastScrollSensitivity": 5,

	// Controls the font family of the terminal, this defaults to `editor.fontFamily`'s value.
	"terminal.integrated.fontFamily": "",

	// Controls the font size in pixels of the terminal.
	"terminal.integrated.fontSize": 12,

	// The font weight to use within the terminal for non-bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"terminal.integrated.fontWeight": "normal",

	// The font weight to use within the terminal for bold text. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
	"terminal.integrated.fontWeightBold": "bold",

	// Controls whether the terminal will leverage the GPU to do its rendering.
	//  - auto: Let VS Code detect which renderer will give the best experience.
	//  - on: Enable GPU acceleration within the terminal.
	//  - off: Disable GPU acceleration within the terminal.
	//  - canvas: Use the fallback canvas renderer within the terminal. This uses a 2d context instead of webgl and may be better on some systems.
	"terminal.integrated.gpuAcceleration": "auto",

	// Configurable to provide a custom setting to ignore processes
	"terminal.integrated.ignoreProcessNames": [
		"starship",
		"oh-my-posh",
		"bash",
		"zsh"
	],

	// Whether new shells should inherit their environment from VS Code, which may source a login shell to ensure $PATH and other development variables are initialized. This has no effect on Windows.
	"terminal.integrated.inheritEnv": true,

	// Controls the letter spacing of the terminal, this is an integer value which represents the amount of additional pixels to add between characters.
	"terminal.integrated.letterSpacing": 0,

	// Controls the line height of the terminal, this number is multiplied by the terminal font size to get the actual line-height in pixels.
	"terminal.integrated.lineHeight": 1,

	// Experimental: local echo will be disabled when any of these program names are found in the terminal title.
	"terminal.integrated.localEchoExcludePrograms": [
		"vim",
		"vi",
		"nano",
		"tmux"
	],

	// Experimental: length of network delay, in milliseconds, where local edits will be echoed on the terminal without waiting for server acknowledgement. If '0', local echo will always be on, and if '-1' it will be disabled.
	"terminal.integrated.localEchoLatencyThreshold": 30,

	// Experimental: terminal style of locally echoed text; either a font style or an RGB color.
	"terminal.integrated.localEchoStyle": "dim",

	// Controls whether to force selection when using Option+click on macOS. This will force a regular (line) selection and disallow the use of column selection mode. This enables copying and pasting using the regular terminal selection, for example, when mouse mode is enabled in tmux.
	"terminal.integrated.macOptionClickForcesSelection": false,

	// Controls whether to treat the option key as the meta key in the terminal on macOS.
	"terminal.integrated.macOptionIsMeta": false,

	// When set the foreground color of each cell will change to try meet the contrast ratio specified. Example values:
	// 
	// - 1: The default, do nothing.
	// - 4.5: [WCAG AA compliance (minimum)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html).
	// - 7: [WCAG AAA compliance (enhanced)](https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast7.html).
	// - 21: White on black or black on white.
	"terminal.integrated.minimumContrastRatio": 1,

	// A multiplier to be used on the `deltaY` of mouse wheel scroll events.
	"terminal.integrated.mouseWheelScrollSensitivity": 1,

	// When the terminal process must be shutdown (eg. on window or application close), this determines when the previous terminal session contents should be restored and processes be recreated when the workspace is next opened. Restoring of the process current working directory depends on whether it is supported by the shell.
	//  - onExit: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu).
	//  - onExitAndWindowClose: Revive the processes after the last window is closed on Windows/Linux or when the `workbench.action.quit` command is triggered (command palette, keybinding, menu), or when the window is closed.
	//  - never: Never restore the terminal buffers or recreate the process.
	"terminal.integrated.persistentSessionReviveProcess": "onExit",

	// Controls the maximum amount of lines that will be restored when reconnecting to a persistent terminal session. Increasing this will restore more lines of scrollback at the cost of more memory and increase the time it takes to connect to terminals on start up. This setting requires a restart to take effect and should be set to a value less than or equal to `terminal.integrated.scrollback`.
	"terminal.integrated.persistentSessionScrollback": 100,

	// The Linux profiles to present when creating a new terminal via the terminal dropdown. Set the `path` property manually with an optional `args`.
	// 
	// Set an existing profile to `null` to hide the profile from the list, for example: `"bash": null`.
	"terminal.integrated.profiles.linux": {
		"bash": {
			"path": "bash",
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh"
		},
		"fish": {
			"path": "fish"
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// The macOS profiles to present when creating a new terminal via the terminal dropdown. Set the `path` property manually with an optional `args`.
	// 
	// Set an existing profile to `null` to hide the profile from the list, for example: `"bash": null`.
	"terminal.integrated.profiles.osx": {
		"bash": {
			"path": "bash",
			"args": [
				"-l"
			],
			"icon": "terminal-bash"
		},
		"zsh": {
			"path": "zsh",
			"args": [
				"-l"
			]
		},
		"fish": {
			"path": "fish",
			"args": [
				"-l"
			]
		},
		"tmux": {
			"path": "tmux",
			"icon": "terminal-tmux"
		},
		"pwsh": {
			"path": "pwsh",
			"icon": "terminal-powershell"
		}
	},

	// The Windows profiles to present when creating a new terminal via the terminal dropdown. Use the `source` property to automatically detect the shell's location. Or set the `path` property manually with an optional `args`.
	// 
	// Set an existing profile to `null` to hide the profile from the list, for example: `"Ubuntu-20.04 (WSL)": null`.
	"terminal.integrated.profiles.windows": {
		"PowerShell": {
			"source": "PowerShell",
			"icon": "terminal-powershell"
		},
		"Command Prompt": {
			"path": [
				"${env:windir}\\Sysnative\\cmd.exe",
				"${env:windir}\\System32\\cmd.exe"
			],
			"args": [],
			"icon": "terminal-cmd"
		},
		"Git Bash": {
			"source": "Git Bash"
		}
	},

	// Controls how terminal reacts to right click.
	//  - default: Show the context menu.
	//  - copyPaste: Copy when there is a selection, otherwise paste.
	//  - paste: Paste on right click.
	//  - selectWord: Select the word under the cursor and show the context menu.
	"terminal.integrated.rightClickBehavior": "selectWord",

	// Controls the maximum amount of lines the terminal keeps in its buffer.
	"terminal.integrated.scrollback": 1000,

	// Dispatches most keybindings to the terminal instead of the workbench, overriding `terminal.integrated.commandsToSkipShell`, which can be used alternatively for fine tuning.
	"terminal.integrated.sendKeybindingsToShell": false,

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.linux#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.linux`. This will currently take priority over the new profiles settings but that will change in the future.
	// The path of the shell that the terminal uses on Linux. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shell.linux": null,

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.osx#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.osx`. This will currently take priority over the new profiles settings but that will change in the future.
	// The path of the shell that the terminal uses on macOS. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shell.osx": null,

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.windows#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.windows`. This will currently take priority over the new profiles settings but that will change in the future.
	// The path of the shell that the terminal uses on Windows. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shell.windows": null,

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.linux#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.linux`. This will currently take priority over the new profiles settings but that will change in the future.
	// The command line arguments to use when on the Linux terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shellArgs.linux": [],

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.osx#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.osx`. This will currently take priority over the new profiles settings but that will change in the future.
	// The command line arguments to use when on the macOS terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shellArgs.osx": [
		"-l"
	],

	// This is deprecated, the new recommended way to configure your default shell is by creating a terminal profile in `terminal.integrated.profiles.windows#` and setting its profile name as the default in `#terminal.integrated.defaultProfile.windows`. This will currently take priority over the new profiles settings but that will change in the future.
	// The command line arguments to use when on the Windows terminal. [Read more about configuring the shell](https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles).
	"terminal.integrated.shellArgs.windows": [],

	// Controls whether to show the alert "The terminal process terminated with exit code" when exit code is non-zero.
	"terminal.integrated.showExitAlert": true,

	// Whether to show hovers for links in the terminal output.
	"terminal.integrated.showLinkHover": true,

	// Controls the working directory a split terminal starts with.
	//  - workspaceRoot: A new split terminal will use the workspace root as the working directory. In a multi-root workspace a choice for which root folder to use is offered.
	//  - initial: A new split terminal will use the working directory that the parent terminal started with.
	//  - inherited: On macOS and Linux, a new split terminal will use the working directory of the parent terminal. On Windows, this behaves the same as initial.
	"terminal.integrated.splitCwd": "inherited",

	// Controls the terminal description, which appears to the right of the title. Variables are substituted based on the context:
	// - `${cwd}`: the terminal's current working directory
	// - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. This will not be displayed for Windows.
	// - `${workspaceFolder}`: the workspace in which the terminal was launched
	// - `${local}`: indicates a local terminal in a remote workspace
	// - `${process}`: the name of the terminal process
	// - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
	// - `${sequence}`: the name provided to xterm.js by the process
	// - `${task}`: indicates this terminal is associated with a task
	"terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",

	// Controls whether terminal tab statuses support animation (eg. in progress tasks).
	"terminal.integrated.tabs.enableAnimation": true,

	// Controls whether terminal tabs display as a list to the side of the terminal. When this is disabled a dropdown will display instead.
	"terminal.integrated.tabs.enabled": true,

	// Controls whether focusing the terminal of a tab happens on double or single click.
	//  - singleClick: Focus the terminal when clicking a terminal tab
	//  - doubleClick: Focus the terminal when double clicking a terminal tab
	"terminal.integrated.tabs.focusMode": "doubleClick",

	// Controls whether the terminal tabs view will hide under certain conditions.
	//  - never: Never hide the terminal tabs view
	//  - singleTerminal: Hide the terminal tabs view when there is only a single terminal opened
	//  - singleGroup: Hide the terminal tabs view when there is only a single terminal group opened
	"terminal.integrated.tabs.hideCondition": "singleTerminal",

	// Controls the location of the terminal tabs, either to the left or right of the actual terminal(s).
	//  - left: Show the terminal tabs view to the left of the terminal
	//  - right: Show the terminal tabs view to the right of the terminal
	"terminal.integrated.tabs.location": "right",

	// Separator used by `terminal.integrated.title` and `terminal.integrated.description`.
	"terminal.integrated.tabs.separator": " - ",

	// Controls whether terminal split and kill buttons are displays next to the new terminal button.
	//  - always: Always show the actions
	//  - singleTerminal: Show the actions when it is the only terminal opened
	//  - singleTerminalOrNarrow: Show the actions when it is the only terminal opened or when the tabs view is in its narrow textless state
	//  - never: Never show the actions
	"terminal.integrated.tabs.showActions": "singleTerminalOrNarrow",

	// Shows the active terminal information in the view, this is particularly useful when the title within the tabs aren't visible.
	//  - always: Always show the active terminal
	//  - singleTerminal: Show the active terminal when it is the only terminal opened
	//  - singleTerminalOrNarrow: Show the active terminal when it is the only terminal opened or when the tabs view is in its narrow textless state
	//  - never: Never show the active terminal
	"terminal.integrated.tabs.showActiveTerminal": "singleTerminalOrNarrow",

	// Controls the terminal title. Variables are substituted based on the context:
	// - `${cwd}`: the terminal's current working directory
	// - `${cwdFolder}`: the terminal's current working directory, displayed for multi-root workspaces or in a single root workspace when the value differs from the initial working directory. This will not be displayed for Windows.
	// - `${workspaceFolder}`: the workspace in which the terminal was launched
	// - `${local}`: indicates a local terminal in a remote workspace
	// - `${process}`: the name of the terminal process
	// - `${separator}`: a conditional separator (" - ") that only shows when surrounded by variables with values or static text.
	// - `${sequence}`: the name provided to xterm.js by the process
	// - `${task}`: indicates this terminal is associated with a task
	"terminal.integrated.tabs.title": "${process}",

	// Controls what version of unicode to use when evaluating the width of characters in the terminal. If you experience emoji or other wide characters not taking up the right amount of space or backspace either deleting too much or too little then you may want to try tweaking this setting.
	//  - 6: Version 6 of unicode, this is an older version which should work better on older systems.
	//  - 11: Version 11 of unicode, this version provides better support on modern systems that use modern versions of unicode.
	"terminal.integrated.unicodeVersion": "11",

	// Controls whether or not WSL distros are shown in the terminal dropdown
	"terminal.integrated.useWslProfiles": true,

	// Whether to use ConPTY for Windows terminal process communication (requires Windows 10 build number 18309+). Winpty will be used if this is false.
	"terminal.integrated.windowsEnableConpty": true,

	// A string containing all characters to be considered word separators by the double click to select word feature.
	"terminal.integrated.wordSeparators": " ()[]{}',\"`─‘’",

	// Controls enablement of `provideTasks` for all task provider extension. If the Tasks: Run Task command is slow, disabling auto detect for task providers may help. Individual extensions may also provide settings that disable auto detection.
	"task.autoDetect": "on",

	// Configures whether to show the problem matcher prompt when running a task. Set to `true` to never prompt, or use a dictionary of task types to turn off prompting only for specific task types.
	"task.problemMatchers.neverPrompt": false,

	// Controls whether to show the task detail for tasks that have a detail in task quick picks, such as Run Task.
	"task.quickOpen.detail": true,

	// Controls the number of recent items tracked in task quick open dialog.
	"task.quickOpen.history": 30,

	// Causes the Tasks: Run Task command to use the slower "show all" behavior instead of the faster two level picker where tasks are grouped by provider.
	"task.quickOpen.showAll": false,

	// Controls whether the task quick pick is skipped when there is only one task to pick from.
	"task.quickOpen.skip": false,

	// Save all dirty editors before running a task.
	//  - always: Always saves all editors before running.
	//  - never: Never saves editors before running.
	//  - prompt: Prompts whether to save editors before running.
	"task.saveBeforeRun": "always",

	// Configures whether a warning is shown when a provider is slow
	"task.slowProviderWarning": true,

	// Controls whether Problems view should automatically reveal files when opening them.
	"problems.autoReveal": true,

	// Controls the order in which problems are navigated.
	//  - severity: Navigate problems ordered by severity
	//  - position: Navigate problems ordered by position
	"problems.compareOrder": "severity",

	// Show Errors & Warnings on files and folder.
	"problems.decorations.enabled": true,

	// When enabled shows the current problem in the status bar.
	"problems.showCurrentInStatus": false,

	// Enable/disable navigation breadcrumbs.
	"breadcrumbs.enabled": true,

	// Controls whether and how file paths are shown in the breadcrumbs view.
	//  - on: Show the file path in the breadcrumbs view.
	//  - off: Do not show the file path in the breadcrumbs view.
	//  - last: Only show the last element of the file path in the breadcrumbs view.
	"breadcrumbs.filePath": "on",

	// Render breadcrumb items with icons.
	"breadcrumbs.icons": true,

	// When enabled breadcrumbs show `array`-symbols.
	"breadcrumbs.showArrays": true,

	// When enabled breadcrumbs show `boolean`-symbols.
	"breadcrumbs.showBooleans": true,

	// When enabled breadcrumbs show `class`-symbols.
	"breadcrumbs.showClasses": true,

	// When enabled breadcrumbs show `constant`-symbols.
	"breadcrumbs.showConstants": true,

	// When enabled breadcrumbs show `constructor`-symbols.
	"breadcrumbs.showConstructors": true,

	// When enabled breadcrumbs show `enumMember`-symbols.
	"breadcrumbs.showEnumMembers": true,

	// When enabled breadcrumbs show `enum`-symbols.
	"breadcrumbs.showEnums": true,

	// When enabled breadcrumbs show `event`-symbols.
	"breadcrumbs.showEvents": true,

	// When enabled breadcrumbs show `field`-symbols.
	"breadcrumbs.showFields": true,

	// When enabled breadcrumbs show `file`-symbols.
	"breadcrumbs.showFiles": true,

	// When enabled breadcrumbs show `function`-symbols.
	"breadcrumbs.showFunctions": true,

	// When enabled breadcrumbs show `interface`-symbols.
	"breadcrumbs.showInterfaces": true,

	// When enabled breadcrumbs show `key`-symbols.
	"breadcrumbs.showKeys": true,

	// When enabled breadcrumbs show `method`-symbols.
	"breadcrumbs.showMethods": true,

	// When enabled breadcrumbs show `module`-symbols.
	"breadcrumbs.showModules": true,

	// When enabled breadcrumbs show `namespace`-symbols.
	"breadcrumbs.showNamespaces": true,

	// When enabled breadcrumbs show `null`-symbols.
	"breadcrumbs.showNull": true,

	// When enabled breadcrumbs show `number`-symbols.
	"breadcrumbs.showNumbers": true,

	// When enabled breadcrumbs show `object`-symbols.
	"breadcrumbs.showObjects": true,

	// When enabled breadcrumbs show `operator`-symbols.
	"breadcrumbs.showOperators": true,

	// When enabled breadcrumbs show `package`-symbols.
	"breadcrumbs.showPackages": true,

	// When enabled breadcrumbs show `property`-symbols.
	"breadcrumbs.showProperties": true,

	// When enabled breadcrumbs show `string`-symbols.
	"breadcrumbs.showStrings": true,

	// When enabled breadcrumbs show `struct`-symbols.
	"breadcrumbs.showStructs": true,

	// When enabled breadcrumbs show `typeParameter`-symbols.
	"breadcrumbs.showTypeParameters": true,

	// When enabled breadcrumbs show `variable`-symbols.
	"breadcrumbs.showVariables": true,

	// Controls whether and how symbols are shown in the breadcrumbs view.
	//  - on: Show all symbols in the breadcrumbs view.
	//  - off: Do not show symbols in the breadcrumbs view.
	//  - last: Only show the current symbol in the breadcrumbs view.
	"breadcrumbs.symbolPath": "on",

	// Controls how symbols are sorted in the breadcrumbs outline view.
	//  - position: Show symbol outline in file position order.
	//  - name: Show symbol outline in alphabetical order.
	//  - type: Show symbol outline in symbol type order.
	"breadcrumbs.symbolSortOrder": "position",

	// Specifies where the indicators of the gutter changes annotations will be shown
	//  - gutter: Adds a gutter indicator
	//  - overview: Adds a decoration to the overview ruler (scroll bar)
	"gitlens.changes.locations": [
		"gutter",
		"overview"
	],

	// Specifies how the gutter changes annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.changes.toggleMode": "file",

	// Specifies the age of the most recent change (in days) after which the gutter heatmap annotations will be cold rather than hot (i.e. will use `gitlens.heatmap.coldColor#` instead of `#gitlens.heatmap.hotColor`)
	"gitlens.heatmap.ageThreshold": 90,

	// Specifies the base color of the gutter heatmap annotations when the most recent change is older (cold) than the `gitlens.heatmap.ageThreshold` value
	"gitlens.heatmap.coldColor": "#0a60f6",

	// Specifies the base color of the gutter heatmap annotations when the most recent change is newer (hot) than the `gitlens.heatmap.ageThreshold` value
	"gitlens.heatmap.hotColor": "#f66a0a",

	// Specifies where the indicators of the gutter heatmap annotations will be shown
	//  - gutter: Adds a gutter indicator
	//  - overview: Adds a decoration to the overview ruler (scroll bar)
	"gitlens.heatmap.locations": [
		"gutter",
		"overview"
	],

	// Specifies how the gutter heatmap annotations will be toggled
	//  - file: Toggles each file individually
	//  - window: Toggles the window, i.e. all files at once
	"gitlens.heatmap.toggleMode": "file",

	// Specifies whether to dismiss the _Git Command Palette_ when focus is lost (if not, press `ESC` to dismiss)
	"gitlens.gitCommands.closeOnFocusOut": true,

	// Specifies whether to match all or any commit message search patterns
	"gitlens.gitCommands.search.matchAll": false,

	// Specifies whether to match commit search patterns with or without regard to casing
	"gitlens.gitCommands.search.matchCase": false,

	// Specifies whether to match commit search patterns using regular expressions
	"gitlens.gitCommands.search.matchRegex": true,

	// Specifies whether to show the commit search results directly in the quick pick menu, in the Side Bar, or will be based on the context
	"gitlens.gitCommands.search.showResultsInSideBar": null,

	// Deprecated. This setting has been renamed to `gitlens.gitCommands.search.showResultsInSideBar`
	// 
	"gitlens.gitCommands.search.showResultsInView": null,

	// Specifies which (and when) Git commands will skip the confirmation step, using the format: `git-command-name:(menu|command)`
	//  - branch-create:command: Skips branch create confirmations when run from a command, e.g. a view action
	//  - branch-create:menu: Skips branch create confirmations when run from the Git Command Palette
	//  - co-authors:command: Skips co-author confirmations when run from a command, e.g. a view action
	//  - co-authors:menu: Skips co-author confirmations when run from the Git Command Palette
	//  - fetch:command: Skips fetch confirmations when run from a command, e.g. a view action
	//  - fetch:menu: Skips fetch confirmations when run from the Git Command Palette
	//  - pull:command: Skips pull confirmations when run from a command, e.g. a view action
	//  - pull:menu: Skips pull confirmations when run from the Git Command Palette
	//  - push:command: Skips push confirmations when run from a command, e.g. a view action
	//  - push:menu: Skips push confirmations when run from the Git Command Palette
	//  - stash-apply:command: Skips stash apply confirmations when run from a command, e.g. a view action
	//  - stash-apply:menu: Skips stash apply confirmations when run from the Git Command Palette
	//  - stash-pop:command: Skips stash pop confirmations when run from a command, e.g. a view action
	//  - stash-pop:menu: Skips stash pop confirmations when run from the Git Command Palette
	//  - stash-push:command: Skips stash push confirmations when run from a command, e.g. a view action
	//  - stash-push:menu: Skips stash push confirmations when run from the Git Command Palette
	//  - switch:command: Skips switch confirmations when run from a command, e.g. a view action
	//  - switch:menu: Skips switch confirmations when run from the Git Command Palette
	//  - tag-create:command: Skips tag create confirmations when run from a command, e.g. a view action
	//  - tag-create:menu: Skips tag create confirmations when run from the Git Command Palette
	"gitlens.gitCommands.skipConfirmations": [
		"fetch:command",
		"stash-push:command",
		"switch:command"
	],

	// Specifies how Git commands are sorted in the _Git Command Palette_
	//  - name: Sorts commands by name
	//  - usage: Sorts commands by last used date
	"gitlens.gitCommands.sortBy": "usage",

	// If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated due to being combined into the `telemetry.telemetryLevel` setting.
	// Enable crash reports to be collected. This helps us improve stability. 
	// This option requires restart to take effect.
	"telemetry.enableCrashReporter": true,

	// If this setting is false, no telemetry will be sent regardless of the new setting's value. Deprecated in favor of the `telemetry.telemetryLevel` setting.
	// Enable diagnostic data to be collected. This helps us to better understand how Visual Studio Code - Insiders is performing and where improvements need to be made. [Read more](https://go.microsoft.com/fwlink/?LinkId=786907) about what we collect and our privacy statement.
	"telemetry.enableTelemetry": true,

	// 
	// Controls all core and first party extension telemetry. This helps us to better understand how Visual Studio Code - Insiders is performing, where improvements need to be made, and how features are being used. Read more about the [data we collect](https://aka.ms/vscode-telemetry) and our [privacy statement](https://go.microsoft.com/fwlink/?LinkId=786907). A full restart of the application is necessary for crash reporting changes to take effect.
	// 
	// &nbsp;
	// 
	// The following table outlines the data sent with each setting:
	// 
	// |       | Crash Reports | Error Telemetry | Usage Data |
	// |:------|:---------------------:|:---------------:|:--------------:|
	// | all   |            ✓          |        ✓        |        ✓       |
	// | error |            ✓          |        ✓        |        -       |
	// | crash |            ✓          |        -        |        -       |
	// | off   |            -          |        -        |        -       |
	// 
	// 
	// &nbsp;
	// 
	// ****Note:*** If this setting is 'off', no telemetry will be sent regardless of other telemetry settings. If this setting is set to anything except 'off' and telemetry is disabled with deprecated settings, no telemetry will be sent.*
	// 
	//  - all: Sends usage data, errors, and crash reports.
	//  - error: Sends general error telemetry and crash reports.
	//  - crash: Sends OS level crash reports.
	//  - off: Disables all product telemetry.
	"telemetry.telemetryLevel": "all",

	// Specifies autolinks to external resources in commit messages. Use `<num>` as the variable for the reference number
	"gitlens.autolinks": null,

	// Specifies whether to enable rich integrations with any supported remote services
	"gitlens.integrations.enabled": true,

	// Specifies whether to allow guest access to GitLens features when using Visual Studio Live Share
	"gitlens.liveshare.allowGuestAccess": true,

	// Specifies the configuration of a partner integration
	"gitlens.partners": null,

	// Specifies custom remote services to be matched with Git remotes to detect custom domains for built-in remote services or provide support for custom remote services
	"gitlens.remotes": null,

	// Specifies whether to enable terminal links &mdash; autolinks in the integrated terminal to quickly jump to more details for commits, branches, tags, and more
	"gitlens.terminalLinks.enabled": true,

	// Render Outline Elements with Icons.
	"outline.icons": true,

	// Use badges for Errors & Warnings.
	"outline.problems.badges": true,

	// Use colors for Errors & Warnings.
	"outline.problems.colors": true,

	// Show Errors & Warnings on Outline Elements.
	"outline.problems.enabled": true,

	// When enabled outline shows `array`-symbols.
	"outline.showArrays": true,

	// When enabled outline shows `boolean`-symbols.
	"outline.showBooleans": true,

	// When enabled outline shows `class`-symbols.
	"outline.showClasses": true,

	// When enabled outline shows `constant`-symbols.
	"outline.showConstants": true,

	// When enabled outline shows `constructor`-symbols.
	"outline.showConstructors": true,

	// When enabled outline shows `enumMember`-symbols.
	"outline.showEnumMembers": true,

	// When enabled outline shows `enum`-symbols.
	"outline.showEnums": true,

	// When enabled outline shows `event`-symbols.
	"outline.showEvents": true,

	// When enabled outline shows `field`-symbols.
	"outline.showFields": true,

	// When enabled outline shows `file`-symbols.
	"outline.showFiles": true,

	// When enabled outline shows `function`-symbols.
	"outline.showFunctions": true,

	// When enabled outline shows `interface`-symbols.
	"outline.showInterfaces": true,

	// When enabled outline shows `key`-symbols.
	"outline.showKeys": true,

	// When enabled outline shows `method`-symbols.
	"outline.showMethods": true,

	// When enabled outline shows `module`-symbols.
	"outline.showModules": true,

	// When enabled outline shows `namespace`-symbols.
	"outline.showNamespaces": true,

	// When enabled outline shows `null`-symbols.
	"outline.showNull": true,

	// When enabled outline shows `number`-symbols.
	"outline.showNumbers": true,

	// When enabled outline shows `object`-symbols.
	"outline.showObjects": true,

	// When enabled outline shows `operator`-symbols.
	"outline.showOperators": true,

	// When enabled outline shows `package`-symbols.
	"outline.showPackages": true,

	// When enabled outline shows `property`-symbols.
	"outline.showProperties": true,

	// When enabled outline shows `string`-symbols.
	"outline.showStrings": true,

	// When enabled outline shows `struct`-symbols.
	"outline.showStructs": true,

	// When enabled outline shows `typeParameter`-symbols.
	"outline.showTypeParameters": true,

	// When enabled outline shows `variable`-symbols.
	"outline.showVariables": true,

	// Specifies how absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.defaultDateFormat": null,

	// Specifies how short absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.defaultDateShortFormat": null,

	// Specifies whether commit dates should use the authored or committed date
	//  - authored: Uses the date when the changes were authored (i.e. originally written)
	//  - committed: Uses the date when the changes were committed
	"gitlens.defaultDateSource": "authored",

	// Specifies how dates will be displayed by default
	//  - relative: e.g. 1 day ago
	//  - absolute: e.g. July 25th, 2018 7:18pm
	"gitlens.defaultDateStyle": "relative",

	// Specifies how times will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats
	"gitlens.defaultTimeFormat": null,

	// Specifies which commands will be added to which menus
	"gitlens.menus": {
		"editor": {
			"blame": false,
			"clipboard": true,
			"compare": true,
			"history": false,
			"remote": false
		},
		"editorGroup": {
			"blame": true,
			"compare": true
		},
		"editorTab": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true
		},
		"explorer": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": true
		},
		"scm": {
			"authors": true
		},
		"scmGroupInline": {
			"stash": true
		},
		"scmGroup": {
			"compare": true,
			"openClose": true,
			"stash": true
		},
		"scmItem": {
			"clipboard": true,
			"compare": true,
			"history": true,
			"remote": false,
			"stash": true
		}
	},

	// Specifies the keymap to use for GitLens shortcut keys
	//  - alternate: Adds an alternate set of shortcut keys that start with `Alt` (⌥ on macOS)
	//  - chorded: Adds a chorded set of shortcut keys that start with `Ctrl+Alt+G` (`⌥⌘G` on macOS)
	//  - none: No shortcut keys will be added
	"gitlens.keymap": "chorded",

	// Specifies the active GitLens mode, if any
	"gitlens.mode.active": "",

	// Specifies the active GitLens mode alignment in the status bar
	//  - left: Aligns to the left
	//  - right: Aligns to the right
	"gitlens.mode.statusBar.alignment": "right",

	// Specifies whether to provide the active GitLens mode in the status bar
	"gitlens.mode.statusBar.enabled": true,

	// Specifies the user-defined GitLens modes
	"gitlens.modes": {
		"zen": {
			"name": "Zen",
			"statusBarItemName": "Zen",
			"description": "for a zen-like experience, disables many visual features",
			"codeLens": false,
			"currentLine": false,
			"hovers": false,
			"statusBar": false
		},
		"review": {
			"name": "Review",
			"statusBarItemName": "Reviewing",
			"description": "for reviewing code, enables many visual features",
			"codeLens": true,
			"currentLine": true,
			"hovers": true
		}
	},

	// Specifies the length of abbreviated commit SHAs
	"gitlens.advanced.abbreviatedShaLength": 7,

	// Specifies whether to copy full or abbreviated commit SHAs to the clipboard. Abbreviates to the length of `gitlens.advanced.abbreviatedShaLength`.
	"gitlens.advanced.abbreviateShaOnCopy": false,

	// Specifies additional arguments to pass to the `git blame` command
	"gitlens.advanced.blame.customArguments": null,

	// Specifies the time (in milliseconds) to wait before re-blaming an unsaved document after an edit. Use 0 to specify an infinite wait
	"gitlens.advanced.blame.delayAfterEdit": 5000,

	// Specifies the maximum document size (in lines) allowed to be re-blamed after an edit while still unsaved. Use 0 to specify no maximum
	"gitlens.advanced.blame.sizeThresholdAfterEdit": 5000,

	// Specifies whether git output will be cached — changing the default is not recommended
	"gitlens.advanced.caching.enabled": true,

	// Specifies the order by which commits will be shown. If unspecified, commits will be shown in reverse chronological order
	//  - null: Shows commits in reverse chronological order
	//  - date: Shows commits in reverse chronological order of the commit timestamp
	//  - author-date: Shows commits in reverse chronological order of the author timestamp
	//  - topo: Shows commits in reverse chronological order of the commit timestamp, but avoids intermixing multiple lines of history
	"gitlens.advanced.commitOrdering": null,

	// Specifies an optional external diff tool to use when comparing files. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
	"gitlens.advanced.externalDiffTool": null,

	// Specifies an optional external diff tool to use when comparing directories. Must be a configured [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool).
	"gitlens.advanced.externalDirectoryDiffTool": null,

	// Specifies the maximum number of items to show in a list. Use 0 to specify no maximum
	"gitlens.advanced.maxListItems": 200,

	// Specifies the maximum number of items to show in a search. Use 0 to specify no maximum
	"gitlens.advanced.maxSearchItems": 200,

	// Specifies which messages should be suppressed
	"gitlens.advanced.messages": {
		"suppressCommitHasNoPreviousCommitWarning": false,
		"suppressCommitNotFoundWarning": false,
		"suppressCreatePullRequestPrompt": false,
		"suppressDebugLoggingWarning": false,
		"suppressFileNotUnderSourceControlWarning": false,
		"suppressGitDisabledWarning": false,
		"suppressGitMissingWarning": false,
		"suppressGitVersionWarning": false,
		"suppressImproperWorkspaceCasingWarning": false,
		"suppressLineUncommittedWarning": false,
		"suppressNoRepositoryWarning": false,
		"suppressRebaseSwitchToTextWarning": false
	},

	// Specifies whether to dismiss quick pick menus when focus is lost (if not, press `ESC` to dismiss)
	"gitlens.advanced.quickPick.closeOnFocusOut": true,

	// Specifies how many folders deep to search for repositories
	"gitlens.advanced.repositorySearchDepth": 1,

	// Specifies the amount (percent) of similarity a deleted and added file pair must have to be considered a rename
	"gitlens.advanced.similarityThreshold": null,

	// Deprecated. This setting is no longer used
	// Deprecated. This setting is no longer used
	"gitlens.advanced.useSymmetricDifferenceNotation": null,

	// Specifies whether to ignore whitespace when comparing revisions during blame operations
	"gitlens.blame.ignoreWhitespace": false,

	// Specifies debug mode
	"gitlens.debug": false,

	// An array of Timeline sources that should be excluded from the Timeline view.
	"timeline.excludeSources": null,

	// Experimental. Controls whether the Timeline view will load the next page of items when you scroll to the end of the list.
	"timeline.pageOnScroll": false,

	// The number of items to show in the Timeline view by default and when loading more items. Setting to `null` (the default) will automatically choose a page size based on the visible area of the Timeline view.
	"timeline.pageSize": null,

	// Configure settings to be overridden for [ansible] language.
	"[ansible]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [azure-pipelines] language.
	"[azure-pipelines]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [c] language.
	"[c]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// Configure settings to be overridden for [cpp] language.
	"[cpp]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// Configure settings to be overridden for [css] language.
	"[css]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [cuda-cpp] language.
	"[cuda-cpp]":  {
		"editor.wordBasedSuggestions": false,
		"editor.suggest.insertMode": "replace",
		"editor.semanticHighlighting.enabled": true
	},

	// Configure settings to be overridden for [dart] language.
	"[dart]":  {
		"editor.tabSize": 2,
		"editor.insertSpaces": true,
		"editor.detectIndentation": false,
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for [django-html] language.
	"[django-html]":  {
		"editor.quickSuggestions": {
				"other": true,
				"comments": true,
				"strings": true
		}
	},

	// Configure settings to be overridden for [dockercompose] language.
	"[dockercompose]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "advanced",
		"editor.quickSuggestions": {
				"other": true,
				"comments": false,
				"strings": true
		}
	},

	// Configure settings to be overridden for [dockerfile] language.
	"[dockerfile]":  {
		"editor.quickSuggestions": {
				"strings": true
		}
	},

	// Configure settings to be overridden for [git-commit] language.
	"[git-commit]":  {
		"editor.rulers": [
				72
		],
		"workbench.editor.restoreViewState": false
	},

	// Configure settings to be overridden for [git-rebase] language.
	"[git-rebase]":  {
		"workbench.editor.restoreViewState": false
	},

	// Configure settings to be overridden for [go] language.
	"[go]":  {
		"editor.insertSpaces": false,
		"editor.formatOnSave": true,
		"editor.codeActionsOnSave": {
				"source.organizeImports": true
		},
		"editor.suggest.snippetsPreventQuickSuggestions": false
	},

	// Configure settings to be overridden for [handlebars] language.
	"[handlebars]":  {
		"editor.suggest.insertMode": "replace"
	},

	// Configure settings to be overridden for [html] language.
	"[html]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [javascript] language.
	"[javascript]":  {
		"editor.maxTokenizationLineLength": 2500
	},

	// Configure settings to be overridden for [json] language.
	"[json]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [jsonc] language.
	"[jsonc]":  {
		"editor.quickSuggestions": {
				"strings": true
		},
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [less] language.
	"[less]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [Log] language.
	"[Log]":  {
		"editor.wordWrap": "off"
	},

	// Configure settings to be overridden for [makefile] language.
	"[makefile]":  {
		"editor.insertSpaces": false
	},

	// Configure settings to be overridden for [markdown] language.
	"[markdown]":  {
		"editor.wordWrap": "on",
		"editor.quickSuggestions": true
	},

	// Configure settings to be overridden for [php] language.
	"[php]":  {
		"cSpell.fixSpellingWithRenameProvider": false
	},

	// Configure settings to be overridden for [plaintext] language.
	"[plaintext]":  {
		"editor.quickSuggestions": true
	},

	// Configure settings to be overridden for [postcss] language.
	"[postcss]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [python] language.
	"[python]":  {
		"gitlens.codeLens.symbolScopes": [
				"!Module"
		],
		"editor.wordBasedSuggestions": false
	},

	// Configure settings to be overridden for [scss] language.
	"[scss]":  {
		"editor.suggest.insertMode": "replace",
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [search-result] language.
	"[search-result]":  {
		"editor.lineNumbers": "off"
	},

	// Configure settings to be overridden for [shellscript] language.
	"[shellscript]":  {
		"files.eol": "\n"
	},

	// Configure settings to be overridden for [stylus] language.
	"[stylus]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [vue] language.
	"[vue]":  {
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// Configure settings to be overridden for [xml] language.
	"[xml]":  {
		"editor.autoClosingBrackets": "never",
		"files.trimFinalNewlines": true
	},

	// Configure settings to be overridden for [xsl] language.
	"[xsl]":  {
		"editor.autoClosingBrackets": "never",
		"files.trimFinalNewlines": true
	},

	// Configure settings to be overridden for [yaml] language.
	"[yaml]":  {
		"editor.insertSpaces": true,
		"editor.tabSize": 2,
		"editor.autoIndent": "keep",
		"editor.quickSuggestions": {
				"other": true,
				"comments": false,
				"strings": true
		},
		"gitlens.codeLens.scopes": [
				"document"
		]
	},

	// When enabled, new running processes are detected and ports that they listen on are automatically forwarded. Disabling this setting will not prevent all ports from being forwarded. Even when disabled, extensions will still be able to cause ports to be forwarded, and opening some URLs will still cause ports to forwarded.
	"remote.autoForwardPorts": true,

	// Sets the source from which ports are automatically forwarded when `remote.autoForwardPorts` is true. On Windows and Mac remotes, the `process` option has no effect and `output` will be used. Requires a reload to take effect.
	//  - process: Ports will be automatically forwarded when discovered by watching for processes that are started and include a port.
	//  - output: Ports will be automatically forwarded when discovered by reading terminal and debug output. Not all processes that use ports will print to the integrated terminal or debug console, so some ports will be missed. Ports forwarded based on output will not be "un-forwarded" until reload or until the port is closed by the user in the Ports view.
	"remote.autoForwardPortsSource": "process",

	// When enabled extensions are downloaded locally and installed on remote.
	"remote.downloadExtensionsLocally": false,

	// Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting, you specify if that extension should be installed and enabled locally or remotely.
	"remote.extensionKind": {
		"pub.name": [
			"ui"
		]
	},

	// Specifies the local host name that will be used for port forwarding.
	"remote.localPortHost": "localhost",

	// Set default properties that are applied to all ports that don't get properties from the setting `remote.portsAttributes`. For example:
	// 
	// ```
	// {
	//   "onAutoForward": "ignore"
	// }
	// ```
	"remote.otherPortsAttributes": {},

	// Set properties that are applied when a specific port number is forwarded. For example:
	// 
	// ```
	// "3000": {
	//   "label": "Application"
	// },
	// "40000-55000": {
	//   "onAutoForward": "ignore"
	// },
	// ".+\\/server.js": {
	//  "onAutoForward": "openPreview"
	// }
	// ```
	"remote.portsAttributes": {
		"443": {
			"protocol": "https"
		},
		"8443": {
			"protocol": "https"
		}
	},

	// Restores the ports you forwarded in a workspace.
	"remote.restoreForwardedPorts": true,

	// An array of languages where Emmet abbreviations should not be expanded.
	"emmet.excludeLanguages": [
		"markdown"
	],

	// An array of paths, where each path can contain Emmet syntaxProfiles and/or snippet files.
	// In case of conflicts, the profiles/snippets of later paths will override those of earlier paths.
	// See https://code.visualstudio.com/docs/editor/emmet for more information and an example snippet file.
	"emmet.extensionsPath": [],

	// Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and Emmet supported language.
	//  For example: `{"vue-html": "html", "javascript": "javascriptreact"}`
	"emmet.includeLanguages": {},

	// When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in CSS/SCSS/Less files is parsed.
	"emmet.optimizeStylesheetParsing": true,

	// Preferences used to modify behavior of some actions and resolvers of Emmet.
	"emmet.preferences": {},

	// Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `"never"`.
	"emmet.showAbbreviationSuggestions": true,

	// Shows expanded Emmet abbreviations as suggestions.
	// The option `"inMarkupAndStylesheetFilesOnly"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.
	// The option `"always"` applies to all parts of the file regardless of markup/css.
	"emmet.showExpandedAbbreviation": "always",

	// If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `editor.snippetSuggestions` setting.
	"emmet.showSuggestionsAsSnippets": false,

	// Define profile for specified syntax or use your own profile with specific rules.
	"emmet.syntaxProfiles": {},

	// When enabled, Emmet abbreviations are expanded when pressing TAB.
	"emmet.triggerExpansionOnTab": false,

	// Variables to be used in Emmet snippets.
	"emmet.variables": {},

	// Controls whether force push (with or without lease) is enabled.
	"git.allowForcePush": false,

	// Controls whether commits without running pre-commit and commit-msg hooks are allowed.
	"git.allowNoVerifyCommit": false,

	// Always show the Staged Changes resource group.
	"git.alwaysShowStagedChangesResourceGroup": false,

	// Controls the signoff flag for all commits.
	"git.alwaysSignOff": false,

	// When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.
	"git.autofetch": false,

	// Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.
	"git.autofetchPeriod": 180,

	// Whether auto refreshing is enabled.
	"git.autorefresh": true,

	// Configures when repositories should be automatically detected.
	//  - true: Scan for both subfolders of the current opened folder and parent folders of open files.
	//  - false: Disable automatic repository scanning.
	//  - subFolders: Scan for subfolders of the currently opened folder.
	//  - openEditors: Scan for parent folders of open files.
	"git.autoRepositoryDetection": true,

	// Stash any changes before pulling and restore them after successful pull.
	"git.autoStash": false,

	// Controls the sort order for branches.
	"git.branchSortOrder": "committerdate",

	// A regular expression to validate new branch names.
	"git.branchValidationRegex": "",

	// The character to replace whitespace in new branch names.
	"git.branchWhitespaceChar": "-",

	// Controls what type of git refs are listed when running `Checkout to...`.
	//  - local: Local branches
	//  - tags: Tags
	//  - remote: Remote branches
	"git.checkoutType": [
		"local",
		"remote",
		"tags"
	],

	// Always confirm the creation of empty commits for the 'Git: Commit Empty' command.
	"git.confirmEmptyCommits": true,

	// Controls whether to ask for confirmation before force-pushing.
	"git.confirmForcePush": true,

	// Controls whether to ask for confirmation before committing without verification.
	"git.confirmNoVerifyCommit": true,

	// Confirm before synchronizing git repositories.
	"git.confirmSync": true,

	// Controls the Git count badge.
	//  - all: Count all changes.
	//  - tracked: Count only tracked changes.
	//  - off: Turn off counter.
	"git.countBadge": "all",

	// Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.
	"git.decorations.enabled": true,

	// The default location to clone a git repository.
	"git.defaultCloneDirectory": null,

	// Controls whether to automatically detect git submodules.
	"git.detectSubmodules": true,

	// Controls the limit of git submodules detected.
	"git.detectSubmodulesLimit": 10,

	// Enables commit signing with GPG or X.509.
	"git.enableCommitSigning": false,

	// Whether git is enabled.
	"git.enabled": true,

	// Commit all changes when there are no staged changes.
	"git.enableSmartCommit": false,

	// Controls whether the Git Sync command appears in the status bar.
	"git.enableStatusBarSync": true,

	// When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.
	"git.fetchOnPull": false,

	// Follow push all tags when running the sync command.
	"git.followTagsWhenSync": false,

	// This setting is now deprecated, please use `github.gitAuthentication` instead.
	// 
	"git.githubAuthentication": null,

	// List of git repositories to ignore.
	"git.ignoredRepositories": [],

	// Ignores the legacy Git warning.
	"git.ignoreLegacyWarning": false,

	// Ignores the warning when there are too many changes in a repository.
	"git.ignoreLimitWarning": false,

	// Ignores the warning when Git is missing.
	"git.ignoreMissingGitWarning": false,

	// Ignores the warning when it looks like the branch might have been rebased when pulling.
	"git.ignoreRebaseWarning": false,

	// Ignore modifications to submodules in the file tree.
	"git.ignoreSubmodules": false,

	// Ignores the warning when Git 2.25 - 2.26 is installed on Windows.
	"git.ignoreWindowsGit27Warning": false,

	// Controls when to show commit message input validation.
	"git.inputValidation": "warn",

	// Controls the commit message length threshold for showing a warning.
	"git.inputValidationLength": 72,

	// Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.
	"git.inputValidationSubjectLength": 50,

	// Controls whether to open a repository automatically after cloning.
	//  - always: Always open in current window.
	//  - alwaysNewWindow: Always open in a new window.
	//  - whenNoFolderOpen: Only open in current window when no folder is opened.
	//  - prompt: Always prompt for action.
	"git.openAfterClone": "prompt",

	// Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.
	"git.openDiffOnClick": true,

	// Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.
	"git.path": null,

	// Runs a git command after a successful commit.
	//  - none: Don't run any command after a commit.
	//  - push: Run 'Git Push' after a successful commit.
	//  - sync: Run 'Git Sync' after a successful commit.
	"git.postCommitCommand": "none",

	// Controls whether Git should check for unsaved files before committing.
	//  - always: Check for any unsaved files.
	//  - staged: Check only for unsaved staged files.
	//  - never: Disable this check.
	"git.promptToSaveFilesBeforeCommit": "always",

	// Controls whether Git should check for unsaved files before stashing changes.
	//  - always: Check for any unsaved files.
	//  - staged: Check only for unsaved staged files.
	//  - never: Disable this check.
	"git.promptToSaveFilesBeforeStash": "always",

	// Prune when fetching.
	"git.pruneOnFetch": false,

	// Fetch all tags when pulling.
	"git.pullTags": true,

	// Force git to use rebase when running the sync command.
	"git.rebaseWhenSync": false,

	// Controls whether to require explicit Git user configuration or allow Git to guess if missing.
	"git.requireGitUserConfig": true,

	// List of paths to search for git repositories in.
	"git.scanRepositories": [],

	// Controls whether to show the commit input in the Git source control panel.
	"git.showCommitInput": true,

	// Controls whether to show an inline Open File action in the Git changes view.
	"git.showInlineOpenFileAction": true,

	// Controls whether git actions should show progress.
	"git.showProgress": true,

	// Controls whether to show a notification when a push is successful.
	"git.showPushSuccessNotification": false,

	// Controls whether to show an action button to sync or publish, if there are unpublished commits.
	//  - always: Always shows the action button, if there are unpublished commits.
	//  - whenEmpty: Only shows the action button if there are no other changes and there are unpublished commits.
	//  - never: Never shows the action button.
	"git.showUnpublishedCommitsButton": "whenEmpty",

	// Control which changes are automatically staged by Smart Commit.
	//  - all: Automatically stage all changes.
	//  - tracked: Automatically stage tracked changes only.
	"git.smartCommitChanges": "all",

	// Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.
	"git.statusLimit": 10000,

	// Suggests to enable smart commit (commit all changes when there are no staged changes).
	"git.suggestSmartCommit": true,

	// Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.
	"git.supportCancellation": false,

	// Controls whether to enable VS Code to be the authentication handler for git processes spawned in the integrated terminal. Note: terminals need to be restarted to pick up a change in this setting.
	"git.terminalAuthentication": true,

	// Controls which date to use for items in the Timeline view.
	//  - committed: Use the committed date
	//  - authored: Use the authored date
	"git.timeline.date": "committed",

	// Controls whether to show the commit author in the Timeline view.
	"git.timeline.showAuthor": true,

	// Controls how untracked changes behave.
	//  - mixed: All changes, tracked and untracked, appear together and behave equally.
	//  - separate: Untracked changes appear separately in the Source Control view. They are also excluded from several actions.
	//  - hidden: Untracked changes are hidden and excluded from several actions.
	"git.untrackedChanges": "mixed",

	// Controls whether to use the message from the commit input box as the default stash message.
	"git.useCommitInputAsStashMessage": false,

	// Controls whether force pushing uses the safer force-with-lease variant.
	"git.useForcePushWithLease": true,

	// Controls whether to enable automatic GitHub authentication for git commands within VS Code.
	"github.gitAuthentication": true,

	// URI of your GitHub Enterprise Instance
	"github-enterprise.uri": "",

	// Controls enablement of Grunt task detection. Grunt task detection can cause files in any open workspace to be executed.
	"grunt.autoDetect": "off",

	// Controls enablement of Gulp task detection. Gulp task detection can cause files in any open workspace to be executed.
	"gulp.autoDetect": "off",

	// Controls enablement of Jake task detection. Jake task detection can cause files in any open workspace to be executed.
	"jake.autoDetect": "off",

	// Enable/disable rendering math in the built-in Markdown preview.
	"markdown.math.enabled": true,

	// Whether to automatically navigate to the next merge conflict after resolving a merge conflict.
	"merge-conflict.autoNavigateNextConflict.enabled": false,

	// Create a CodeLens for merge conflict blocks within editor.
	"merge-conflict.codeLens.enabled": true,

	// Create decorators for merge conflict blocks within editor.
	"merge-conflict.decorators.enabled": true,

	// Controls where the diff view should be opened when comparing changes in merge conflicts.
	//  - Current: Open the diff view in the current editor group.
	//  - Beside: Open the diff view next to the current editor group.
	//  - Below: Open the diff view below the current editor group.
	"merge-conflict.diffViewPosition": "Current",

	// Configures which processes to automatically attach and debug when `debug.node.autoAttach` is on. A Node process launched with the `--inspect` flag will always be attached to, regardless of this setting.
	//  - always: Auto attach to every Node.js process launched in the terminal.
	//  - smart: Auto attach when running scripts that aren't in a node_modules folder.
	//  - onlyWithFlag: Only auto attach when the `--inspect` is given.
	//  - disabled: Auto attach is disabled and not shown in status bar.
	"debug.javascript.autoAttachFilter": "disabled",

	// Configures glob patterns for determining when to attach in "smart" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners. [Read more on the VS Code docs](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-smart-patterns).
	"debug.javascript.autoAttachSmartPattern": [
		"${workspaceFolder}/**",
		"!**/node_modules/**",
		"**/$KNOWN_TOOLS$/**"
	],

	// Configures whether property getters will be expanded automatically. If this is false, the getter will appear as `get propertyName` and will only be evaluated when you click on it.
	"debug.javascript.autoExpandGetters": false,

	// When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.
	"debug.javascript.automaticallyTunnelRemoteServer": true,

	// Whether to stop when conditional breakpoints throw an error.
	"debug.javascript.breakOnConditionalError": false,

	// Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".
	"debug.javascript.codelens.npmScripts": "top",

	// Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to "off" to disable this behavior, or "always" to enable debugging in all terminals.
	"debug.javascript.debugByLinkOptions": "on",

	// The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.
	"debug.javascript.defaultRuntimeExecutable": {
		"pwa-node": "node"
	},

	// Default options used when debugging a process through the `Debug: Attach to Node.js Process` command
	"debug.javascript.pickAndAttachOptions": {},

	// Request options to use when loading resources, such as source maps, in the debugger. You may need to configure this if your sourcemaps require authentication or use a self-signed certificate, for instance. Options are used to create a request using the [`got`](https://github.com/sindresorhus/got) library.
	// 
	// A common case to disable certificate verification can be done by passing `{ "https": { "rejectUnauthorized": false } }`.
	"debug.javascript.resourceRequestOptions": {},

	// Whether to suggest pretty printing JavaScript code that looks minified when you step into it.
	"debug.javascript.suggestPrettyPrinting": true,

	// Default launch options for the JavaScript debug terminal and npm scripts.
	"debug.javascript.terminalOptions": {},

	// Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.
	"debug.javascript.unmapMissingSources": false,

	// Controls whether 'Peek References' or 'Find References' is invoked when selecting code lens references
	//  - peek: Show references in peek editor.
	//  - view: Show references in separate view.
	"references.preferredLocation": "peek",

	// Controls whether npm scripts should be automatically detected.
	"npm.autoDetect": "on",

	// Enable running npm scripts contained in a folder from the Explorer context menu.
	"npm.enableRunFromFolder": false,

	// The NPM Script Explorer is now available in 'Views' menu in the Explorer in all folders.
	// Enable an explorer view for npm scripts when there is no top-level 'package.json' file.
	"npm.enableScriptExplorer": false,

	// Configure glob patterns for folders that should be excluded from automatic script detection.
	"npm.exclude": "",

	// Fetch data from https://registry.npmjs.org and https://registry.bower.io to provide auto-completion and information on hover features on npm dependencies.
	"npm.fetchOnlinePackageInfo": true,

	// The package manager used to run scripts.
	//  - auto: Auto-detect which package manager to use for running scripts based on lock files and installed package managers.
	//  - npm: Use npm as the package manager for running scripts.
	//  - yarn: Use yarn as the package manager for running scripts.
	//  - pnpm: Use pnpm as the package manager for running scripts.
	"npm.packageManager": "auto",

	// Run npm commands with the `--silent` option.
	"npm.runSilent": false,

	// The default click action used in the npm scripts explorer: `open` or `run`, the default is `open`.
	"npm.scriptExplorerAction": "open",

	// An array of regular expressions that indicate which scripts should be excluded from the NPM Scripts view.
	"npm.scriptExplorerExclude": [],

	// Enable/disable the floating indicator that shows when focused in the simple browser.
	"simpleBrowser.focusLockIndicator.enabled": true,

	// Whether the plaintext comment highlighter should be active
	"better-comments.highlightPlainText": false,

	// Whether the multiline comment highlighter should be active
	"better-comments.multilineComments": true,

	// Tags which are used to color the comments. Changes require a restart of VS Code to take effect
	"better-comments.tags": [
		{
			"tag": "!",
			"color": "#FF2D00",
			"strikethrough": false,
			"underline": false,
			"backgroundColor": "transparent",
			"bold": false,
			"italic": false
		},
		{
			"tag": "?",
			"color": "#3498DB",
			"strikethrough": false,
			"underline": false,
			"backgroundColor": "transparent",
			"bold": false,
			"italic": false
		},
		{
			"tag": "//",
			"color": "#474747",
			"strikethrough": true,
			"underline": false,
			"backgroundColor": "transparent",
			"bold": false,
			"italic": false
		},
		{
			"tag": "todo",
			"color": "#FF8C00",
			"strikethrough": false,
			"underline": false,
			"backgroundColor": "transparent",
			"bold": false,
			"italic": false
		},
		{
			"tag": "*",
			"color": "#98C379",
			"strikethrough": false,
			"underline": false,
			"backgroundColor": "transparent",
			"bold": false,
			"italic": false
		}
	],

	// File extensions for header files
	"include-autocomplete.extensions": [
		"",
		".h",
		".hpp",
		".hxx"
	],

	// Use `bookmarks.lineBackground` in `workbench.colorCustomizations` instead
	// Background color of the decoration. Use rgba() and define transparent background colors to play well with other decorations. Ex.: rgba(21, 126, 251, 0.1)
	"bookmarks.backgroundLineColor": "",

	// Experimental. Enables the new Sticky engine with support for Formatters, improved source change detections and undo operations
	"bookmarks.experimental.enableNewStickyEngine": true,

	// Path to another image to be presented as Bookmark
	"bookmarks.gutterIconPath": "",

	// Specifies how labels are suggested when creating bookmarks
	//  - dontUse: Don't use the selection (original behavior)
	//  - useWhenSelected: Use the selected text (if available) directly, no confirmation required
	//  - suggestWhenSelected: Suggests the selected text (if available). You still need to confirm.
	//  - suggestWhenSelectedOrLineWhenNoSelected: Suggests the selected text (if available) or the entire line (when has no selection). You still need to confirm.
	"bookmarks.label.suggestion": "dontUse",

	// Specifies how multi cursor handles already bookmarked lines
	//  - allLinesAtOnce: Creates bookmarks in all selected lines at once, if at least one of the lines don't have a bookmark
	//  - eachLineIndependently: Literally toggles a bookmark in each line, instead of making all lines equal
	"bookmarks.multicursor.toggleMode": "allLinesAtOnce",

	// Allow navigation look for bookmarks in all files in the project, instead of only the current
	"bookmarks.navigateThroughAllFiles": true,

	// Allow bookmarks to be saved (and restored) locally in the opened Project/Folder instead of VS Code
	"bookmarks.saveBookmarksInProject": false,

	// Specifies whether Bookmarks commands are displayed on the context menu
	"bookmarks.showCommandsInContextMenu": true,

	// Specifies whether a notification will be shown when attempting to navigate between bookmarks when no more exist.
	"bookmarks.showNoMoreBookmarksWarning": true,

	// Specifies whether the Side Bar show be displayed expanded
	"bookmarks.sideBar.expanded": false,

	// Use a workaround for formatters like Prettier, which does not notify on document changes and messes Bookmark's Sticky behavior
	"bookmarks.useWorkaroundForFormatters": false,

	// Allow navigation to wrap around at the first and last bookmarks in scope (current file or all files)
	"bookmarks.wrapNavigation": true,

	// Indicates the base folders to search for any folder projects
	"projectManager.any.baseFolders": [],

	// Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
	"projectManager.any.ignoredFolders": [
		"node_modules",
		"out",
		"typings",
		"test"
	],

	// Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
	"projectManager.any.maxDepthRecursion": 4,

	// Should cache the VSCode, Git and SVN projects found?
	"projectManager.cacheProjectsBetweenSessions": true,

	// Should check for invalid paths before listing, showing a message below the project name?
	"projectManager.checkInvalidPathsBeforeListing": true,

	// Should filter projects through full path?
	"projectManager.filterOnFullPath": false,

	// Indicates the base folders to search for Git projects
	"projectManager.git.baseFolders": [],

	// Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
	"projectManager.git.ignoredFolders": [
		"node_modules",
		"out",
		"typings",
		"test",
		".haxelib"
	],

	// Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
	"projectManager.git.maxDepthRecursion": 4,

	// List the projects grouped by...(Favorites, VSCode, Git, Mercurial and SVN)
	"projectManager.groupList": false,

	// Indicates the base folders to search for Mercurial projects
	"projectManager.hg.baseFolders": [],

	// Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
	"projectManager.hg.ignoredFolders": [
		"node_modules",
		"out",
		"typings",
		"test",
		".haxelib"
	],

	// Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
	"projectManager.hg.maxDepthRecursion": 4,

	// Should ignore projects found inside other projects?
	"projectManager.ignoreProjectsWithinProjects": false,

	// Indicates if the New Window command open the project in current window, when empty.
	//  - always: Whenever you call the Open in New Window command, it will open in the current window, if empty
	//  - onlyUsingCommandPalette: Only open in the current window if you use the Command Palette
	//  - onlyUsingSideBar: Only open in the current window if you use the Side Bar
	//  - never: Works as today. The Open in New Window command will always open in New Window
	"projectManager.openInCurrenWindowIfEmpty": "always",

	// Should the project be opened using a New Window when you click the Status Bar?
	"projectManager.openInNewWindowWhenClickingInStatusBar": false,

	// Indicates an alternative location where the `projects.json` file is stored
	"projectManager.projectsLocation": "",

	// Should the current project be hidden in the list of available projects?
	"projectManager.removeCurrentProjectFromList": true,

	// Should show the parent folder info when projects with same name are detected?
	"projectManager.showParentFolderInfoOnDuplicates": false,

	// Should display the project name in the Status Bar?
	"projectManager.showProjectNameInStatusBar": true,

	// List the projects sorted by...(Saved, Name, Path or Recent)
	"projectManager.sortList": "Name",

	// Indicates the base folders to search for SVN projects
	"projectManager.svn.baseFolders": [],

	// Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
	"projectManager.svn.ignoredFolders": [
		"node_modules",
		"out",
		"typings",
		"test"
	],

	// Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
	"projectManager.svn.maxDepthRecursion": 4,

	// Indicates the list of tags you can use to organize your projects
	"projectManager.tags": [
		"Personal",
		"Work"
	],

	// Indicates the base folders to search for VSCode projects
	"projectManager.vscode.baseFolders": [],

	// Indicates folders to be ignored, like "node_modules", "out", "typings", "test"
	"projectManager.vscode.ignoredFolders": [
		"node_modules",
		"out",
		"typings",
		"test"
	],

	// Indicates the maximum depth of folder recursion to search for projects. Any value below 1 means there is no limit
	"projectManager.vscode.maxDepthRecursion": 4,

	// Enabled Iconify inline annotations
	"iconify.annotations": true,

	// Icon color hex for inline displaying
	"iconify.color": "auto",

	// DEPREACTED, use `iconify.delimiters` instead
	// Delimiter for separating between collection id and icon id
	"iconify.delimiter": ":",

	// Delimiters for separating between collection id and icon id
	"iconify.delimiters": [
		":",
		"-",
		"/"
	],

	// Collection IDs to be excluded for detection
	"iconify.excludes": null,

	// Collection IDs to be included for detection
	"iconify.includes": null,

	// Use icon graph to replace the icon name.
	"iconify.inplace": true,

	// Array of language IDs to enable annotations
	"iconify.languageIds": [
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact",
		"vue",
		"svelte",
		"html",
		"pug",
		"json",
		"yaml"
	],

	// Cycles through open documents on launch to enable autocomplete to include those documents on restore. (VSCode Issue#15178)
	"AllAutocomplete.cycleOpenDocumentsOnLaunch": false,

	// Disable special handling for 
	"AllAutocomplete.disableNumberHandling": false,

	// Forces all languages to not show up words from the same language. This removes All AutoComplete for the same language files. Useful if relying on the language server and need to use all autocomplete only across languages. Equivalent to putting all languages in AllAutocomplete.nonContributingToSelfLanguages
	"AllAutocomplete.dontContributeToSelf": false,

	// Glob pattern for files to exclude from autocomplete search.
	"AllAutocomplete.excludeFiles": "**/*.+(git|rendered)",

	// Words to ignore(separated by AllAutocomplete.whitespace) from autocomplete.
	"AllAutocomplete.ignoredWords": "",

	// Language specific special characters that can be a part of autocompletion(that can fit with all strings)
	"AllAutocomplete.languageSpecialCharacters": {
		"css": "^[\\.#]",
		"scss": "^[\\.#]",
		"csv": "^[\\: ]"
	},

	// Language specific settings for the whitespace splitter
	"AllAutocomplete.languageWhitespace": {
		"ruby": "[^\\w\\-_\\$:\\u0080-\\uFFFF]+",
		"javascript": "[^\\w_\\$\\u0080-\\uFFFF]+",
		"javascriptreact": "[^\\w_\\-\\$\\@\\u0080-\\uFFFF]+",
		"typescript": "[^\\w_\\-\\$\\@\\u0080-\\uFFFF]+",
		"php": "[^\\w_\\$\\u0080-\\uFFFF]+",
		"css": "[^\\w\\-_\\$\\u0080-\\uFFFF]+",
		"scss": "[^\\w\\-_\\$\\@\\u0080-\\uFFFF]+",
		"html": "[^\\w\\-_\\$\\u0080-\\uFFFF]+",
		"python": "[^\\w\\-_\\u0080-\\uFFFF]+",
		"elm": "[^\\w\\-_\\u0080-\\uFFFF]+",
		"cpp": "[^\\w_\\u0080-\\uFFFF]+",
		"csv": "[^\\w_\\u0080-\\uFFFF \\:]+"
	},

	// All Autocomplete: Maximum number of items sent for autocomplete in a single API call.
	"AllAutocomplete.maxItemsInSingleList": 999,

	// All Autocomplete: Maximum number of lines to read from a file.
	"AllAutocomplete.maxLines": 9999,

	// All Autocomplete: Minimum word length to keep in autocomplete list.
	"AllAutocomplete.minWordLength": 3,

	// List of languages that do not supply word lists but can consume words from All Autocomplete.
	"AllAutocomplete.nonContributingLanguages": [],

	// List of languages that do not supply word lists to the files of the same language but can consume words from All Autocomplete as well as supply word lists to other files.
	"AllAutocomplete.nonContributingToSelfLanguages": [],

	// Show results from the current document in the autocomplete results(Disable to improve performance).
	"AllAutocomplete.showCurrentDocument": true,

	// Show results from the other open document in the autocomplete results(Disable to have results only from the current document if showCurrentDocument is true).
	"AllAutocomplete.showOpenDocuments": true,

	// Do not update the autocomplete list unless the document is saved.
	"AllAutocomplete.updateOnlyOnSave": false,

	// All Autocomplete: Regex to use for splitting whitespace
	"AllAutocomplete.whitespace": "[^\\w\\-_\\$\\u0080-\\uFFFF]+",

	// List of files to initialize the word list from. These files behave as if they are always open. Expects an absolute path. Can work with relative path if the workspace contains a single folder.
	"AllAutocomplete.wordListFiles": [],

	// Activates the i18n features for snippets (eg.: _(""))
	"django.i18n": true,

	// Seldom show notifications about this extension
	"django.showContributeNotification": true,

	// Exclude Python snippets by their file name. Can be 'import', 'postgres'...
	"django.snippets.exclude": [
		"cms",
		"wagtail"
	],

	// Activates the Python snippets
	"django.snippets.use": true,

	// Gain insight into the validation process via a popup window in the lower right corner.
	"webvalidator.showPopup": true,

	// Start the validation of a compatible file when you save it
	"webvalidator.validateOnSave": false,

	// Whether standard-format should format code on save
	"standardFormat.formatOnSave": false,

	// For import command. The declaration type used for require()
	"npm-intellisense.importDeclarationType": "const",

	// For import command. Use import statements instead of require()
	"npm-intellisense.importES6": true,

	// For import command. The linebreak used after the snippet
	"npm-intellisense.importLinebreak": ";\r\n",

	// For import command. The type of quotes to use in the snippet
	"npm-intellisense.importQuotes": "'",

	// (experimental) Enables path intellisense in subfolders of modules
	"npm-intellisense.packageSubfoldersIntellisense": false,

	// Look for package.json inside nearest directory instead of workspace root
	"npm-intellisense.recursivePackageJsonLookup": true,

	// Scans devDependencies as well
	"npm-intellisense.scanDevDependencies": false,

	// shows build in node modules like 'path' of 'fs'
	"npm-intellisense.showBuildInLibs": false,

	// Sets an absolute path to the current workspace
	"path-intellisense.absolutePathToWorkspace": true,

	// Automatically adds slash after directory
	"path-intellisense.autoSlashAfterDirectory": false,

	// Adds the file extension to a import statements
	"path-intellisense.extensionOnImport": false,

	// Mappings for paths
	"path-intellisense.mappings": {},

	// Show hidden files
	"path-intellisense.showHiddenFiles": false,

	// Whether to enabled mark, default: false
	"cssrem.addMark": false,

	// Automatically remove prefix 0, default: true
	"cssrem.autoRemovePrefixZero": true,

	// Px to rem decimal point maximum length, default: 6
	"cssrem.fixedDigits": 6,

	// Whether to enable display conversion data on hover, default: true
	//  - disabled: Disabled
	//  - always: Anything, whether converted by the plug-in or not, will be displayed
	//  - onlyMark: Only valid when `cssrem.addMark` is `true`
	"cssrem.hover": "onlyMark",

	// Ignore file list, like this: `[ 'demo.less', 'src' ]`
	"cssrem.ingores": [],

	// Ignores `px` to `rem` when trigger command, can be set `[ "1px", "0.5px" ]`, default: []
	"cssrem.ingoresViaCommand": [],

	// Support language list, default: `[ 'html', 'vue', 'css', 'postcss', 'less', 'scss', 'sass', 'stylus', 'javascriptreact', 'typescriptreact' ]`
	"cssrem.languages": [],

	// root font-size (unit: px), default: 16
	"cssrem.rootFontSize": 16,

	// Whether to enable WXSS support
	"cssrem.wxss": false,

	// 设备分辨率宽度，官方推荐使用 iPhone6 作为视觉稿的标准，默认：`375`
	"cssrem.wxssDeviceWidth": 375,

	// 规定屏幕宽度，默认 `750`，[尺寸单位](https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html)
	"cssrem.wxssScreenWidth": 750,

	// CSS for the active scope. Use {color} to match the bracket color. The string types listed at https://code.visualstudio.com/docs/extensionAPI/vscode-api#DecorationRenderOptions can be used
	"bracketPairColorizer.activeScopeCSS": [
		"borderStyle : solid",
		"borderWidth : 1px",
		"borderColor : {color}; opacity: 0.5"
	],

	// Should different brackets share a color group (Consecutive), or use their own color group (Independent)
	"bracketPairColorizer.colorMode": "Consecutive",

	// Define paired characters and their shared color group
	"bracketPairColorizer.consecutivePairColors": [
		"()",
		"[]",
		"{}",
		[
			"Gold",
			"Orchid",
			"LightSkyBlue"
		],
		"Red"
	],

	// Don't colorize files of these languages
	"bracketPairColorizer.excludedLanguages": [],

	// Should opening brackets iterate the color cycle even if they are not nested
	"bracketPairColorizer.forceIterationColorCycle": false,

	// Ensure that an opening brackets color does not match a previous brackets color
	"bracketPairColorizer.forceUniqueOpeningColor": false,

	// Should the active scope brackets always be highlighted? Recommended to disable editor.matchBrackets if using this feature.
	"bracketPairColorizer.highlightActiveScope": false,

	// Define paired characters and their color groups
	"bracketPairColorizer.independentPairColors": [
		[
			"()",
			[
				"Gold",
				"Orchid",
				"LightSkyBlue"
			],
			"Red"
		],
		[
			"[]",
			[
				"Gold",
				"Orchid",
				"LightSkyBlue"
			],
			"Red"
		],
		[
			"{}",
			[
				"Gold",
				"Orchid",
				"LightSkyBlue"
			],
			"Red"
		]
	],

	// Show active bracket scope in ruler?
	"bracketPairColorizer.rulerPosition": "Center",

	// CSS for the scope line. Use {color} to match the bracket color. The string types listed at https://code.visualstudio.com/docs/extensionAPI/vscode-api#DecorationRenderOptions can be used
	"bracketPairColorizer.scopeLineCSS": [
		"borderStyle : solid",
		"borderWidth : 1px",
		"borderColor : {color}; opacity: 0.5"
	],

	// True: Scope Line will start from the ending bracket position. False: Scope Line will always be at column 0
	"bracketPairColorizer.scopeLineRelativePosition": true,

	// Show active bracket scope in gutter?
	"bracketPairColorizer.showBracketsInGutter": false,

	// Show active bracket scope in ruler?
	"bracketPairColorizer.showBracketsInRuler": false,

	// Show a horizontal line to create a block around the active bracket scope?
	"bracketPairColorizer.showHorizontalScopeLine": true,

	// Show a vertical line on the left side of the editor representing the active bracket scope?
	"bracketPairColorizer.showVerticalScopeLine": true,

	// How long the user should idle for, before the document is colorized. Set to 0 to disable
	"bracketPairColorizer.timeOut": 200,

	// CSS for the active scope. Use {color} to match the bracket color. The string types listed at https://code.visualstudio.com/docs/extensionAPI/vscode-api#DecorationRenderOptions can be used
	"bracket-pair-colorizer-2.activeScopeCSS": [
		"borderStyle : solid",
		"borderWidth : 1px",
		"borderColor : {color}",
		"opacity: 0.5"
	],

	// Should different brackets share a color group (Consecutive), or use their own color group (Independent)
	"bracket-pair-colorizer-2.colorMode": "Consecutive",

	// Scope colors
	"bracket-pair-colorizer-2.colors": [
		"Gold",
		"Orchid",
		"LightSkyBlue"
	],

	// Don't colorize files of these languages
	"bracket-pair-colorizer-2.excludedLanguages": [],

	// Should opening brackets iterate the color cycle even if they are not nested
	"bracket-pair-colorizer-2.forceIterationColorCycle": false,

	// Ensure that an opening brackets color does not match a previous brackets color
	"bracket-pair-colorizer-2.forceUniqueOpeningColor": false,

	// Should the active scope brackets always be highlighted? Recommended to disable editor.matchBrackets if using this feature.
	"bracket-pair-colorizer-2.highlightActiveScope": false,

	// Show active bracket scope in ruler?
	"bracket-pair-colorizer-2.rulerPosition": "Center",

	// CSS for the scope line. Use {color} to match the bracket color. The string types listed at https://code.visualstudio.com/docs/extensionAPI/vscode-api#DecorationRenderOptions can be used
	"bracket-pair-colorizer-2.scopeLineCSS": [
		"borderStyle : solid",
		"borderWidth : 1px",
		"borderColor : {color}",
		"opacity: 0.5"
	],

	// True: Scope Line will start from the ending bracket position. False: Scope Line will always be at column 0
	"bracket-pair-colorizer-2.scopeLineRelativePosition": true,

	// Show active bracket scope in gutter?
	"bracket-pair-colorizer-2.showBracketsInGutter": false,

	// Show active bracket scope in ruler?
	"bracket-pair-colorizer-2.showBracketsInRuler": false,

	// Show a horizontal line to create a block around the active bracket scope?
	"bracket-pair-colorizer-2.showHorizontalScopeLine": true,

	// Show a vertical line on the left side of the editor representing the active bracket scope?
	"bracket-pair-colorizer-2.showVerticalScopeLine": true,

	// Unmatched Scope Color
	"bracket-pair-colorizer-2.unmatchedScopeColor": "Red",

	// The prefix that is used for each comment line except for first and last.
	"doxdocgen.c.commentPrefix": " * ",

	// Smart text snippet for factory methods/functions.
	"doxdocgen.c.factoryMethodText": "Create a {name} object",

	// The first line of the comment that gets generated. If empty it won't get generated at all.
	"doxdocgen.c.firstLine": "/**",

	// Smart text snippet for getters.
	"doxdocgen.c.getterText": "Get the {name} object",

	// The last line of the comment that gets generated. If empty it won't get generated at all.
	"doxdocgen.c.lastLine": " */",

	// Smart text snippet for setters.
	"doxdocgen.c.setterText": "Set the {name} object",

	// Doxygen comment trigger. This character sequence triggers generation of Doxygen comments.
	"doxdocgen.c.triggerSequence": "/**",

	// Smart text snippet for constructors.
	"doxdocgen.cpp.ctorText": "Construct a new {name} object",

	// Smart text snippet for destructors.
	"doxdocgen.cpp.dtorText": "Destroy the {name} object",

	// The template of the template parameter Doxygen line(s) that are generated. If empty it won't get generated at all.
	"doxdocgen.cpp.tparamTemplate": "@tparam {param} ",

	// File copyright documentation tag.  Array of strings will be converted to one line per element. Can template `{year}`.
	"doxdocgen.file.copyrightTag": [
		"@copyright Copyright (c) {year}"
	],

	// Additional file documentation.  Array of strings will be converted to one line per element. Can template `{year}`, `{date}`, `{author}`, `{email}` and `{file}`. You have to specify the prefix.
	"doxdocgen.file.customTag": [],

	// The order to use for the file comment. Values can be used multiple times. Valid values are `file`, `author`, `brief`, `version`, `date`, `empty`, `copyright` and `custom`.
	"doxdocgen.file.fileOrder": [
		"file",
		"author",
		"brief",
		"version",
		"date",
		"empty",
		"copyright",
		"empty",
		"custom"
	],

	// The template for the file parameter in Doxygen.
	"doxdocgen.file.fileTemplate": "@file {name}",

	// Version number for the file.
	"doxdocgen.file.versionTag": "@version 0.1",

	// Set the e-mail address of the author.  Replaces `{email}`.
	"doxdocgen.generic.authorEmail": "you@domain.com",

	// Set the name of the author.  Replaces `{author}`.
	"doxdocgen.generic.authorName": "your name",

	// Set the style of the author tag and your name.  Can template `{author}` and `{email}`.
	"doxdocgen.generic.authorTag": "@author {author} ({email})",

	// If this is enabled, the documentation for a `bool` return value will be split into `true` and `false` entries.
	"doxdocgen.generic.boolReturnsTrueFalse": true,

	// The template of the brief Doxygen line that is generated. If empty it won't get generated at all.
	"doxdocgen.generic.briefTemplate": "@brief {text}",

	// Provide intellisense and snippet for doxygen commands
	"doxdocgen.generic.commandSuggestion": true,

	// Add `\` in doxygen command suggestion for better readbility (need to enable commandSuggestion)
	"doxdocgen.generic.commandSuggestionAddPrefix": false,

	// Custom tags to be added to the generic order. One tag per line will be added. Can template `{year}`, `{date}`, `{author}`, `{email}` and `{file}`. You have to specify the prefix.
	"doxdocgen.generic.customTags": [],

	// The format to use for the date.
	"doxdocgen.generic.dateFormat": "YYYY-MM-DD",

	// The template for the date parameter in Doxygen.
	"doxdocgen.generic.dateTemplate": "@date {date}",

	// Array of keywords that should be removed from the input prior to parsing.
	"doxdocgen.generic.filteredKeywords": [],

	// Decide if you want to get smart text for certain commands.
	"doxdocgen.generic.generateSmartText": true,

	// Whether include type information at return.
	"doxdocgen.generic.includeTypeAtReturn": true,

	// How many lines the plugin should look for to find the end of the declaration. Please be aware that setting this value too low could improve the speed of comment generation by a very slim margin but the plugin also may not correctly detect all declarations or definitions anymore.
	"doxdocgen.generic.linesToGet": 20,

	// The order to use for the comment generation. Values can be used multiple times. Valid values are `brief`, `empty`, `tparam`, `param`, `return`, `custom`, `author`, `date`, `version` and `copyright`.
	"doxdocgen.generic.order": [
		"brief",
		"empty",
		"tparam",
		"param",
		"return",
		"custom"
	],

	// The template of the param Doxygen line(s) that are generated. If empty it won't get generated at all.
	"doxdocgen.generic.paramTemplate": "@param {param} ",

	// The template of the return Doxygen line that is generated. If empty it won't get generated at all.
	"doxdocgen.generic.returnTemplate": "@return {type} ",

	// Decide if the values put into `{name}` should be split according to their casing.
	"doxdocgen.generic.splitCasingSmartText": true,

	// Substitute `{email}` with `git config --get user.email`.
	"doxdocgen.generic.useGitUserEmail": false,

	// Substitute `{author}` with `git config --get user.name`.
	"doxdocgen.generic.useGitUserName": false,

	// The C compiler path (e.g: /usr/bin/gcc or C:\MinGW\bin\gcc.exe)
	"c-cpp-compile-run.c-compiler": "gcc",

	// The C flags: e.g. -Wall. default: -Wall -Wextra
	"c-cpp-compile-run.c-flags": "-Wall -Wextra",

	// The Cpp compiler path (e.g: /usr/bin/g++ or C:\MinGW\bin\g++.exe)
	"c-cpp-compile-run.cpp-compiler": "g++",

	// The Cpp flags: e.g. -Wall. default: -Wall -Wextra
	"c-cpp-compile-run.cpp-flags": "-Wall -Wextra",

	// Where output file should be located
	"c-cpp-compile-run.output-location": "",

	// Whether should run in an external terminal
	"c-cpp-compile-run.run-args": "",

	// Whether should run in an external terminal
	"c-cpp-compile-run.run-in-external-terminal": false,

	// Whether should save the file before compiling
	"c-cpp-compile-run.save-before-compile": true,

	// Whether should show notifications
	"c-cpp-compile-run.should-show-notifications": true,

	// Additional file extensions that should be analyzed (usually used in combination with analyzer plugins).
	"dart.additionalAnalyzerFileExtensions": [],

	// Whether to send analytics such as startup timings, frequency of use of features and analysis server crashes.
	"dart.allowAnalytics": true,

	// Whether to consider files ending `_test.dart` that are outside of the test directory as tests. This should be enabled if you put tests inside the `lib` directory of your Flutter app so they will be run with `flutter test` and not `flutter run`.
	"dart.allowTestsOutsideTestFolder": false,

	// An array of paths to be excluded from Dart analysis. This option should usually be set at the Workspace level. Excluded folders will also be ignored when detecting project types.
	"dart.analysisExcludedFolders": [],

	// Whether to use folding data from the Dart analysis server instead of the built-in VS Code indent-based folding.
	"dart.analysisServerFolding": true,

	// Whether to enable analysis for AngularDart templates (requires the Angular analyzer plugin to be enabled in `analysis_options.yaml`).
	"dart.analyzeAngularTemplates": true,

	// Additional arguments to pass to the Dart analysis server.
	"dart.analyzerAdditionalArgs": [],

	// The port number to be used for the Dart analyzer diagnostic server.
	"dart.analyzerDiagnosticsPort": null,

	// The path to a log file for very detailed logging in the Dart analysis server that may be useful when trying to diagnose analysis server issues.
	"dart.analyzerInstrumentationLogFile": null,

	// The path to a log file for communication between Dart Code and the analysis server.
	"dart.analyzerLogFile": null,

	// The path to a custom Dart analysis server.
	"dart.analyzerPath": null,

	// An SSH host to run the analysis server.
	// This can be useful when modifying code on a remote machine using SSHFS.
	"dart.analyzerSshHost": null,

	// The port number to be used for the Dart analysis server VM service.
	"dart.analyzerVmServicePort": null,

	// Whether to include symbols that have not been imported in the code completion list and automatically insert the required import when selecting them (requires restart).
	"dart.autoImportCompletions": true,

	// Determines when to insert comment slashes when pressing `<enter>` in the editor (requires restart).
	// 
	// When using `tripleSlash`, double-slashes will still be included when breaking existing double-slash comments across additional lines.
	//  - none: Never insert slashes automatically
	//  - tripleSlash: Insert `///` when pressing `<enter>` at the end of a triple-slash comment
	//  - all: Insert `///` when pressing `<enter>` at the end of a triple-slash comment and also `//` when pressing `<enter>` at the end of a double-slash comment
	"dart.automaticCommentSlashes": "tripleSlash",

	// Additional args to pass to the `build_runner` when building/watching/serving.
	"dart.buildRunnerAdditionalArgs": [],

	// Whether to check you are using the latest version of the Dart SDK at startup.
	"dart.checkForSdkUpdates": true,

	// Whether to run Dart CLI apps in the Debug Console or a terminal. The Debug Console has more functionality because the process is controlled by the debug adapter, but is unable to accept input from the user via stdin.
	//  - debugConsole: Run in the Debug Console pane, using the input as a REPL to evaluate expressions
	//  - terminal: Run in the VS Code integrated terminal where input will be sent to stdin
	//  - externalTerminal: Run in an external terminal where input will be sent to stdin
	"dart.cliConsole": "debugConsole",

	// Whether to show annotations against constructor, method invocations and lists that span multiple lines.
	"dart.closingLabels": true,

	// Whether to insert parentheses and placeholders for positional and required arguments during code completions when using LSP. This feature is automatically disabled if commit characters are enabled.
	"dart.completeFunctionCalls": true,

	// The path to a log file for communication with the DAP debug adapters. This is useful when trying to diagnose issues with debugging such as missed breakpoints.
	"dart.dapLogFile": null,

	// The protocol to use for the Dart Debug Extension backend service and injected client. Using WebSockets can improve performance but may fail when connecting through some proxy servers.
	//  - sse: Server-Sent Events
	//  - ws: WebSockets
	"dart.debugExtensionBackendProtocol": "ws",

	// Whether to mark external pub package libraries (including `package:flutter`) as debuggable, enabling stepping into them while debugging.
	"dart.debugExternalPackageLibraries": false,

	// Whether to mark Dart SDK libraries (`dart:*`) as debuggable, enabling stepping into them while debugging.
	"dart.debugSdkLibraries": false,

	// Whether to launch external DevTools windows using Chrome or the system default browser.
	//  - chrome: Locate and launch Google Chrome from your system
	//  - default: Use your systems default web browser
	"dart.devToolsBrowser": "chrome",

	// The path to a low-traffic log file for the Dart DevTools service.
	"dart.devToolsLogFile": null,

	// The port number to be used for the Dart DevTools.
	"dart.devToolsPort": null,

	// Whether to try to reuse existing DevTools windows instead of launching new ones. Only works for instances of DevTools launched by the DevTools server on the local machine.
	"dart.devToolsReuseWindows": true,

	// The theme to use for Dart DevTools.
	"dart.devToolsTheme": "dark",

	// An array of glob patterns that should be excluded for formatting. The pattern is matched against the absolute path of the file. Use `**/test/**` to skip formatting for all test directories.
	"dart.doNotFormat": [],

	// Whether to load [Dart DevTools](https://dart.dev/tools/dart-devtools) embedded inside VS Code.
	"dart.embedDevTools": true,

	// Whether to automatically commit the selected completion item when pressing certain keys such as . , ( and [. This setting does not currently apply to LSP, see `dart.previewCommitCharacters`.
	"dart.enableCompletionCommitCharacters": false,

	// Whether to enable the [dart_style](https://pub.dev/packages/dart_style) formatter for Dart code.
	"dart.enableSdkFormatter": true,

	// This setting is currently unused and should be left set to 'false'. It will be updated and enabled by default in the future.
	"dart.enableServerSnippets": false,

	// Whether to include Dart and Flutter snippets in code completion.
	"dart.enableSnippets": true,

	// Additional environment variables to be added to all Dart/Flutter processes spawned by the Dart and Flutter extensions.
	"dart.env": {},

	// Whether to evaluate getters in order to display them in debug views (such as the Variables, Watch and Hovers views).
	"dart.evaluateGettersInDebugViews": true,

	// Whether to call toString() on objects when rendering them in debug views (such as the Variables, Watch and Hovers views). Only applies to views of 100 or fewer values for performance reasons.
	"dart.evaluateToStringInDebugViews": true,

	// The path to a low-traffic log file for basic extension and editor issues.
	"dart.extensionLogFile": null,

	// Whether to automatically run `adb connect 100.115.92.2:5555` when spawning the Flutter daemon when running on Chrome OS.
	"dart.flutterAdbConnectOnChromeOs": false,

	// Additional args to pass to all `flutter` commands including `flutter daemon`. Do not use this to pass arguments to your Flutter app, use the `args` field in a `launch.json` or the `dart.flutterRunAdditionalArgs` setting.
	"dart.flutterAdditionalArgs": [],

	// Additional args to pass to the `flutter attach` command. Using the `args` field in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.
	"dart.flutterAttachAdditionalArgs": [],

	// The programming language to use for Android apps when creating new projects using the 'Flutter: New Project' command.
	"dart.flutterCreateAndroidLanguage": "kotlin",

	// The programming language to use for iOS apps when creating new projects using the 'Flutter: New Project' command.
	"dart.flutterCreateIOSLanguage": "swift",

	// Whether to use offline mode when creating new projects with the 'Flutter: New Project' command.
	"dart.flutterCreateOffline": false,

	// The organization responsible for your new Flutter project, in reverse domain name notation (e.g. `com.google`). This string is used in Java package names and as prefix in the iOS bundle identifier when creating new projects using the 'Flutter: New Project' command.
	"dart.flutterCreateOrganization": null,

	// Custom emulators to show in the emulator list for easier launching. If IDs match existing emulators returned by Flutter, the custom emulators will override them.
	"dart.flutterCustomEmulators": [],

	// The path to a log file for the `flutter daemon` service, which provides information about connected devices to show in the status bar.
	"dart.flutterDaemonLogFile": null,

	// Whether to show Flutter icons and colors in the editor gutter.
	"dart.flutterGutterIcons": true,

	// Whether to automatically send a Hot Reload request during a debug session when saving files.
	//  - never: Do not reload when saving
	//  - always: Reload for all saves, manual or automatic
	//  - manual: Only reload for manual saves (requires pressing Save explicitly if using autosave)
	"dart.flutterHotReloadOnSave": "manual",

	// Whether to automatically send a Hot Restart request during a debug session when saving files if Hot Reload is not available but Hot Restart is.
	"dart.flutterHotRestartOnSave": true,

	// Whether to show the Flutter Outline tree in the sidebar.
	"dart.flutterOutline": true,

	// Additional args to pass to the `flutter run` command. Using the `args` field in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.
	"dart.flutterRunAdditionalArgs": [],

	// The path to a log file for `flutter run`, which is used to launch Flutter apps from VS Code. This is useful when trying to diagnose issues with apps launching (or failing to) on simulators and devices. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.flutterRunLogFile": null,

	// The path to a directory to save Flutter screenshots.
	"dart.flutterScreenshotPath": null,

	// The location of the Flutter SDK to use. If blank, Dart Code will attempt to find it from the project directory, `FLUTTER_ROOT` environment variable and the `PATH` environment variable.
	"dart.flutterSdkPath": null,

	// An array of paths that either directly point to a Flutter SDK or the parent directory of multiple Flutter SDKs. When set, the version number in the status bar can be used to quickly switch between SDKs.
	"dart.flutterSdkPaths": [],

	// Whether to set newly connected devices as the current device in Flutter projects.
	"dart.flutterSelectDeviceWhenConnected": true,

	// When to show the Flutter emulators. These are usually hidden for remote workspaces because it is usually not possible to see or interact with emulators in a remote session. If you are using remoting/containers in a way that you can interact with launched emulator processes, you may wish to set this to 'always'.
	//  - local: Only show for local workspaces
	//  - always: Always show, even for remote sessions
	"dart.flutterShowEmulators": "local",

	// When to show the Flutter headless web-server device. This requires using the Dart Debug extension for Chrome and is usually only used for remote environments where Chrome is not available such as browser/cloud-based IDEs (requires restart).
	//  - remote: Only show for remote workspaces (includes browser-based workspaces)
	//  - always: Always show, even for local sessions
	"dart.flutterShowWebServerDevice": "remote",

	// Whether to use Flutter's [structured error support](https://medium.com/flutter/improving-flutters-error-messages-e098513cecf9) for improved error display.
	"dart.flutterStructuredErrors": true,

	// Additional args to pass to the `flutter test` command. Using the `args` field in `launch.json` is usually better than this setting as this setting will apply to _all_ projects.
	"dart.flutterTestAdditionalArgs": [],

	// The path to a log file for `flutter test`, which is used to run unit tests from VS Code. This is useful when trying to diagnose issues with unit test executions. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.flutterTestLogFile": null,

	// Whether to pass `--track-widget-creation` to Flutter apps (required to support 'Inspect Widget'). This setting is always ignored when running in Profile or Release mode.
	"dart.flutterTrackWidgetCreation": true,

	// Sets the [Web renderer](https://flutter.dev/docs/development/tools/web-renderers) used for Flutter web apps.
	//  - auto: Allow Flutter to pick the best renderer based on the users device
	//  - html: Always use the HTML renderer
	//  - canvaskit: Always use the CanvasKit renderer
	"dart.flutterWebRenderer": "auto",

	// Determines how to display Hot Restart and Hot Reload progress.
	//  - notification: Hot reload progress will be shown in a toast notification
	//  - statusBar: Hot reload progress will be shown only in the status bar
	"dart.hotReloadProgress": "notification",

	// Whether to insert argument placeholders during code completions. This feature is automatically disabled when `enableCompletionCommitCharacters` is enabled.
	"dart.insertArgumentPlaceholders": true,

	// The maximum length of a line of code. This is used by the document formatter.
	"dart.lineLength": 80,

	// Whether to enable [Snippet support in LSP TextEdits](https://github.com/rust-analyzer/rust-analyzer/blob/979e788957ced1957ee9ac1da70fb97abf9fe2b1/docs/dev/lsp-extensions.md#snippet-textedit).
	"dart.lspSnippetTextEdits": true,

	// The maximum length of a line in the log file. Lines longer than this will be truncated and suffixed with an ellipsis.
	"dart.maxLogLineLength": 2000,

	// Whether to normalize file casings before sending them to the LSP server. This may fix issues with file_names lints not disappearing after renaming a file if the VS Code API continues to use the original casing.
	"dart.normalizeFileCasing": false,

	// Whether to show a notification the first few times an analysis server exception occurs.
	"dart.notifyAnalyzerErrors": true,

	// Whether to ignore workspace folders and perform analysis based on the open files, as if no workspace was open at all. This allows opening large folders without causing them to be completely analyzed.
	"dart.onlyAnalyzeProjectsWithOpenFiles": false,

	// Whether to automatically open DevTools at the start of a debug session. If embedded DevTools is enabled, this will launch the Widget Inspector embedded for Flutter projects, or launch DevTools externally in a browser for Dart projects.
	//  - never: Do not automatically launch DevTools when starting a debug session
	//  - flutter: Automatically launch DevTools when starting a Flutter debug session
	//  - always: Automatically launch DevTools when starting any debug session
	"dart.openDevTools": "never",

	// When to automatically switch focus to the test list (array to support multiple values).
	"dart.openTestView": [
		"testRunStart"
	],

	// EXPERIMENTAL: Whether to look for custom script definitions at `dart/config/intellij-plugins/flutter.json` in Bazel workspaces. Currently supported for macOS and Linux only.
	"dart.previewBazelWorkspaceCustomScripts": false,

	// EXPERIMENTAL: Whether to enable commit characters for the LSP server. In a future release, the dart.enableCompletionCommitCharacters setting will also apply to LSP.
	"dart.previewCommitCharacters": false,

	// EXPERIMENTAL: Whether to enable the [Flutter UI Guides preview](https://dartcode.org/releases/v3-1/#preview-flutter-ui-guides).
	"dart.previewFlutterUiGuides": false,

	// EXPERIMENTAL: Whether to enable custom tracking of Flutter UI guidelines (to hide some latency of waiting for the next Flutter Outline).
	"dart.previewFlutterUiGuidesCustomTracking": false,

	// Whether to perform hot reload on save based on a filesystem watcher for Dart files rather than using VS Code's `onDidSave` event. This allows reloads to trigger when external tools modify Dart source files.
	"dart.previewHotReloadOnSaveWatcher": false,

	// Whether to prompt to get packages when opening a project with out of date packages.
	"dart.promptToGetPackages": true,

	// Whether to prompt before running if there are errors in your project. Test scripts will be excluded from the check unless they're the script being run.
	"dart.promptToRunIfErrors": true,

	// Additional args to pass to all `pub` commands.
	"dart.pubAdditionalArgs": [],

	// The path to a log file for Dart test runs. This is useful when trying to diagnose issues with unit test executions. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.pubTestLogFile": null,

	// Whether to rename files when renaming classes with matching names (for example renaming 'class Person' inside 'person.dart'). If set to 'prompt', will ask each time before renaming. If set to 'always', the file will automatically be renamed. This setting requires using LSP and a Dart SDK of at least v2.15.
	"dart.renameFilesWithClasses": "never",

	// Whether to automatically run `pub get` whenever `pubspec.yaml` is saved.
	"dart.runPubGetOnPubspecChanges": true,

	// The location of the Dart SDK to use for analyzing and executing code. If blank, Dart Code will attempt to find it from the `PATH` environment variable. When editing a Flutter project, the version of Dart included in the Flutter SDK is used in preference.
	"dart.sdkPath": null,

	// An array of paths that either directly point to a Dart SDK or the parent directory of multiple Dart SDKs. When set, the version number in the status bar can be used to quickly switch between SDKs.
	"dart.sdkPaths": [],

	// Whether to eagerly run DevTools for Flutter workspaces and share the spawned server with `flutter run`.
	"dart.shareDevToolsWithFlutter": true,

	// Whether to show logs from the `dart:developer` `log()` function in the debug console.
	"dart.showDartDeveloperLogs": true,

	// Whether to show CodeLens actions in the editor for opening online DartPad samples.
	"dart.showDartPadSampleCodeLens": true,

	// Whether to show DevTools buttons in the Debug toolbar.
	"dart.showDevToolsDebugToolBarButtons": true,

	// Whether to show quick fixes for ignoring hints and lints.
	"dart.showIgnoreQuickFixes": true,

	// Whether to show notifications for widget errors that offer Inspect Widget links. This requires that the `dart.shareDevToolsWithFlutter` setting is also enabled.
	"dart.showInspectorNotificationsForWidgetErrors": true,

	// Whether to show CodeLens actions in the editor for quick running / debugging scripts with main functions.
	"dart.showMainCodeLens": true,

	// Whether to show skipped tests in the test tree.
	"dart.showSkippedTests": true,

	// Whether to show CodeLens actions in the editor for quick running / debugging tests.
	"dart.showTestCodeLens": true,

	// Whether to show TODOs in the Problems list.
	"dart.showTodos": true,

	// Whether to automatically trigger signature help when pressing keys such as , and (.
	"dart.triggerSignatureHelpAutomatically": false,

	// Whether to automatically update imports when moving or renaming files. Currently only supports single file moves / renames.
	"dart.updateImportsOnRename": true,

	// Whether to run the analyzer in [LSP mode](https://microsoft.github.io/language-server-protocol/). Some features are not supported if this setting is disabled and in a future release LSP will be the only supported option.
	"dart.useLsp": true,

	// Whether to use the built-in VS Code test runner. Otherwises uses the legacy custom test runner.
	"dart.useVsCodeTestRunner": true,

	// Additional args to pass to the Dart VM when running/debugging command line apps.
	"dart.vmAdditionalArgs": [],

	// The path to a log file for communication between Dart Code and the VM service. This is useful when trying to diagnose issues with debugging such as missed breakpoints. Use `${name}` in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.vmServiceLogFile": null,

	// Whether to show a warning when modifying files in the [system package cache](https://dart.dev/tools/pub/glossary#system-cache) directory.
	"dart.warnWhenEditingFilesInPubCache": true,

	// Whether to show a warning when modifying files outside of the workspace.
	"dart.warnWhenEditingFilesOutsideWorkspace": true,

	// The path to a log file for communication between Dart Code and the webdev daemon. This is useful when trying to diagnose issues with launching web apps. Use `${name`} in the log file name to prevent concurrent debug sessions overwriting each others logs.
	"dart.webDaemonLogFile": null,

	// Deprecated, honors VS Code's Workspace Trust setting
	// Prevents running JavaScript in custom rules, markdown-it plugins, and configuration files
	"markdownlint.blockJavaScript": false,

	// markdownlint config object
	"markdownlint.config": {},

	// Array of paths for custom rules to include when linting
	"markdownlint.customRules": [],

	// Deprecated, see CHANGELOG.md and markdownlint.blockJavaScript
	// Array of workspace paths that load custom rules without prompting
	"markdownlint.customRulesAlwaysAllow": [],

	// Makes it easier to focus while typing by hiding issues on or near the current line
	"markdownlint.focusMode": false,

	// Array or file of glob expressions to ignore when linting
	"markdownlint.ignore": ".markdownlintignore",

	// Array of glob expressions to include or ignore when linting the workspace
	"markdownlint.lintWorkspaceGlobs": [
		"**/*.{md,mkd,mdwn,mdown,markdown,markdn,mdtxt,mdtext,workbook}",
		"!**/node_modules",
		"!**/bower_components",
		"!**/.git"
	],

	// Run the linter on save (onSave) or on type (onType)
	"markdownlint.run": "onType",

	// Set locale for Faker
	"faker.locale": "en",

	// Set whether all modules can be imported.
	"pythonPreview.allowAllModules": true,

	// Set code and navigation area width.
	"pythonPreview.codAndNavWidth": 510,

	// Control the font family used in the code display area.
	"pythonPreview.code.fontFamily": "Andale mono, monospace",

	// Control the font size in pixels in the code display area.
	"pythonPreview.code.fontSize": 15,

	// Control the line height used in the code.
	"pythonPreview.code.lineHeight": 1.2,

	// Control the font family used in the code footer docs.
	"pythonPreview.codeFooterDocs.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the code footer docs.
	"pythonPreview.codeFooterDocs.fontSize": 12,

	// Render functions with a 'func' prefix and not type label.
	"pythonPreview.compactFuncLabels": false,

	// Display all stack frames that have ever exited rather than only currently on the stack.
	"pythonPreview.cumulativeMode": true,

	// Control the background color used in dict, class and instance key in vscode dark theme.
	"pythonPreview.dark.dict-class-instKey.bgColor": "#f9906f",

	// Control the background color used in dict, class and instance value in vscode dark theme.
	"pythonPreview.dark.dict-class-instVal.bgColor": "#b35c44",

	// Control the color used in highlighted arrow in vscode dark theme.
	"pythonPreview.dark.highlightedArrow.color": "#005583",

	// Control the background color used in highlighted stack frame in vscode dark theme.
	"pythonPreview.dark.highlightedStackFrame.bgColor": "#800080",

	// Control the background color used in list, tuple and set in vscode dark theme.
	"pythonPreview.dark.list-tuple-setTbl.bgColor": "#ca6924",

	// Set how heap objects should be rendered. "true" render all heap objects at the top level. Otherwise, nest heap objects.
	"pythonPreview.disableHeapNesting": false,

	// Control the font family used in the python preview.
	"pythonPreview.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the python preview.
	"pythonPreview.fontSize": 16,

	// Control the font family used in the heap object.
	"pythonPreview.heapObject.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the heap object.
	"pythonPreview.heapObject.fontSize": 14,

	// Hide the code display.
	"pythonPreview.hideCode": false,

	// Control the background color used in dict, class and instance key in vscode high-contrast theme.
	"pythonPreview.high-contrast.dict-class-instKey.bgColor": "#f9906f",

	// Control the background color used in dict, class and instance value in vscode high-contrast theme.
	"pythonPreview.high-contrast.dict-class-instVal.bgColor": "#b35c44",

	// Control the color used in highlighted stack frame in vscode high-contrast theme.
	"pythonPreview.high-contrast.highlightedArrow.color": "#005583",

	// Control the background color used in highlighted stack frame in vscode high-contrast theme.
	"pythonPreview.high-contrast.highlightedStackFrame.bgColor": "#ff7500",

	// Control the background color used in list, tuple and set in vscode high-contrast theme.
	"pythonPreview.high-contrast.list-tuple-setTbl.bgColor": "#ca6924",

	// Control the font family used in the lang display area.
	"pythonPreview.langDisplay.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the lang display area.
	"pythonPreview.langDisplay.fontSize": 14,

	// Control the font family used in the arrow legend.
	"pythonPreview.legend.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the arrow legend.
	"pythonPreview.legend.fontSize": 12,

	// Control the background color used in dict, class and instance key in vscode light theme.
	"pythonPreview.light.dict-class-instKey.bgColor": "#faebbf",

	// Control the background color used in dict, class and instance value in vscode light theme.
	"pythonPreview.light.dict-class-instVal.bgColor": "#ffffc6",

	// Control the color used in highlighted arrow in vscode light theme.
	"pythonPreview.light.highlightedArrow.color": "#005583",

	// Control the background color used in highlighted stack frame in vscode light theme.
	"pythonPreview.light.highlightedStackFrame.bgColor": "#e9f1f6",

	// Control the background color used in list, tuple and set in vscode light theme.
	"pythonPreview.light.list-tuple-setTbl.bgColor": "#ffffc6",

	// Set the max number of executed lines, in order to against infinite loops.
	"pythonPreview.maxExecutedLines": 1000,

	// Control the font family used int the print output docs.
	"pythonPreview.printOutputDocs.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels in the print output docs.
	"pythonPreview.printOutputDocs.fontSize": 12,

	// Control the font family used in the python stdout window.
	"pythonPreview.pyStdout.fontFamily": "Andale mono, monospace",

	// Control the font size in pixels used in the python stdout window.
	"pythonPreview.pyStdout.fontSize": 14,

	// Control the font size in pixels used in the function return value.
	"pythonPreview.retVal.fontSize": 12,

	// Display frame and parent frame labels for all functions.
	"pythonPreview.showAllFrameLabels": false,

	// Control the font family used in the stack header and heap header.
	"pythonPreview.stackAndHeapHeader.fontFamily": "erdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the stack header and heap header.
	"pythonPreview.stackAndHeapHeader.fontSize": 14,

	// Control the font family used in the stack frame.
	"pythonPreview.stackFrame.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the stack frame.
	"pythonPreview.stackFrame.fontSize": 14,

	// Control the font family used in the stack frame header.
	"pythonPreview.stackFrameHeader.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the stack frame header.
	"pythonPreview.stackFrameHeader.fontSize": 14,

	// Render refrences using textual memory labels rather than as jsPlumb arrows.
	"pythonPreview.textualMemoryLabels": false,

	// Enable debug logging for the python-preview extension.
	"pythonPreview.trace": "off",

	// Control the font family used in the type label of heap object.
	"pythonPreview.typeLabel.fontFamily": "verdana, arial, helvetica, sans-serif",

	// Control the font size in pixels used in the type label of heap object.
	"pythonPreview.typeLabel.fontSize": 12,

	// Always prompt with repository picker when running Git History
	"gitHistory.alwaysPromptRepositoryPicker": false,

	// Avatar image cache expiration (0 = cache disabled)
	"gitHistory.avatarCacheExpiration": 60,

	// Prefer to open repository (instead of file) when pressing the editor title button
	"gitHistory.editorTitleButtonOpenRepo": false,

	// Whether to display the commit explorer view
	"gitHistory.hideCommitViewExplorer": false,

	// Include remote branches when opening Git History
	"gitHistory.includeRemoteBranches": false,

	// Output log information
	"gitHistory.logLevel": "Info",

	// Default number of items to be displayed in Git History Viewer
	"gitHistory.pageSize": 100,

	// Whether to display a button in the editor title menu bar
	"gitHistory.showEditorTitleMenuBarIcons": true,

	// Split show file history when file is active.
	"gitHistory.showFileHistorySplit": true,

	// Show commit details in side-by-side view
	"gitHistory.sideBySide": false,

	// Specifies where the 'Git: View History' action appears on the title of SCM Providers.
	//  - Inline: Show the 'Git: View History' action on the title of SCM Providers
	//  - More Actions: Show the 'Git: View History' action in the 'More Actions...' menu on the title of SCM Providers
	"gitHistory.sourceCodeProviderIntegrationLocation": "Inline",

	// List of languages which suggestions are desired.
	"css.enabledLanguages": [
		"html"
	],

	// List of local or remote style sheets for suggestions.
	"css.styleSheets": [],

	// Automatically generates an .editorconfig file according to your current editor settings.
	"editorconfig.generateAuto": true,

	// If generateAuto is false, this template path will be used for each newly-generated .editorconfig file.
	"editorconfig.template": "default",

	// npm bin name
	"npm.bin": "npm",

	// Enable npm commands in the macOS touchbar.
	"npm.enableTouchbar": false,

	// Look for 'package.json' files in these directories
	"npm.includeDirectories": [],

	// Run npm commands in a terminal, otherwise shows the output in the output panel
	"npm.runInTerminal": true,

	// Look for 'package.json' in the root directory of the workspace
	"npm.useRootDirectory": true,

	// Validate installed modules
	"npm.validate.enable": true,

	// 
	"emeraldwalk.runonsave": {},

	// Include parentheses around a sole arrow function parameter
	"prettier.arrowParens": "always",

	// Controls the printing of spaces inside object literals
	"prettier.bracketSpacing": true,

	// Path to the prettier configuration file
	"prettier.configPath": "",

	// This feature is no longer supported. Instead, configure VS Code [default formatters](https://github.com/prettier/prettier-vscode#default-formatter) or use .prettierignore.
	// A list of languages IDs to disable this extension on
	"prettier.disableLanguages": [],

	// A list of [glob patterns](https://code.visualstudio.com/api/references/vscode-api#GlobPattern) to register Prettier formatter
	"prettier.documentSelectors": [],

	// Control whether Prettier formats quoted code embedded in the file.
	"prettier.embeddedLanguageFormatting": "auto",

	// Controls whether prettier is enabled or not.
	"prettier.enable": true,

	// Enable debug logs for troubleshooting.
	"prettier.enableDebugLogs": false,

	// Specify the end of line used by prettier
	"prettier.endOfLine": "lf",

	// Specify the global whitespace sensitivity for HTML files.
	//  Valid options:
	// - `css` - Respect the default value of CSS display property.
	// - `strict` - Whitespaces are considered sensitive.
	// - `ignore` - Whitespaces are considered insensitive.
	"prettier.htmlWhitespaceSensitivity": "css",

	// Path to a .prettierignore file
	"prettier.ignorePath": ".prettierignore",

	// Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the `--require-pragma` option. If there is already a docblock at the top of the file then this option will add a newline to it with the @format marker.
	"prettier.insertPragma": false,

	// If true, puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line
	"prettier.jsxBracketSameLine": false,

	// Use single quotes instead of double quotes in JSX
	"prettier.jsxSingleQuote": false,

	// Package manager is now automatically detected by VS Code. This setting is no longer used.
	// The package manager you use to install node modules.
	"prettier.packageManager": "npm",

	// Path to the prettier module
	"prettier.prettierPath": "",

	// Fit code within this line limit
	"prettier.printWidth": 80,

	// (Markdown) wrap prose over multiple lines
	"prettier.proseWrap": "preserve",

	// Change when properties in objects are quoted
	"prettier.quoteProps": "as-needed",

	// Require a prettier configuration file to format. See [documentation for valid configuration files](https://prettier.io/docs/en/configuration.html).
	// 
	// > _Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set._
	"prettier.requireConfig": false,

	// Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier.
	"prettier.requirePragma": false,

	// When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved.
	// > _This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules._
	"prettier.resolveGlobalModules": false,

	// Whether to add a semicolon at the end of every line
	"prettier.semi": true,

	// If true, will use single instead of double quotes
	"prettier.singleQuote": false,

	// Number of spaces it should use per tab
	"prettier.tabWidth": 2,

	// Controls the printing of trailing commas wherever possible. Valid options:
	// - `none` - No trailing commas
	// - `es5` - Trailing commas where valid in ES5 (objects, arrays, etc)
	// - `all` - Trailing commas wherever possible (function arguments)
	"prettier.trailingComma": "es5",

	// Whether or not to take `.editorconfig` into account when parsing configuration. See the [prettier.resolveConfig](https://prettier.io/docs/en/api.html) docs for details.
	"prettier.useEditorConfig": true,

	// Indent lines with tabs
	"prettier.useTabs": false,

	// Whether or not to indent the code inside `<script>` and `<style>` tags in Vue files. Some people (like the creator of Vue) don’t indent to save an indentation level, but this might break code folding in your editor.
	"prettier.vueIndentScriptAndStyle": false,

	// If true, this extension will process files in node_modules
	"prettier.withNodeModules": false,

	// Enable or disable the automatic update check on launch of vscode
	"pip-updater.AutoUpdate": false,

	// Pip packages/versions to check
	"pip-updater.PackagesAndVersions": [],

	// Default timeout for download and installation of a given pip package
	"pip-updater.Timeout": 60000,

	// (optional) Virtual environment(s) in which pip packages should be installed/updated. Default is to use the default system environment and the default Python available in system PATH. If Python is not available in the PATH, this value is required.
	"pip-updater.VirtualEnv": [],

	// Whether auto complete an epic
	"commentAnchors.epic.provideAutoCompletion": true,

	// Only useful when autoComplete is enabled. This will be added to the max seq for each epic as shown in the autocomplete item
	"commentAnchors.epic.seqStep": 1,

	// The delay between stopping with typing and anchors being reloaded. When you experience hangs or freezes, it is recommended to increase this value
	"commentAnchors.parseDelay": 500,

	// Where to position the anchor when scrolled to
	"commentAnchors.scrollPosition": "top",

	// Display the current cursor position as entry in the file anchor list
	"commentAnchors.showCursor": false,

	// Whether to highlight the anchor tags
	"commentAnchors.tagHighlights.enabled": true,

	// When true, displays hierarchical anchors in the workspace list
	"commentAnchors.tags.displayHierarchyInWorkspace": true,

	// Whether to display tag icons in the gutter
	"commentAnchors.tags.displayInGutter": true,

	// Whether to highlight tags in the scrollbar ruler
	"commentAnchors.tags.displayInRuler": true,

	// Whether to display tag names in the sidebar
	"commentAnchors.tags.displayInSidebar": true,

	// Whether to display line numbers in the sidebar
	"commentAnchors.tags.displayLineNumber": true,

	// Specify a custom region end tag
	"commentAnchors.tags.endTag": "!",

	// When true, sections are automatically expanded in the tree
	"commentAnchors.tags.expandSections": true,

	// List of additional custom Comment Anchor tags
	"commentAnchors.tags.list": [
		{
			"tag": "ANCHOR",
			"iconColor": "default",
			"highlightColor": "#A8C023",
			"scope": "file"
		},
		{
			"tag": "TODO",
			"iconColor": "blue",
			"highlightColor": "#3ea8ff",
			"scope": "workspace"
		},
		{
			"tag": "FIXME",
			"iconColor": "red",
			"highlightColor": "#F44336",
			"scope": "workspace"
		},
		{
			"tag": "STUB",
			"iconColor": "purple",
			"highlightColor": "#BA68C8",
			"scope": "file"
		},
		{
			"tag": "NOTE",
			"iconColor": "orange",
			"highlightColor": "#FFB300",
			"scope": "file"
		},
		{
			"tag": "REVIEW",
			"iconColor": "green",
			"highlightColor": "#64DD17",
			"scope": "workspace"
		},
		{
			"tag": "SECTION",
			"iconColor": "blurple",
			"highlightColor": "#896afc",
			"scope": "workspace",
			"behavior": "region"
		},
		{
			"tag": "LINK",
			"iconColor": "#2ecc71",
			"highlightColor": "#2ecc71",
			"scope": "workspace",
			"behavior": "link"
		}
	],

	// When true, performs case sensitive matches on tags
	"commentAnchors.tags.matchCase": true,

	// Whether to provide auto completion entries for anchors
	"commentAnchors.tags.provideAutoCompletion": true,

	// The display style of tags in the ruler lane (Requires displayInRuler)
	"commentAnchors.tags.rulerStyle": "left",

	// List of separators that can be placed between tags and comments
	"commentAnchors.tags.separators": [
		" - ",
		": ",
		" "
	],

	// The method used to sort the anchors in the sidebar
	"commentAnchors.tags.sortMethod": "line",

	// Scan the entire workspace instead of just the currently opened file
	"commentAnchors.workspace.enabled": true,

	// The glob pattern of the files that will be excluded from matching by Comment Anchors
	"commentAnchors.workspace.excludeFiles": "**/{node_modules,.git,.idea,target,out,build,dist,vendor}/**/*",

	// Require a manual trigger to start the workspace scan. Useful for when you want to reduce load time. (Default true)
	"commentAnchors.workspace.lazyLoad": true,

	// The glob pattern of the files that will be parsed by Comment Anchors
	"commentAnchors.workspace.matchFiles": "**/*",

	// The maximum amount of files that will be parsed. Higher values may cause performance degration in large projects. (Default 250)
	"commentAnchors.workspace.maxFiles": 250,

	// Alter how the workspace anchor tree displays path names
	"commentAnchors.workspace.pathFormat": "full",

	// The names of the libraries to be analyzed by a shell (in addition to the ones that are already builtin). See: www.pydev.org/manual_101_interpreter.html#PyDevInterpreterConfiguration-ForcedBuiltins.
	"python.pydev.forcedBuiltins": [],

	// Whether blank-lines should be managed by the code formatter.
	"python.pydev.format.manageBlankLines": true,

	// Specifies the folder path to the JDK (8 or more recent) used to launch the PyDev Language Server (which has /bin/java inside it).
	"python.pydev.java.home": null,

	// Specifies extra VM arguments used to launch the PyDev Language Server. Eg. use `-noverify -Xmx1G  -XX:+UseG1GC -XX:+UseStringDeduplication` to bypass class verification, increase the heap size to 1GB and enable String deduplication with the G1 Garbage collector
	"python.pydev.ls.vmargs": "-noverify -Xmx1G -XX:+UseG1GC -XX:+UseStringDeduplication",

	// Preferred import location (one of: global, topOfMethod, lineBeforeUsage). Used on auto-imports and quick-fix to determine the location to add an import.
	"python.pydev.preferredImportLocation": "global",

	// Python executable to be used.
	"python.pydev.pythonExecutable": "python",

	// The folders added to the PYTHONPATH containing the sources to be edited by the user. If not given the folders in the default PYTHONPATH which are under root folders are used and if none is found the root folders are used instead.
	"python.pydev.pythonPath": [],

	// If false, default tag name ('div')  will be omitted, i.e. '.some-class' instead of 'div.some-class'
	"mithrilEmmet.outputDefaultTagName": true,

	// Specifies the name of vnode factory function. E.g. for mithril, use 'm'; for hyperscript, use 'h'.
	"mithrilEmmet.vnodeFactoryFunctionName": "m",

	// Additional arguments passed to Firefox
	"firefox.args": [],

	// Absolute path to the Firefox executable
	"firefox.executable": "",

	// Use the specified profile directly instead of a temporary copy
	"firefox.keepProfileChanges": false,

	// The remote debugging port to use
	"firefox.port": 0,

	// The name of the Firefox profile to use
	"firefox.profile": "",

	// The path of the Firefox profile directory to use
	"firefox.profileDir": "",

	// Set the languages that the extension will be activated.  e.g. ["html","xml","php"]. Use ["*"] to activate for all languages.
	"auto-close-tag.activationOnLanguage": [
		"xml",
		"php",
		"blade",
		"ejs",
		"jinja",
		"javascript",
		"javascriptreact",
		"typescript",
		"typescriptreact",
		"plaintext",
		"markdown",
		"vue",
		"liquid",
		"erb",
		"lang-cfml",
		"cfml",
		"HTML (EEx)",
		"HTML (Eex)",
		"plist"
	],

	// Set the languages where the extension will be disabled.  e.g. ["html","xml","php"].
	"auto-close-tag.disableOnLanguage": [],

	// Whether to close self-closing tag automatically
	"auto-close-tag.enableAutoCloseSelfClosingTag": true,

	// Whether to insert close tag automatically
	"auto-close-tag.enableAutoCloseTag": true,

	// Set the tag list that would not be auto closed.
	"auto-close-tag.excludedTags": [
		"area",
		"base",
		"br",
		"col",
		"command",
		"embed",
		"hr",
		"img",
		"input",
		"keygen",
		"link",
		"meta",
		"param",
		"source",
		"track",
		"wbr"
	],

	// Enable both Visual Studio and Sublime Text mode
	"auto-close-tag.fullMode": false,

	// Insert a space before the forward slash in a self-closing tag.
	"auto-close-tag.insertSpaceBeforeSelfClosingTag": false,

	// Auto close tag when </ is typed, same as Sublime Text 3
	"auto-close-tag.SublimeText3Mode": false,

	// Set the languages that the extension will be activated.  e.g. ["html","xml","php"] By default, it is ["*"] and will be activated for all languages.
	"auto-rename-tag.activationOnLanguage": [
		"*"
	],

	// Whether to clear previous output before each run.
	"code-runner.clearPreviousOutput": false,

	// Set the custom command to run.
	"code-runner.customCommand": "echo Hello",

	// Set the working directory.
	"code-runner.cwd": "",

	// Set the default language to run.
	"code-runner.defaultLanguage": "",

	// Whether to enable AppInsights to track user telemetry data.
	"code-runner.enableAppInsights": true,

	// Set the executor of each language.
	"code-runner.executorMap": {
		"javascript": "node",
		"java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
		"c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"cpp": "cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"objective-c": "cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"php": "php",
		"python": "python -u",
		"perl": "perl",
		"perl6": "perl6",
		"ruby": "ruby",
		"go": "go run",
		"lua": "lua",
		"groovy": "groovy",
		"powershell": "powershell -ExecutionPolicy ByPass -File",
		"bat": "cmd /c",
		"shellscript": "bash",
		"fsharp": "fsi",
		"csharp": "scriptcs",
		"vbscript": "cscript //Nologo",
		"typescript": "ts-node",
		"coffeescript": "coffee",
		"scala": "scala",
		"swift": "swift",
		"julia": "julia",
		"crystal": "crystal",
		"ocaml": "ocaml",
		"r": "Rscript",
		"applescript": "osascript",
		"clojure": "lein exec",
		"haxe": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
		"rust": "cd $dir && rustc $fileName && $dir$fileNameWithoutExt",
		"racket": "racket",
		"scheme": "csi -script",
		"ahk": "autohotkey",
		"autoit": "autoit3",
		"dart": "dart",
		"pascal": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
		"d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
		"haskell": "runhaskell",
		"nim": "nim compile --verbosity:0 --hints:off --run",
		"lisp": "sbcl --script",
		"kit": "kitc --run",
		"v": "v run",
		"sass": "sass --style expanded",
		"scss": "scss --style expanded",
		"less": "cd $dir && lessc $fileName $fileNameWithoutExt.css",
		"FortranFreeForm": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"fortran-modern": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"fortran_fixed-form": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		"fortran": "cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt"
	},

	// Set the executor of each file extension.
	"code-runner.executorMapByFileExtension": {
		".vb": "cd $dir && vbc /nologo $fileName && $dir$fileNameWithoutExt",
		".vbs": "cscript //Nologo",
		".scala": "scala",
		".jl": "julia",
		".cr": "crystal",
		".ml": "ocaml",
		".exs": "elixir",
		".hx": "haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",
		".rkt": "racket",
		".scm": "csi -script",
		".ahk": "autohotkey",
		".au3": "autoit3",
		".kt": "cd $dir && kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar && java -jar $fileNameWithoutExt.jar",
		".kts": "kotlinc -script",
		".dart": "dart",
		".pas": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
		".pp": "cd $dir && fpc $fileName && $dir$fileNameWithoutExt",
		".d": "cd $dir && dmd $fileName && $dir$fileNameWithoutExt",
		".hs": "runhaskell",
		".nim": "nim compile --verbosity:0 --hints:off --run",
		".csproj": "dotnet run --project",
		".fsproj": "dotnet run --project",
		".lisp": "sbcl --script",
		".kit": "kitc --run",
		".v": "v run",
		".vsh": "v run",
		".sass": "sass --style expanded",
		".cu": "cd $dir && nvcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",
		".ring": "ring"
	},

	// Set the executor by glob.
	"code-runner.executorMapByGlob": {
		"pom.xml": "cd $dir && mvn clean package"
	},

	// Whether to use the directory of the file to be executed as the working directory.
	"code-runner.fileDirectoryAsCwd": false,

	// Whether to ignore selection to always run entire file.
	"code-runner.ignoreSelection": false,

	// Set the mapping of languageId to file extension.
	"code-runner.languageIdToFileExtensionMap": {
		"bat": ".bat",
		"powershell": ".ps1",
		"typescript": ".ts"
	},

	// Whether to preserve focus on code editor after code run is triggered.
	"code-runner.preserveFocus": true,

	// Whether to respect Shebang to run code.
	"code-runner.respectShebang": true,

	// Whether to run code in Integrated Terminal.
	"code-runner.runInTerminal": false,

	// Whether to save all files before running.
	"code-runner.saveAllFilesBeforeRun": false,

	// Whether to save the current file before running.
	"code-runner.saveFileBeforeRun": false,

	// Whether to show extra execution message like [Running] ... and [Done] ...
	"code-runner.showExecutionMessage": true,

	// Whether to show 'Run Code' command in editor context menu.
	"code-runner.showRunCommandInEditorContextMenu": true,

	// Whether to show 'Run Code' command in explorer context menu.
	"code-runner.showRunCommandInExplorerContextMenu": true,

	// Whether to show 'Run Code' icon in editor title menu.
	"code-runner.showRunIconInEditorTitleMenu": true,

	// Whether to show 'Stop code run' icon in the editor title menu when code is running.
	"code-runner.showStopIconInEditorTitleMenu": true,

	// Temporary file name used in running selected code snippet. When it is set as empty, the file name will be random.
	"code-runner.temporaryFileName": "tempCodeRunnerFile",

	// For Windows system, replaces the Windows style drive letter in the command with a Unix style root when using a custom shell as the terminal, like Bash or Cgywin. Example: Setting this to '/mnt/' will replace 'C:\path' with '/mnt/c/path'
	"code-runner.terminalRoot": "",

	// yarn bin name
	"yarn.bin": "yarn",

	// Keep the output panel visible when yarn execution is successful (no effect with runInTerminal)
	"yarn.dontHideOutputOnSuccess": true,

	// Enable yarn commands in the macOS touchbar.
	"yarn.enableTouchbar": false,

	// Default package json path. relative to current project root
	"yarn.packageJson": "package.json",

	// Run yarn commands in a terminal, otherwise shows the output in the output panel
	"yarn.runInTerminal": true,

	// 
	"github.copilot.advanced": {},

	// Enable or disable Copilot for specified [languages](https://code.visualstudio.com/docs/languages/identifiers)
	"github.copilot.enable": {
		"*": true,
		"yaml": false,
		"plaintext": false,
		"markdown": false
	},

	// Show inline suggestions
	"github.copilot.inlineSuggest.enable": true,

	// Specifies whether to periodically fetch from the upstream repository
	"remoteHub.autoFetch.enabled": true,

	// Specifies the interval, in seconds, to periodically fetch from the upstream repository
	"remoteHub.autoFetch.interval": 60,

	// Specifies whether to enable Azure Repos support
	"remoteHub.azureRepos.enabled": false,

	// Specifies whether to show a warning that changes will be committed directly to the remote provider (e.g. GitHub)
	//  - off: Disables the commit warning
	//  - auto: Warns until the first commit
	//  - always: Always warns
	"remoteHub.commitDirectlyWarning": "always",

	// Specifies whether to attempt to use tar files for file system operations
	//  - always: Always uses tar files
	//  - ifAvailable: Uses tar files if available
	//  - never: Never uses tar files
	"remoteHub.experimental.fs.useTars": "ifAvailable",

	// Specifies whether to attempt prefetching tree loading (for performance testing)
	"remoteHub.experimental.prefetch": true,

	// Specifies whether to use GitHub's new `createCommitOnBranch` GraphQL API to commit.
	"remoteHub.experimental.useNewCommitApi": null,

	// Specifies how much (if any) to log to the _GitHub Repositories_ output channel
	//  - off: Logs nothing
	//  - error: Logs only errors
	//  - warn: Logs all errors and warnings
	//  - info: Logs all errors, warnings, and messages
	//  - debug: Logs all errors, warnings, and messages with extra context useful for debugging
	"remoteHub.logLevel": "warn",

	// Specifies whether to enable rich navigation if the repository is indexed
	"remoteHub.richNavigation.enabled": false,

	// Specifies the proxy to use when downloading repository indexes from a browser context
	"remoteHub.search.download.corsProxy": "",

	// Specifies the maximum number of search indexes cached per repo. Each reference requires a separate search index
	"remoteHub.search.download.repoLimit": 4,

	// Specifies the size (in MB) of search index cache. The search cache is located in the extension's global storage folder
	"remoteHub.search.download.sizeLimit": 100,

	// Specifies whether to enable the staging of changes before committing
	"remoteHub.staging.enabled": true,

	// Specifies whether to automatically stage all changes, if there are none, before committing
	"remoteHub.staging.smart": true,

	// Assigns the issue you're working on to you. Only applies when the issue you're working on is in a repo you currently have open.
	"githubIssues.assignWhenWorking": true,

	// Controls whether an issue number (ex. #1234) or a full url (ex. https://github.com/owner/name/issues/1234) is inserted when the Create Issue code action is run.
	"githubIssues.createInsertFormat": "number",

	// Strings that will cause the 'Create issue from comment' code action to show.
	"githubIssues.createIssueTriggers": [
		"TODO",
		"todo",
		"BUG",
		"FIXME",
		"ISSUE",
		"HACK"
	],

	// Languages that the '#' character should not be used to trigger issue completion suggestions.
	"githubIssues.ignoreCompletionTrigger": [
		"python",
		"makefile"
	],

	// An array of milestones titles to never show issues from.
	"githubIssues.ignoreMilestones": [],

	// Languages that the '@' character should not be used to trigger user completion suggestions.
	"githubIssues.ignoreUserCompletionTrigger": [
		"python"
	],

	// Advanced settings for the name of the branch that is created when you start working on an issue. 
	// - `${user}` will be replace with the currently logged in username 
	// - `${issueNumber}` will be replaced with the current issue number 
	// - `${sanitizedIssueTitle}` will be replaced with the issue title, with all spaces and unsupported characters removed
	"githubIssues.issueBranchTitle": "${user}/issue${issueNumber}",

	// Sets the format of issue completions in the SCM inputbox. 
	// - `${user}` will be replace with the currently logged in username 
	// - `${issueNumber}` will be replaced with the current issue number 
	// - `${issueNumberLabel}` will be replaced with a label formatted as #number or owner/repository#number, depending on whether the issue is in the current repository
	"githubIssues.issueCompletionFormatScm": "${issueTitle} ${issueNumberLabel}",

	// Controls whether completion suggestions are shown for issues.
	"githubIssues.issueCompletions.enabled": true,

	// Specifies what queries should be used in the GitHub issues tree using [GitHub search syntax](https://help.github.com/en/articles/understanding-the-search-syntax) with variables. The first query listed will be expanded in the Issues view. The "default" query includes issues assigned to you by Milestone. If you want to preserve these, make sure they are still in the array when you modify the setting.
	"githubIssues.queries": [
		{
			"label": "My Issues",
			"query": "default"
		},
		{
			"label": "Created Issues",
			"query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
		}
	],

	// Determines whether a branch should be checked out when working on an issue. To configure the name of the branch, set `githubIssues.issueBranchTitle`.
	//  - on: A branch will always be checked out when you start working on an issue. If the branch doesn't exist, it will be created.
	//  - off: A branch will not be created when you start working on an issue. If you have worked on an issue before and a branch was created for it, that same branch will be checked out.
	//  - prompt: A prompt will show for setting the name of the branch that will be created and checked out.
	"githubIssues.useBranchForIssues": "on",

	// Controls whether completion suggestions are shown for users.
	"githubIssues.userCompletions.enabled": true,

	// This setting is replaced by the better named setting githubIssues.issueBranchTitle and may be removed in the future.
	// Advanced settings for the name of the branch that is created when you start working on an issue. ${user} will be replace with the currently logged in username and ${issueNumber} will be replaced with the current issue number. You can also use ${sanitizedIssueTitle}.
	"githubIssues.workingIssueBranch": "",

	// Sets the format of the commit message that is set in the SCM inputbox when you **Start Working on an Issue**. Defaults to `${issueTitle} 
	// Fixes #${issueNumber}`
	"githubIssues.workingIssueFormatScm": "${issueTitle} \nFixes ${issueNumberLabel}",

	// Controls whether comments are expanded when a document with comments is opened.
	//  - expandUnresolved: All unresolved comments will be expanded.
	//  - collapseAll: All comments will be collapsed
	"githubPullRequests.commentExpandState": "expandUnresolved",

	// When true, the option to delete the local branch will be selected by default when deleting a branch from a pull request.
	"githubPullRequests.defaultDeletionMethod.selectLocalBranch": true,

	// When true, the option to delete the remote will be selected by default when deleting a branch from a pull request.
	"githubPullRequests.defaultDeletionMethod.selectRemote": true,

	// The method to use when merging pull requests.
	"githubPullRequests.defaultMergeMethod": "merge",

	// The layout to use when displaying changed files list.
	"githubPullRequests.fileListLayout": "tree",

	// Whether to enter focused mode when a pull request is checked out. This hides the issues and pull requests tree views.
	"githubPullRequests.focusedMode": true,

	// The setting `githubPullRequests.includeRemotes` has been deprecated. Use `githubPullRequests.remotes` to configure what remotes are shown.
	// By default we only support remotes created by users. If you want to see pull requests from remotes this extension created for pull requests, change this setting to 'all'.
	"githubPullRequests.includeRemotes": "default",

	// Logging for GitHub Pull Request extension. The log is emitted to the output channel named as GitHub Pull Request.
	"githubPullRequests.logLevel": "info",

	// The pull request description now uses the same defaults as GitHub, and can be edited before create.
	// The description used when creating pull requests.
	//  - template: Use a pull request template, or use the commit description if no templates were found
	//  - commit: Use the latest commit message
	//  - custom: Specify a custom description
	//  - ask: Ask which of the above methods to use
	"githubPullRequests.pullRequestDescription": "template",

	// The pull request title now uses the same defaults as GitHub, and can be edited before create.
	// The title used when creating pull requests.
	//  - commit: Use the latest commit message
	//  - branch: Use the branch name
	//  - custom: Specify a custom title
	//  - ask: Ask which of the above methods to use
	"githubPullRequests.pullRequestTitle": "ask",

	// Specifies what queries should be used in the GitHub Pull Requests tree. Each query object has a `label` that will be shown in the tree and a search `query` using [GitHub search syntax](https://help.github.com/en/articles/understanding-the-search-syntax). The variable `${user}` can be used to specify the logged in user within a search. By default these queries define the categories "Waiting For My Review", "Assigned To Me" and "Created By Me". If you want to preserve these, make sure they are still in the array when you modify the setting.
	"githubPullRequests.queries": [
		{
			"label": "Waiting For My Review",
			"query": "is:open review-requested:${user}"
		},
		{
			"label": "Assigned To Me",
			"query": "is:open assignee:${user}"
		},
		{
			"label": "Created By Me",
			"query": "is:open author:${user}"
		}
	],

	// List of remotes, by name, to fetch pull requests from.
	"githubPullRequests.remotes": [
		"origin",
		"upstream"
	],

	// This setting is deprecated. Views can now be dragged to any location.
	// When true, show GitHub Pull Requests within the SCM viewlet. Otherwise show a separate view container for them.
	"githubPullRequests.showInSCM": false,

	// Default handler for terminal links.
	//  - github: Create the pull request on GitHub
	//  - vscode: Create the pull request in VS Code
	//  - ask: Ask which method to use
	"githubPullRequests.terminalLinksHandler": "ask",

	// Tags and options configured here will be used by the Add Tags command to add tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, json tags are added.
	"go.addTags": {
		"tags": "json",
		"options": "json=omitempty",
		"promptForTags": false,
		"transform": "snakecase",
		"template": ""
	},

	// Alternate tools or alternate paths for the same tools used by the Go extension. Provide either absolute path or the name of the binary in GOPATH/bin, GOROOT/bin or PATH. Useful when you want to use wrapper script for the Go tools or versioned tools from https://gopkg.in. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
	"go.alternateTools": {},

	// Include unimported packages in auto-complete suggestions. Not applicable when using the language server.
	"go.autocompleteUnimportedPackages": false,

	// Flags to `go build`/`go test` used during build-on-save or running tests. (e.g. ["-ldflags='-s'"]) This is propagated to the language server if `gopls.build.buildFlags` is not specified.
	"go.buildFlags": [],

	// Compiles code on file save using 'go build' or 'go test -c'. Options are 'workspace', 'package', or 'off'.  Not applicable when using the language server's diagnostics. See 'go.languageServerExperimentalFeatures.diagnostics' setting.
	"go.buildOnSave": "package",

	// The Go build tags to use for all commands, that support a `-tags '...'` argument. When running tests, go.testTags will be used instead if it was set. This is propagated to the language server if `gopls.build.buildFlags` is not specified.
	"go.buildTags": "",

	// This option lets you choose the way to display code coverage. Choose either to highlight the complete line or to show a decorator in the gutter. You can customize the colors and borders for the former and the style for the latter.
	"go.coverageDecorator": {
		"type": "highlight",
		"coveredHighlightColor": "rgba(64,128,128,0.5)",
		"uncoveredHighlightColor": "rgba(128,64,64,0.25)",
		"coveredBorderColor": "rgba(64,128,128,0.5)",
		"uncoveredBorderColor": "rgba(128,64,64,0.25)",
		"coveredGutterStyle": "blockblue",
		"uncoveredGutterStyle": "slashyellow"
	},

	// Use these options to control whether only covered or only uncovered code or both should be highlighted after running test coverage
	"go.coverageOptions": "showBothCoveredAndUncoveredCode",

	// When generating code coverage, the value for -covermode. 'default' is the default value chosen by the 'go test' command.
	"go.coverMode": "default",

	// If true, runs 'go test -coverprofile' on save and shows test coverage.
	"go.coverOnSave": false,

	// If true, shows test coverage when Go: Test Function at cursor command is run.
	"go.coverOnSingleTest": false,

	// If true, shows test coverage when Go: Test Single File command is run.
	"go.coverOnSingleTestFile": false,

	// If true, shows test coverage when Go: Test Package command is run.
	"go.coverOnTestPackage": true,

	// When generating code coverage, should counts be shown as --374--
	"go.coverShowCounts": false,

	// Delve settings that applies to all debugging sessions. Debug configuration in the launch.json file will override these values.
	"go.delveConfig": {},

	// If true, tests will not run concurrently. When a new test run is started, the previous will be cancelled.
	"go.disableConcurrentTests": false,

	// Pick 'godoc' or 'gogetdoc' to get documentation. Not applicable when using the language server.
	"go.docsTool": "godoc",

	// Experimental Feature: Enable/Disable entries from the context menu in the editor.
	"go.editorContextMenuCommands": {
		"toggleTestFile": true,
		"addTags": true,
		"removeTags": false,
		"fillStruct": false,
		"testAtCursor": true,
		"testFile": false,
		"testPackage": false,
		"generateTestForFunction": true,
		"generateTestForFile": false,
		"generateTestForPackage": false,
		"addImport": true,
		"testCoverage": true,
		"playground": true,
		"debugTestAtCursor": true,
		"benchmarkAtCursor": false
	},

	// Feature level setting to enable/disable code lens for references and run/debug tests
	"go.enableCodeLens": {
		"references": false,
		"runtest": true
	},

	// Flags to pass to format tool (e.g. ["-s"]). Not applicable when using the language server.
	"go.formatFlags": [],

	// Not applicable when using the language server. Choosing 'goimports', 'goreturns', or 'gofumports' will add missing imports and remove unused imports.
	//  - default: If the language server is enabled, format via the language server, which already supports gofmt, goimports, goreturns, and gofumpt. Otherwise, goimports.
	//  - gofmt: Formats the file according to the standard Go style.
	//  - goimports: Organizes imports and formats the file with gofmt.
	//  - goformat: Configurable gofmt, see https://github.com/mbenkmann/goformat.
	//  - gofumpt: Stricter version of gofmt, see https://github.com/mvdan/gofumpt.
	//  - gofumports: Applies gofumpt formatting and organizes imports.
	"go.formatTool": "default",

	// Additional command line flags to pass to `gotests` for generating tests.
	"go.generateTestsFlags": [],

	// Enable gocode's autobuild feature. Not applicable when using the language server.
	"go.gocodeAutoBuild": false,

	// Additional flags to pass to gocode. Not applicable when using the language server.
	"go.gocodeFlags": [
		"-builtin",
		"-ignore-case",
		"-unimported-packages"
	],

	// Used to determine the Go package lookup rules for completions by gocode. Only applies when using nsf/gocode. Latest versions of the Go extension uses mdempsky/gocode by default. Not applicable when using the language server.
	"go.gocodePackageLookupMode": "go",

	// Specify GOPATH here to override the one that is set as environment variable. The inferred GOPATH from workspace root overrides this, if go.inferGopath is set to true. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
	"go.gopath": null,

	// Specifies the GOROOT to use when no environment variable is set. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
	"go.goroot": null,

	// Folder names (not paths) to ignore while using Go to Symbol in Workspace feature. Not applicable when using the language server.
	"go.gotoSymbol.ignoreFolders": [],

	// If false, the standard library located at $GOROOT will be excluded while using the Go to Symbol in File feature. Not applicable when using the language server.
	"go.gotoSymbol.includeGoroot": false,

	// If false, the import statements will be excluded while using the Go to Symbol in File feature. Not applicable when using the language server.
	"go.gotoSymbol.includeImports": false,

	// Infer GOPATH from the workspace root. This is ignored when using Go Modules. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
	"go.inferGopath": false,

	// If true, then `-i` flag will be passed to `go build` everytime the code is compiled. Since Go 1.10, setting this may be unnecessary unless you are in GOPATH mode and do not use the language server.
	"go.installDependenciesWhenBuilding": false,

	// Temporary flag to enable/disable diagnostics from the language server. This setting will be deprecated soon. Please see and response to [Issue 50](https://github.com/golang/vscode-go/issues/50).
	"go.languageServerExperimentalFeatures": {
		"diagnostics": true
	},

	// Flags like -rpc.trace and -logfile to be used while running the language server.
	"go.languageServerFlags": [],

	// Flags to pass to Lint tool (e.g. ["-min_confidence=.8"])
	"go.lintFlags": [],

	// Lints code on file save using the configured Lint tool. Options are 'file', 'package', 'workspace' or 'off'.
	"go.lintOnSave": "package",

	// Specifies Lint tool name.
	"go.lintTool": "staticcheck",

	// Use gotype on the file currently being edited and report any semantic or syntactic errors found after configured delay. Not applicable when using the language server.
	"go.liveErrors": {
		"enabled": false,
		"delay": 500
	},

	// The logging level the extension logs at, defaults to 'error'
	"go.logging.level": "error",

	// The flags configured here will be passed through to command `goplay`
	"go.playground": {
		"openbrowser": true,
		"share": true,
		"run": true
	},

	// Tags and options configured here will be used by the Remove Tags command to remove tags to struct fields. If promptForTags is true, then user will be prompted for tags and options. By default, all tags and options will be removed.
	"go.removeTags": {
		"tags": "",
		"options": "",
		"promptForTags": false
	},

	// Prompt for surveys, including the gopls survey and the Go developer survey.
	"go.survey.prompt": true,

	// Apply the Go & PATH environment variables used by the extension to all integrated terminals.
	"go.terminal.activateEnvironment": true,

	// Absolute path to a file containing environment variables definitions. File contents should be of the form key=value.
	"go.testEnvFile": null,

	// Environment variables that will be passed to the process that runs the Go tests
	"go.testEnvVars": {},

	// Run benchmarks when running all tests in a file or folder.
	"go.testExplorer.alwaysRunBenchmarks": false,

	// Concatenate all test log messages for a given location into a single message.
	"go.testExplorer.concatenateMessages": true,

	// Enable the Go test explorer
	"go.testExplorer.enable": true,

	// Present packages in the test explorer flat or nested.
	"go.testExplorer.packageDisplayMode": "flat",

	// Set the source location of dynamically discovered subtests to the location of the containing function. As a result, dynamically discovered subtests will be added to the gutter test widget of the containing function.
	"go.testExplorer.showDynamicSubtestsInEditor": false,

	// Open the test output terminal when a test run is started.
	"go.testExplorer.showOutput": true,

	// Flags to pass to `go test`. If null, then buildFlags will be used. This is not propagated to the language server.
	"go.testFlags": null,

	// Run 'go test' on save for current package. It is not advised to set this to `true` when you have Auto Save enabled.
	"go.testOnSave": false,

	// The Go build tags to use for when running tests. If null, then buildTags will be used.
	"go.testTags": null,

	// Specifies the timeout for go test in ParseDuration format.
	"go.testTimeout": "30s",

	// Environment variables that will be passed to the tools that run the Go tools (e.g. CGO_CFLAGS)
	"go.toolsEnvVars": {},

	// Location to install the Go tools that the extension depends on if you don't want them in your GOPATH. When specified as a workspace setting, the setting is used only when the workspace is marked trusted with "Go: Toggle Workspace Trust Flag".
	"go.toolsGopath": null,

	// Automatically update the tools used by the extension, without prompting the user.
	"go.toolsManagement.autoUpdate": false,

	// Specify whether to prompt about new versions of Go and the Go tools (currently, only `gopls`) the extension depends on
	//  - proxy: keeps notified of new releases by checking the Go module proxy (GOPROXY)
	//  - local: checks only the minimum tools versions required by the extension
	//  - off: completely disables version check (not recommended)
	"go.toolsManagement.checkForUpdates": "proxy",

	// Trace the communication between VS Code and the Go language server.
	"go.trace.server": "off",

	// Complete functions with their parameter signature, including the variable type. Not propagated to the language server.
	"go.useCodeSnippetsOnFunctionSuggest": false,

	// Complete functions with their parameter signature, excluding the variable types. Use `gopls.usePlaceholders` when using the language server.
	"go.useCodeSnippetsOnFunctionSuggestWithoutType": false,

	// Use `go.toolsManagement.checkForUpdates` instead.
	// When enabled, the extension automatically checks the Go proxy if there are updates available for Go and the Go tools (at present, only gopls) it depends on and prompts the user accordingly
	"go.useGoProxyToCheckForToolUpdates": true,

	// Use the Go language server "gopls" from Google for powering language features like code navigation, completion, refactoring, formatting & diagnostics.
	"go.useLanguageServer": true,

	// Flags to pass to `go tool vet` (e.g. ["-all", "-shadow"])
	"go.vetFlags": [],

	// Vets code on file save using 'go tool vet'. Not applicable when using the language server's diagnostics. See 'go.languageServerExperimentalFeatures.diagnostics' setting.
	"go.vetOnSave": "package",

	// Configure the default Go language server ('gopls'). In most cases, configuring this section is unnecessary. See [the documentation](https://github.com/golang/tools/blob/master/gopls/doc/settings.md) for all available settings.
	"gopls": {},

	// An array of workspace names to exclude as roots in the tree (wildcards can be used).
	"todo-tree.filtering.excludedWorkspaces": [],

	// Globs for use in limiting search results by exclusion (applied after **includeGlobs**), e.g. `["**/*.txt"]` to ignore all .txt files.
	"todo-tree.filtering.excludeGlobs": [
		"**/node_modules"
	],

	// If true, any subfolders containing a .git file will be ignored when searching.
	"todo-tree.filtering.ignoreGitSubmodules": false,

	// An array of workspace names to include as roots in the tree (wildcards can be used). An empty array includes all workspace folders.
	"todo-tree.filtering.includedWorkspaces": [],

	// Globs for use in limiting search results by inclusion, e.g. `["**/unit-tests/*.js"]` to only show .js files in unit-tests subfolders.
	"todo-tree.filtering.includeGlobs": [],

	// Include hidden files (starting with a .).
	"todo-tree.filtering.includeHiddenFiles": false,

	// By default the globs are passed into ripgrep to narrow the search. Set this to false to apply the globs *after* the search (pre 0.0.132 behaviour).
	"todo-tree.filtering.passGlobsToRipgrep": true,

	// Scopes (sets of globs) that can be switched between
	"todo-tree.filtering.scopes": [],

	// Add VSCode's `files.exclude` and/or `search.exclude` list to the ignored paths.
	//  - none: Don't used any built in excludes
	//  - file excludes: Use the Files:Exclude setting
	//  - search excludes: Use the Search:Exclude setting
	//  - file and search excludes: Use the Files:Exclude and the Search:Exclude setting
	"todo-tree.filtering.useBuiltInExcludes": "none",

	// Create a debug channel in the Output view.
	"todo-tree.general.debug": false,

	// Set to true to enable automatic updates when files in the workspace are created, changed or deleted.
	"todo-tree.general.enableFileWatcher": false,

	// Path to use when exporting the tree. Environment variables will be expanded, e.g `${HOME}` and the path is passed through strftime (see <https://github.com/samsonjs/strftime>). Set the extension to `.json` to export as a JSON record.
	"todo-tree.general.exportPath": "~/todo-tree-%Y%m%d-%H%M.txt",

	// Glob for use with the file watcher. Change this if the default setting causes performance issues.
	"todo-tree.general.fileWatcherGlob": "**/*",

	// Sets where the cursor is positioned when revealing a todo.
	//  - start of line: Moves the cursor to the start of the line
	//  - start of todo: Moves the cursor to the beginning of the todo
	//  - end of todo: Moves the cursor to the end of the todo
	"todo-tree.general.revealBehaviour": "start of todo",

	// Folder in which to run the search (defaults to the workspace folder).
	"todo-tree.general.rootFolder": "",

	// Editor schemes to find TODOs in. To find TODOs in settings files, for instance, add `vscode-userdata` or for output windows, add `output`.
	"todo-tree.general.schemes": [
		"file",
		"ssh",
		"untitled"
	],

	// Show icons instead of tags in the status bar
	"todo-tree.general.showIconsInsteadOfTagsInStatusBar": false,

	// What to show in the status bar - nothing, total count, counts per tag, top three counts per tag or count of tags in the current file.
	//  - none: Only show the scanning status in the status bar
	//  - total: Show the total count of tags in the status bar
	//  - tags: Show a breakdown of the count of each tag in the status bar
	//  - top three: Show the count of the top three tags in the status bar
	//  - current file: Show the count of tags in the current file in the status bar
	"todo-tree.general.statusBar": "none",

	// What to do when the status bar is clicked.
	//  - cycle: Toggle between showing total count and the top three tag counts
	//  - reveal: Reveal the tree view
	//  - toggle highlights: Toggle highlighting
	"todo-tree.general.statusBarClickBehaviour": "reveal",

	// Allows similar tags to be grouped under the same type, e.g. `{ "FIX": ["FIXME","FIXIT"] }`. *Note: All tags must also be in the `todo-tree.general.tags` tag list. If a tag group is defined, custom highlights apply to the group, not the tags within the group.*
	"todo-tree.general.tagGroups": {},

	// List of tags. *Note, if one tag starts with another tag, the longer tag should be specified first to prevent the shorter tag being matched.*
	"todo-tree.general.tags": [
		"BUG",
		"HACK",
		"FIXME",
		"TODO",
		"XXX"
	],

	// A list of colours which is applied to tag highlights in the same order as the tags. Repeats if necessary and is overridden by `todo-tree.highlights.customHighlight`.
	"todo-tree.highlights.backgroundColourScheme": [
		"red",
		"orange",
		"yellow",
		"green",
		"blue",
		"indigo",
		"violet"
	],

	// Custom configuration for highlighting, [Read more...](https://github.com/Gruntfuggly/todo-tree#highlighting).
	"todo-tree.highlights.customHighlight": {
		"BUG": {
			"icon": "bug"
		},
		"FIXME": {
			"icon": "flame"
		}
	},

	// Default configuration for highlighting. [Read more...](https://github.com/Gruntfuggly/todo-tree#highlighting).
	"todo-tree.highlights.defaultHighlight": {},

	// Set to false to disable highlighting.
	"todo-tree.highlights.enabled": true,

	// A list of colours which is applied to tag highlights in the same order as the tags. Repeats if necessary and is overridden by `todo-tree.highlights.customHighlight`.
	"todo-tree.highlights.foregroundColourScheme": [
		"white",
		"black",
		"black",
		"white",
		"white",
		"white",
		"black"
	],

	// Delay before highlighting tags within files (milliseconds).
	"todo-tree.highlights.highlightDelay": 500,

	// Use a colour scheme to colour the tags. This scheme is applied to the tags in the order of tags. The colours can be modified using `todo-tree.highlights.foregroundColourScheme` and `todo-tree.highlights.backgroundColourScheme`. The colour scheme overrides colours in the default highlight, but not the custom highlight.
	"todo-tree.highlights.useColourScheme": false,

	// Force the regex to match over multiple lines. Allows use of `[\s\S]` to match anything including newlines.
	"todo-tree.regex.enableMultiLine": false,

	// Regular expression for matching TODOs. Note: **($TAGS)** will be replaced by the expanded tag list. For some of the extension features to work, **($TAGS)** should be present in the regex, however, the basic functionality should still work if you need to explicitly expand the tag list.
	"todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^[ \\t]*(-|\\d+.))\\s*($TAGS)",

	// Use a case sensitive regular expression.
	"todo-tree.regex.regexCaseSensitive": true,

	// Regular expression for processing the text to the right of the tag, e.g. for extracting a sub tag, or removing unwanted characters.
	"todo-tree.regex.subTagRegex": "",

	// Location of your version of ripgrep.
	"todo-tree.ripgrep.ripgrep": "",

	// Additional arguments to pass to ripgrep (Use with caution!).
	"todo-tree.ripgrep.ripgrepArgs": "--max-columns=1000 --no-config ",

	// Size of the buffer to use for retrieving output from ripgrep (kilobytes).
	"todo-tree.ripgrep.ripgrepMaxBuffer": 200,

	// A pattern file is used with ripgrep by default. If you experience issues with deleting the pattern file, set this to false to use the legacy method of providing the regex to ripgrep.
	"todo-tree.ripgrep.usePatternFile": true,

	// Refresh the tree when files are opened or saved.
	"todo-tree.tree.autoRefresh": true,

	// Show a button in the tree view title bar to expand or collapse the whole tree.
	"todo-tree.tree.buttons.expand": true,

	// Show a button in the tree view title bar to create a file showing the tree content.
	"todo-tree.tree.buttons.export": false,

	// Show a button in the tree view title bar allowing the tree to be filtered by entering some text.
	"todo-tree.tree.buttons.filter": true,

	// Show a button in the tree view title bar to enable grouping items by sub tag.
	"todo-tree.tree.buttons.groupBySubTag": false,

	// Show a button in the tree view title bar to enable grouping items by tag.
	"todo-tree.tree.buttons.groupByTag": true,

	// Show a refresh button in the tree view title bar.
	"todo-tree.tree.buttons.refresh": true,

	// Show a button in the tree view title bar to reveal the current item (only when track file is not enabled).
	"todo-tree.tree.buttons.reveal": true,

	// Show a button in the tree view title bar to change the Scan Mode setting.
	"todo-tree.tree.buttons.scanMode": false,

	// Show a button in the tree view title bar to change the view style (tree, flat or tags only).
	"todo-tree.tree.buttons.viewStyle": true,

	// Prevent the tree from showing compact folders.
	"todo-tree.tree.disableCompactFolders": false,

	// When opening new workspaces, show the tree initially fully expanded.
	"todo-tree.tree.expanded": false,

	// Set to true if you want the view filtering to be case sensitive.
	"todo-tree.tree.filterCaseSensitive": false,

	// When opening new workspaces, show the tree initially as flat list of files.
	"todo-tree.tree.flat": false,

	// When opening new workspaces, show the tree initially grouped by sub tag.
	"todo-tree.tree.groupedBySubTag": false,

	// When opening new workspaces, show the tree initially grouped by tag.
	"todo-tree.tree.groupedByTag": false,

	// Save some space by hiding the item icons when grouped by tag.
	"todo-tree.tree.hideIconsWhenGroupedByTag": false,

	// Hide the view if it is empty.
	"todo-tree.tree.hideTreeWhenEmpty": false,

	// Format for tree items.
	"todo-tree.tree.labelFormat": "${tag} ${after}",

	// Normally the tree is built as soon as the window is opened. If you have a large code base and want to manually start the scan, set this to false.
	"todo-tree.tree.scanAtStartup": true,

	// Set this to change which files are scanned.
	//  - workspace: Scan the whole workspace (or workspaces) and open file
	//  - open files: Scan open files only
	//  - current file: Scan the current file only
	//  - workspace only: Scan the workspace but don't refresh files open in the editor
	"todo-tree.tree.scanMode": "workspace",

	// Show badges and SCM state in the tree view.
	"todo-tree.tree.showBadges": true,

	// Show counts of TODOs in the tree.
	"todo-tree.tree.showCountsInTree": false,

	// Show the current scan mode at the top of the tree view
	"todo-tree.tree.showCurrentScanMode": true,

	// This setting is no longer used. Please drag the view to move it.
	// 
	"todo-tree.tree.showInExplorer": false,

	// This setting is no longer used, please use "todo-tree.tree.scanMode" instead.
	// 
	"todo-tree.tree.showScanOpenFilesOrWorkspaceButton": false,

	// This setting is no longer used, please use "todo-tree.tree.scanMode" instead.
	// 
	"todo-tree.tree.showTagsFromOpenFilesOnly": false,

	// ripgrep searches using multiple threads to improve performance. The tree is sorted when it is populated so that it stays stable. If you want to use ripgrep's own sort arguments, set this to false.
	"todo-tree.tree.sort": true,

	// Sort items in the tags only view alphabetically instead of by file and line number.
	"todo-tree.tree.sortTagsOnlyViewAlphabetically": false,

	// The URL to open when clicking on a sub tag in the tree. Can include placeholders as defined in `todo-tree.tree.labelFormat`.
	"todo-tree.tree.subTagClickUrl": "",

	// When opening new workspaces, show only tag elements in tree.
	"todo-tree.tree.tagsOnly": false,

	// Tree item tooltip format.
	"todo-tree.tree.tooltipFormat": "${filepath}, line ${line}",

	// Track the current file in the tree view.
	"todo-tree.tree.trackFile": true,

	// Add menu items to the editor context menu for running and debugging the tests in the current file
	"testExplorer.addToEditorContextMenu": false,

	// Show a CodeLens above each test or suite for running or debugging the tests
	"testExplorer.codeLens": true,

	// Show error messages from test failures as decorations in the editor
	"testExplorer.errorDecoration": true,

	// Provide hover messages for the error decorations in the editor
	"testExplorer.errorDecorationHover": true,

	// Show the state of each test in the editor using Gutter Decorations
	"testExplorer.gutterDecoration": true,

	// Hide the output channel used to show a test's log when the user clicks on a test whose log is empty
	"testExplorer.hideEmptyLog": true,

	// Hide the Test Explorer when no test adapters have been registered or when no tests have been found
	"testExplorer.hideWhen": "never",

	// Merge suites with the same label and parent
	"testExplorer.mergeSuites": false,

	// Retire or reset all test states whenever the test tree is reloaded
	//  - retire: Retire all test states whenever the test tree is reloaded
	//  - reset: Reset all test states whenever the test tree is reloaded
	//  - null: Don't change the test states when the test tree is reloaded
	"testExplorer.onReload": null,

	// Retire or reset all test states whenever a test run is started
	//  - retire: Retire all test states whenever a test run is started
	//  - reset: Reset all test states whenever a test run is started
	//  - null: Don't change the test states when a test run is started
	"testExplorer.onStart": null,

	// Show a button for collapsing the nodes of the test tree
	"testExplorer.showCollapseButton": true,

	// Show a button for expanding the top nodes of the test tree, recursively for the given number of levels
	"testExplorer.showExpandButton": 3,

	// Switch to the Test Explorer view whenever a test run is started
	"testExplorer.showOnRun": false,

	// Sort the tests and suites by label or location. If this is not set (or set to null), they will be shown in the order that they were received from the adapter
	//  - byLabel: sort by label
	//  - byLocation: sort by location (filename and line), if multiple tests or suites appear at the same location, they are sorted by label
	//  - byLabelWithSuitesFirst: sort by label, but always put the suites on top
	//  - byLocationWithSuitesFirst: sort by location, but always put the suites on top
	//  - null: don't sort, the tests and suites will be shown in the order that they were received from the adapter
	"testExplorer.sort": null,

	// Disable the Test Explorer UI and use VSCode's native Testing UI instead
	"testExplorer.useNativeTesting": false,

	// Select an icon pack that enables specific icons.
	//  - angular: Icons for Angular.
	//  - angular_ngrx: Icons for Angular and ngrx.
	//  - react: Icons for React.
	//  - react_redux: Icons for React and Redux.
	//  - vue: Icons for Vue.
	//  - vue_vuex: Icons for Vue and Vuex.
	//  - nest: Icons for NestJS.
	//  - none: No icon pack enabled.
	"helium-icon-theme.activeIconPack": "angular",

	// Set custom file icon associations.
	"helium-icon-theme.files.associations": {},

	// Set custom folder icon associations.
	"helium-icon-theme.folders.associations": {},

	// Change the color of the folder icons.
	"helium-icon-theme.folders.color": "#90a4ae",

	// Set the type for the folder icons.
	//  - specific: Select specific folder icons.
	//  - classic: Select classic folder icons.
	//  - none: No folder icons.
	"helium-icon-theme.folders.theme": "specific",

	// Hide explorer arrows before folder.
	"helium-icon-theme.hidesExplorerArrows": false,

	// Set custom language icon associations.
	"helium-icon-theme.languages.associations": {},

	// Change the opacity of the icons.
	"helium-icon-theme.opacity": 1,

	// Change the saturation of the icons.
	"helium-icon-theme.saturation": 1,

	// Show restart notification.
	"helium-icon-theme.showReloadMessage": true,

	// Show the update message after each update.
	"helium-icon-theme.showUpdateMessage": false,

	// Show the welcome message after first installation.
	"helium-icon-theme.showWelcomeMessage": true,

	// A path to a file, or an object containing the configuration options for js-beautify. If the .jsbeautifyrc file exists in project root, it overrides this configuration.
	"beautify.config": null,

	// List of paths to ignore when using VS Code format command, including format on save. Uses glob pattern matching.
	"beautify.ignore": [],

	// Link file types to the beautifier type
	"beautify.language": {
		"js": {
			"type": [
				"javascript",
				"json",
				"jsonc"
			],
			"filename": [
				".jshintrc",
				".jsbeautifyrc"
			]
		},
		"css": [
			"css",
			"less",
			"scss"
		],
		"html": [
			"htm",
			"html"
		]
	},

	// Controls whether global should automatically update the tags after file saved. "Default": disable autoupdate if GTAGS database size is larger than 50MB. It is recommended to disable this feature if the project is too large.
	"gnuGlobal.autoUpdate": "Default",

	// Enable/disable auto-completion feature.
	"gnuGlobal.completion": "Enabled",

	// Log more information to debug this extension. Default is Disabled.
	"gnuGlobal.debugMode": "Disabled",

	// Specify the encoding of the command line output.
	"gnuGlobal.encoding": "utf-8",

	// Specify the path to the global.
	"gnuGlobal.globalExecutable": "global",

	// Specify the path to the gtags.
	"gnuGlobal.gtagsExecutable": "gtags",

	// If this option is enabled, each file whose suffix is ".h" is treated as a C++ source file. You need to rebuild gtags if you change this configuration.
	"gnuGlobal.gtagsForceCpp": "Disabled",

	// Skip symbolic links while building tag files. Could be None, File, Directory or All. Default is None. (Requires GNU Global 6.6.3)
	"gnuGlobal.gtagSkipSymlink": "None",

	// (Experimental) Used as the path to search for library functions. If the specified tags is not found in the project, this extension also searches in these paths. Please note that 'Rebuild Gtags Database' doesn't rebuild the tag files for these libraries. You need to build tags for them individually.
	"gnuGlobal.libraryPath": [],

	// If objDirPrefix is set and objDirPrefix directory exists, gtags creates objDirPrefix/project_dir directory and makes tag files in it. Global will also try to search tag files in such directory. Only support UNIX style filesystem. Windows is not supported.
	"gnuGlobal.objDirPrefix": "",

	// Custom elements completion action as simple like `<feTurbulence />`, one item to one name
	"svg.completion.elementsActionAsSimple": [],

	// Indicates whether the Completion List of Emmet-styles is enabled.
	"svg.completion.emmet": false,

	// Specifies whether advanced items that are not commonly used are displayed in the AutoComplete list.
	"svg.completion.showAdvanced": false,

	// Specifies whether advanced items that are deprecated are displayed in the AutoComplete list.
	"svg.completion.showDeprecated": false,

	// adds attributes to an outer <svg> element (disabled by default)
	"svg.minify.addAttributesToSVGElement": false,

	// add classnames to an outer <svg> element (disabled by default)
	"svg.minify.addClassesToSVGElement": false,

	// cleanup attributes from newlines, trailing, and repeating spaces
	"svg.minify.cleanupAttrs": true,

	// remove or cleanup enable-background attribute when possible
	"svg.minify.cleanupEnableBackground": true,

	// remove unused and minify used IDs
	"svg.minify.cleanupIDs": true,

	// round numeric values in attributes that take a list of numbers (like viewBox or enable-background)
	"svg.minify.cleanupListOfValues": true,

	// round numeric values to the fixed precision, remove default px units
	"svg.minify.cleanupNumericValues": true,

	// collapse useless groups
	"svg.minify.collapseGroups": true,

	// convert colors (from rgb() to #rrggbb, from #rrggbb to #rgb)
	"svg.minify.convertColors": true,

	// convert non-eccentric <ellipse> to <circle>
	"svg.minify.convertEllipseToCircle": true,

	// convert Path data to relative or absolute (whichever is shorter), convert one segment to another, trim useless delimiters, smart rounding, and much more
	"svg.minify.convertPathData": true,

	// convert some basic shapes to <path>
	"svg.minify.convertShapeToPath": true,

	// convert styles into attributes
	"svg.minify.convertStyleToAttrs": true,

	// collapse multiple transforms into one, convert matrices to the short aliases, and much more
	"svg.minify.convertTransform": true,

	// move and merge styles from <style> elements to element style attributes
	"svg.minify.inlineStyles": true,

	// merge multiple Paths into one
	"svg.minify.mergePaths": true,

	// minify <style> elements content with CSSO
	"svg.minify.minifyStyles": true,

	// move elements' attributes to their enclosing group
	"svg.minify.moveElemsAttrsToGroup": true,

	// move some group attributes to the contained elements
	"svg.minify.moveGroupAttrsToElems": true,

	// prefix IDs and classes with the SVG filename or an arbitrary string
	"svg.minify.prefixIds": true,

	// removes attributes of elements that match a css selector (disabled by default)
	"svg.minify.removeAttributesBySelector": false,

	// remove attributes by pattern (disabled by default)
	"svg.minify.removeAttrs": false,

	// remove comments
	"svg.minify.removeComments": true,

	// remove <desc>
	"svg.minify.removeDesc": true,

	// remove width/height and add viewBox if it's missing (opposite to removeViewBox, disable it first) (disabled by default)
	"svg.minify.removeDimensions": false,

	// remove doctype declaration
	"svg.minify.removeDoctype": true,

	// remove editors namespaces, elements, and attributes
	"svg.minify.removeEditorsNSData": true,

	// remove arbitrary elements by ID or className (disabled by default)
	"svg.minify.removeElementsByAttr": false,

	// remove empty attributes
	"svg.minify.removeEmptyAttrs": true,

	// remove empty Container elements
	"svg.minify.removeEmptyContainers": true,

	// remove empty Text elements
	"svg.minify.removeEmptyText": true,

	// remove hidden elements
	"svg.minify.removeHiddenElems": true,

	// remove <metadata>
	"svg.minify.removeMetadata": true,

	// remove non-inheritable group's "presentation" attributes
	"svg.minify.removeNonInheritableGroupAttrs": true,

	// removes elements that are drawn outside of the viewbox (disabled by default)
	"svg.minify.removeOffCanvasPaths": false,

	// remove raster images (disabled by default)
	"svg.minify.removeRasterImages": false,

	// remove <script> elements (disabled by default)
	"svg.minify.removeScriptElement": false,

	// remove <style> elements (disabled by default)
	"svg.minify.removeStyleElement": false,

	// remove <title>
	"svg.minify.removeTitle": true,

	// remove unknown elements content and attributes, remove attrs with default values
	"svg.minify.removeUnknownsAndDefaults": true,

	// remove unused namespaces declaration
	"svg.minify.removeUnusedNS": true,

	// remove elements of <defs> without id
	"svg.minify.removeUselessDefs": true,

	// remove useless stroke and fill attrs
	"svg.minify.removeUselessStrokeAndFill": true,

	// remove viewBox attribute when possible
	"svg.minify.removeViewBox": true,

	// removes xmlns attribute (for inline svg, disabled by default)
	"svg.minify.removeXMLNS": false,

	// remove XML processing instructions
	"svg.minify.removeXMLProcInst": true,

	// Find duplicated elements and replace them with links (disabled by default)
	"svg.minify.reusePaths": false,

	// sort element attributes for epic readability (disabled by default)
	"svg.minify.sortAttrs": false,

	// sort children of <defs> in order to improve compression
	"svg.minify.sortDefsChildren": true,

	// Show Grammar Highlight in path data
	"svg.pathDataHighlight": true,

	// Preview show fit mode at startup
	"svg.preview.autoFit": true,

	// Auto show preview on side when a SVG document open
	"svg.preview.autoShow": false,

	// Specifies the Svg Preview Background
	//  - editor: Editor Background
	//  - transparent: Transparent
	//  - dark-transparent: Dark Transparent
	//  - white: White
	//  - black: Black
	//  - custom: Custom
	"svg.preview.background": "editor",

	// Specifies the Svg Preview Custom Background
	"svg.preview.backgroundCustom": "#eee",

	// When you change the background color in the preview view, the new settings store the location
	//  - Global: Save new background in your global scope
	//  - Workspace: Save new background in your workspace
	//  - NoSave: Only temporarily changed, configuration will not be saved
	"svg.preview.backgroundSaveTo": "Workspace",

	// If you just want use other previewer
	"svg.preview.disable": false,

	// How show svg content in preview view
	//  - svg: SVG embedded in HTML
	//  - img: Show SVG in IMG element
	"svg.preview.mode": "svg",

	// Preview show cross line (will hide mouse pointer) by default, you can switch it from toolbar
	"svg.preview.showCrossLine": false,

	// Preview show ruler by default, you can switch it from toolbar
	"svg.preview.showRuler": false,

	// This SVG preview toolbar size
	"svg.preview.toolbarSize": "middle",

	// How the previewer interacts with the user
	//  - onlyOne: Only one preview window will be displayed
	//  - oneByOne: Each SVG document corresponds to a separate preview window
	"svg.preview.viewMode": "onlyOne",

	// Specifies whether Peacock should affect the activity bar.
	"peacock.affectActivityBar": true,

	// Specifies whether Peacock should affect the status bar while debugging.
	"peacock.affectDebuggingStatusBar": false,

	// Specifies whether Peacock should affect the editorGroup border.
	"peacock.affectEditorGroupBorder": false,

	// Specifies whether Peacock should affect the panel border.
	"peacock.affectPanelBorder": false,

	// Specifies whether Peacock should affect the sash border.
	"peacock.affectSashHover": true,

	// Specifies whether Peacock should affect the sideBar border.
	"peacock.affectSideBarBorder": false,

	// Specifies whether Peacock should affect the status or title borders.
	"peacock.affectStatusAndTitleBorders": false,

	// Specifies whether Peacock should affect the status bar.
	"peacock.affectStatusBar": true,

	// Specifies whether Peacock should affect the active tab's border.
	"peacock.affectTabActiveBorder": false,

	// Specifies whether Peacock should affect the title bar.
	"peacock.affectTitleBar": true,

	// The Peacock color that will be applied to workspaces. This should only be set at the workspace level.
	"peacock.color": "",

	// Specifies the amount to darken or lighten the color, in percentage
	"peacock.darkenLightenPercentage": 5,

	// Specifies the override value for the dark foreground color
	"peacock.darkForegroundColor": "#15202b",

	// Adjusts the colorization of affected elements to provide visual contrast
	"peacock.elementAdjustments": {
		"activityBar": "lighten",
		"statusBar": "none",
		"titleBar": "none"
	},

	// Your favorite colors
	"peacock.favoriteColors": [
		{
			"name": "Angular Red",
			"value": "#dd0531"
		},
		{
			"name": "Azure Blue",
			"value": "#007fff"
		},
		{
			"name": "JavaScript Yellow",
			"value": "#f9e64f"
		},
		{
			"name": "Mandalorian Blue",
			"value": "#1857a4"
		},
		{
			"name": "Node Green",
			"value": "#215732"
		},
		{
			"name": "React Blue",
			"value": "#61dafb"
		},
		{
			"name": "Something Different",
			"value": "#832561"
		},
		{
			"name": "Svelte Orange",
			"value": "#ff3d00"
		},
		{
			"name": "Vue Green",
			"value": "#42b883"
		}
	],

	// Recommended to remain false. However, when set to true Peacock will not colorize badges in any of the affected elements in response to background alterations
	"peacock.keepBadgeColor": false,

	// Recommended to remain false. However, when set to true Peacock will not colorize the foreground of any of the affected elements and will only alter the background
	"peacock.keepForegroundColor": false,

	// Specifies the override value for the light foreground color
	"peacock.lightForegroundColor": "#e7e7e7",

	// The Peacock color that will be applied to remote workspaces.
	"peacock.remoteColor": "",

	// Show the Peacock color in the status bar
	"peacock.showColorInStatusBar": true,

	// Specifies whether Peacock should choose a random color from the favorites list or a purely random color.
	"peacock.surpriseMeFromFavoritesOnly": false,

	// Specifies that Peacock should surprise you at the start of every editing session, only when a color isn't already set. 
	"peacock.surpriseMeOnStartup": false,

	// Peacock color for Live Share Color when acting as a Guest 
	"peacock.vslsJoinColor": "",

	// Peacock color for Live Share Color when acting as a Host 
	"peacock.vslsShareColor": "",

	// When creating a hanging indent, do not put the closing bracket on its own line.
	"pythonIndent.keepHangingBracketOnLine": false,

	// Trims lines that contain only whitespace after pressing Enter on them.
	"pythonIndent.trimLinesWithOnlyWhitespace": false,

	// After creating a hanging indent, press tab to leave the indented section and go to the ending bracket.
	"pythonIndent.useTabOnHangingIndent": false,

	// The default color to be used in svg previews
	"gutterpreview.currentColorForSVG": "white",

	// A flag which indicates whether resources should be resolved from references
	"gutterpreview.enableReferenceLookup": false,

	// The maximum height of the image preview
	"gutterpreview.imagePreviewMaxHeight": "100",

	// The maximum width of the image preview, if configured to > 0, it is used instead of the max height setting
	"gutterpreview.imagePreviewMaxWidth": "-1",

	// Specify path mapping to be computed relative to project root.
	"gutterpreview.paths": {},

	// A flag which indicates whether the image preview should be shown on the gutter
	"gutterpreview.showImagePreviewOnGutter": true,

	// A flag which indicates whether to underline recognized URLs
	"gutterpreview.showUnderline": true,

	// Additional folder to consider when resolving relative urls
	"gutterpreview.sourceFolder": "src",

	// Enables line decoration for Kite code finder.
	"kite.codefinder.enableLineDecoration": false,

	// Array of file extensions for which Kite will not provide completions, e.g. ['.go', '.ts']. Requires restart of VSCode.
	"kite.completions.disabledFileExtensions": [],

	// Displays JSON data used by a view and also updates sample.html with the last rendered HTML.
	"kite.developerMode": false,

	// For JavaScript and Go: Enabling this will cause Kite to trigger completions after a space, ( and [. Note that this may cause completions from other providers to not show up.
	"kite.enableOptionalCompletionsTriggers": false,

	// Enable snippet completions
	"kite.enableSnippets": true,

	// The verbosity level of Kite's logs.
	"kite.loggingLevel": "info",

	// Interval in milliseconds at which the Kite extension polls Kite Engine to get the status of the current file.
	"kite.pollingInterval": 5000,

	// Whether or not to show the Kite welcome notification on startup.
	"kite.showWelcomeNotificationOnStartup": true,

	// Automatically start Kite Engine on editor startup if it's not already running.
	"kite.startKiteEngineOnStartup": true,

	// Allow SSL connnection with unauthorized self-signed certificates. Defaults to false
	"github.allowUnsafeSSL": false,

	// Automatically publish the current branch before creating a pull request. Defaults to false
	"github.autoPublish": false,

	// By default the pull request description is the first commit message. When this property is set, the user is asked for a description when creating the PR. This can be a single-line description via an input dialog ('singleLine') or a multi-line markdown description via the editor configured in git ('gitEditor').
	"github.customPullRequestDescription": "off",

	// Ask the user for a custom title when creating the PR. If false, defaults to the last commit message.
	"github.customPullRequestTitle": false,

	// Path to the git executable. If it is in the OS path, this should not be necessary to set.
	"github.gitCommand": "",

	// By default the extension asks the user during merge process. This could be set to on of 'merge', 'squash' or 'rebase' to define the prefered method and not to be asked every time.
	"github.preferedMergeMethod": "",

	// Defines the name of the git remote. Defaults to undefined which automatically tries to determine the proper remote name.
	"github.remoteName": "",

	// Enables or disables the coloring of the status bar based on the mergeable state.
	"github.statusbar.color": true,

	// Defines which command is executed when clicking the status bar item. Default behaviour is the create-pull-request-then-merge cycle (different command based on state). For example to open the current pull request set this to 'vscode-github.browserSimplePullRequest'
	"github.statusbar.command": null,

	// True if the statusbar integration should be enabled. Defaults to true
	"github.statusbar.enabled": true,

	// Overrides the default failure text.
	"github.statusbar.failureText": "",

	// Overrides the default pending text.
	"github.statusbar.pendingText": "",

	// Interval in seconds to refresh the current pull request status.
	"github.statusbar.refresh": 5,

	// Overrides the default success text.
	"github.statusbar.successText": "",

	// By default the extension get the repository and user from .git/config. For forks where upstream is a different repository this could be configured here (e.g. microsoft/typescript).
	"github.upstream": "",

	// GitLab setting to 'remove_source_branch' per MergeRequest.
	"gitlab.removeSourceBranch": false,

	// If .vscode/tasks.json exists and this setting is true, runs the 'Run Build Task' command
	"autorun.build": false,

	// If .vscode/launch.json exists, runs either the 'Start Debugging' (=debug) or 'Start Without Debugging' (=run) command
	"autorun.launch": "none",

	// Test framework to use for Python Test Explorer (default is null and Python extension settings are used)
	"pythonTestExplorer.testFramework": null,

	// Arguments passed in. Each argument is a separate item in the array.
	"pythonTestExplorer.testplanArgs": [],

	// Enable testing using Testplan. Note that Testplan is only supported for Python 3.7+.
	"pythonTestExplorer.testplanEnabled": false,

	// Relative path to testplan main suite.
	"pythonTestExplorer.testplanPath": "test_plan.py",

	// A debug setting.
	// Please do not change unless you know what you are doing!
	"calculator._debug_disableinputclipboard": false,

	// The value to start counting from when using the calculator.count command.
	"calculator.count_start": 0,

	// Disables the calculation widget.
	"calculator.disable_widget": false,

	// Arguments for clangd server.
	"clangd.arguments": [],

	// Check for language server updates on startup.
	"clangd.checkUpdates": false,

	// Warn about conflicting extensions and suggest disabling them.
	"clangd.detectExtensionConflicts": true,

	// Extra clang flags used to parse files when no compilation database is found.
	"clangd.fallbackFlags": [],

	// What to do when clangd configuration files are changed. Ignored for clangd 12+, which can reload such files itself.
	//  - prompt: Prompt the user for restarting the server
	//  - restart: Automatically restart the server
	//  - ignore: Do nothing
	"clangd.onConfigChanged": "prompt",

	// The path to clangd executable, e.g.: /usr/bin/clangd.
	"clangd.path": "clangd",

	// Auto restart clangd (up to 4 times) if it crashes.
	"clangd.restartAfterCrash": true,

	// Enable semantic highlighting in clangd.
	"clangd.semanticHighlighting": true,

	// Always rank completion items on the server as you type. This produces more accurate results at the cost of higher latency than client-side filtering.
	"clangd.serverCompletionRanking": true,

	// Names a file that clangd should log a performance trace to, in chrome trace-viewer JSON format.
	"clangd.trace": "",

	// Configure explainshell server in order to get hover documentation on flags and options.
	"bashIde.explainshellEndpoint": "",

	// Glob pattern for finding and parsing shell script files.
	"bashIde.globPattern": "**/*@(.sh|.inc|.bash|.command)",

	// Controls if parsing errors will be highlighted as problems.
	"bashIde.highlightParsingErrors": false,

	// Enable automatic content-based separator autodetection for the specified list of separators
	"rainbow_csv.autodetect_separators": [
		"\t",
		",",
		";",
		"|"
	],

	// Minimum number of non-comment lines in file for content-based autodetection
	"rainbow_csv.autodetection_min_line_count": 10,

	// Comment lines prefix, e.g. "#". Set to empty string to disable
	"rainbow_csv.comment_prefix": "",

	// CSV Lint: detect leading and trailing whitespaces in fields and show warning
	"rainbow_csv.csv_lint_detect_trailing_spaces": false,

	// Enable automatic linting/checking of opened csv files
	"rainbow_csv.enable_auto_csv_lint": true,

	// Enable "Preview CSV head" option in File Explorer context menu
	"rainbow_csv.enable_context_menu_head": true,

	// Enable "Preview CSV tail" option in File Explorer context menu
	"rainbow_csv.enable_context_menu_tail": false,

	// Enable automatic content based separator autodetection
	"rainbow_csv.enable_separator_autodetection": true,

	// Enable column-info tooltip on hover
	"rainbow_csv.enable_tooltip": true,

	// Show column names in tooltip
	"rainbow_csv.enable_tooltip_column_names": true,

	// Show warnings in tooltip
	"rainbow_csv.enable_tooltip_warnings": true,

	// RBQL treats the first line as header by default
	"rainbow_csv.rbql_with_headers_by_default": false,

	// Depreciated: This setting has been renamed to `git-graph.commitDetailsView.autoCenter`
	// Automatically center the commit details view when it is opened.
	"git-graph.autoCenterCommitDetailsView": true,

	// Depreciated: This setting has been renamed to `git-graph.referenceLabels.combineLocalAndRemoteBranchLabels`
	// Combine local and remote branch labels if they refer to the same branch, and are on the same commit.
	"git-graph.combineLocalAndRemoteBranchLabels": true,

	// Automatically center the Commit Details View when it is opened.
	"git-graph.commitDetailsView.autoCenter": true,

	// Render the File Tree in the Commit Details View in a compacted form, such that folders with a single child folder are compressed into a single combined folder element.
	"git-graph.commitDetailsView.fileView.fileTree.compactFolders": true,

	// Sets the default type of File View used in the Commit Details View. This can be overridden per repository using the controls on the right side of the Commit Details View.
	//  - File Tree: Display files in a tree structure.
	//  - File List: Display files in a list (useful for repositories with deep folder structures).
	"git-graph.commitDetailsView.fileView.type": "File Tree",

	// Specifies where the Commit Details View is rendered in the Git Graph View.
	//  - Inline: Show the Commit Details View inline with the graph & commits.
	//  - Docked to Bottom: Show the Commit Details View docked to the bottom of the Git Graph View.
	"git-graph.commitDetailsView.location": "Inline",

	// Depreciated: This setting has been renamed to `git-graph.commitDetailsView.fileView.fileTree.compactFolders`
	// Render the File Tree in the Commit Details / Comparison View in a compacted form, such that folders with a single child folder are compressed into a single combined folder element.
	"git-graph.commitDetailsViewFileTreeCompactFolders": true,

	// Depreciated: This setting has been renamed to `git-graph.commitDetailsView.location`
	// Specifies where the Commit Details View is rendered in the Git Graph view.
	//  - Inline: Show the Commit Details View inline with the graph
	//  - Docked to Bottom: Show the Commit Details View docked to the bottom of the Git Graph view
	"git-graph.commitDetailsViewLocation": "Inline",

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.order`
	// Specifies the order of commits on the Git Graph view. See [git log](https://git-scm.com/docs/git-log#_commit_ordering) for more information on each order option.
	//  - date: Show commits in the commit timestamp order.
	//  - author-date: Show commits in the author timestamp order.
	//  - topo: Avoid showing commits on multiple lines of history intermixed.
	"git-graph.commitOrdering": "date",

	// Customise which context menu actions are visible. For example, if you want to hide the rebase action from the branch context menu, a suitable value for this setting is `{ "branch": { "rebase": false } }`. For more information of how to configure this setting, view the documentation [here](https://github.com/mhutchie/vscode-git-graph/wiki/Extension-Settings#context-menu-actions-visibility).
	"git-graph.contextMenuActionsVisibility": {},

	// An array of Custom Branch Glob Patterns to be shown in the 'Branches' dropdown. Example: [{"name": "Feature Requests", "glob": "heads/feature/*"}]
	"git-graph.customBranchGlobPatterns": [],

	// An array of custom Emoji Shortcode mappings. Example: [{"shortcode": ":sparkles:", "emoji":"✨"}]
	"git-graph.customEmojiShortcodeMappings": [],

	// An array of custom Pull Request providers that can be used in the "Pull Request Creation" Integration. For information on how to configure this setting, see the documentation [here](https://github.com/mhutchie/vscode-git-graph/wiki/Configuring-a-custom-Pull-Request-Provider).
	"git-graph.customPullRequestProviders": [],

	// Specifies the date format to be used in the "Date" column on the Git Graph View.
	//  - Date & Time: Show the date and time (e.g. "24 Mar 2019 21:34")
	//  - Date Only: Show the date only (e.g. "24 Mar 2019")
	//  - ISO Date & Time: Show the ISO date and time (e.g. "2019-03-24 21:34")
	//  - ISO Date Only: Show the ISO date only (e.g. "2019-03-24")
	//  - Relative: Show relative times (e.g. "5 minutes ago")
	"git-graph.date.format": "Date & Time",

	// Specifies the date type to be displayed in the "Date" column on the Git Graph View.
	//  - Author Date: Use the author date of a commit.
	//  - Commit Date: Use the committer date of a commit.
	"git-graph.date.type": "Author Date",

	// Depreciated: This setting has been renamed to `git-graph.date.format`
	// Specifies the date format to be used in the "Date" column on the Git Graph View.
	//  - Date & Time: Show the date and time, for example "24 Mar 2019 21:34"
	//  - Date Only: Show the date only, for example "24 Mar 2019"
	//  - ISO Date & Time: Show the ISO date and time, for example "2019-03-24 21:34"
	//  - ISO Date Only: Show the ISO date only, for example "2019-03-24"
	//  - Relative: Show relative times, for example "5 minutes ago"
	"git-graph.dateFormat": "Date & Time",

	// Depreciated: This setting has been renamed to `git-graph.date.type`
	// Specifies the date type to be displayed in the "Date" column on the Git Graph View.
	//  - Author Date: Use the author date of a commit
	//  - Commit Date: Use the committer date of a commit
	"git-graph.dateType": "Author Date",

	// An object specifying the default visibility of the Date, Author & Commit columns. Example: {"Date": true, "Author": true, "Commit": true}
	"git-graph.defaultColumnVisibility": {
		"Date": true,
		"Author": true,
		"Commit": true
	},

	// Depreciated: This setting has been renamed to `git-graph.commitDetailsView.fileView.type`
	// Sets the default type of File View used in the Commit Details / Comparison Views. This can be overridden per repository using the controls on the right side of the Commit Details / Comparison Views.
	//  - File Tree: Display files in a tree structure
	//  - File List: Display files in a list (useful for repositories with deep folder structures)
	"git-graph.defaultFileViewType": "File Tree",

	// Default state of the field indicating whether the tag should be pushed to a remote once it is added.
	"git-graph.dialog.addTag.pushToRemote": false,

	// Default type of the tag being added.
	"git-graph.dialog.addTag.type": "Annotated",

	// Default state of the "Reinstate Index" checkbox.
	"git-graph.dialog.applyStash.reinstateIndex": false,

	// Default state of the "No Commit" checkbox.
	"git-graph.dialog.cherryPick.noCommit": false,

	// Default state of the "Record Origin" checkbox.
	"git-graph.dialog.cherryPick.recordOrigin": false,

	// Default state of the "Check out" checkbox.
	"git-graph.dialog.createBranch.checkOut": false,

	// Default state of the "Force Delete" checkbox.
	"git-graph.dialog.deleteBranch.forceDelete": false,

	// Default state of the "Force Fetch" checkbox.
	"git-graph.dialog.fetchIntoLocalBranch.forceFetch": false,

	// Default state of the "Prune" checkbox.
	"git-graph.dialog.fetchRemote.prune": false,

	// Default state of the "Prune Tags" checkbox.
	"git-graph.dialog.fetchRemote.pruneTags": false,

	// Specifies a substitution that is automatically performed when space characters are entered or pasted into reference inputs on dialogs (e.g. Create Branch, Add Tag, etc.).
	//  - None: Don't replace spaces.
	//  - Hyphen: Replace space characters with hyphens, for example: "new branch" -> "new-branch".
	//  - Underscore: Replace space characters with underscores, for example: "new branch" -> "new_branch".
	"git-graph.dialog.general.referenceInputSpaceSubstitution": "None",

	// Default state of the "No Commit" checkbox.
	"git-graph.dialog.merge.noCommit": false,

	// Default state of the "Create a new commit even if fast-forward is possible" checkbox.
	"git-graph.dialog.merge.noFastForward": true,

	// Default state of the "Squash Commits" checkbox.
	"git-graph.dialog.merge.squashCommits": false,

	// Specifies the message format used for the squashed commit (when the "Squash Commits" option is selected).
	//  - Default: Use the squash message generated by Git Graph.
	//  - Git SQUASH_MSG: Use the detailed squash message generated by Git (stored in .git/SQUASH_MSG).
	"git-graph.dialog.merge.squashMessageFormat": "Default",

	// Default state of the "Reinstate Index" checkbox.
	"git-graph.dialog.popStash.reinstateIndex": false,

	// Default state of the "Create a new commit even if fast-forward is possible" checkbox.
	"git-graph.dialog.pullBranch.noFastForward": false,

	// Default state of the "Squash Commits" checkbox.
	"git-graph.dialog.pullBranch.squashCommits": false,

	// Specifies the message format used for the squashed commit (when the "Squash Commits" option is selected).
	//  - Default: Use the squash message generated by Git Graph.
	//  - Git SQUASH_MSG: Use the detailed squash message generated by Git (stored in .git/SQUASH_MSG).
	"git-graph.dialog.pullBranch.squashMessageFormat": "Default",

	// Default state of the "Ignore Date (non-interactive rebase only)" checkbox.
	"git-graph.dialog.rebase.ignoreDate": true,

	// Default state of the "Launch Interactive Rebase in new Terminal" checkbox.
	"git-graph.dialog.rebase.launchInteractiveRebase": false,

	// Default mode to be used for the reset action.
	//  - Soft: Soft - Keep all changes, but reset head
	//  - Mixed: Mixed - Keep working tree, but reset index
	//  - Hard: Hard - Discard all changes
	"git-graph.dialog.resetCurrentBranchToCommit.mode": "Mixed",

	// Default mode to be used for the reset action.
	//  - Mixed: Mixed - Keep working tree, but reset index
	//  - Hard: Hard - Discard all changes
	"git-graph.dialog.resetUncommittedChanges.mode": "Mixed",

	// Default state of the "Include Untracked" checkbox.
	"git-graph.dialog.stashUncommittedChanges.includeUntracked": true,

	// Visual file change A|M|D|R|U indicators in the Commit Details View for users with colour blindness. In the future, this setting will enable any additional accessibility related features of Git Graph that aren't enabled by default.
	"git-graph.enhancedAccessibility": false,

	// Depreciated: This setting has been renamed to `git-graph.repository.fetchAndPrune`
	// Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any remote-tracking references that no longer exist on the remote(s).
	"git-graph.fetchAndPrune": false,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.fetchAvatars`
	// Fetch avatars of commit authors and committers. By enabling this setting, you consent to commit author and committer email addresses being sent GitHub, GitLab or Gravatar, depending on the repositories remote origin.
	"git-graph.fetchAvatars": false,

	// The character set encoding used when retrieving a specific version of repository files (e.g. in the Diff View). A list of all supported encodings can be found [here](https://github.com/ashtuchkin/iconv-lite/wiki/Supported-Encodings).
	"git-graph.fileEncoding": "utf8",

	// Specifies the colours used on the graph.
	"git-graph.graph.colours": [
		"#0085d9",
		"#d9008f",
		"#00d90a",
		"#d98500",
		"#a300d9",
		"#ff0000",
		"#00d9cc",
		"#e138e8",
		"#85d900",
		"#dc5b23",
		"#6f24d6",
		"#ffcc00"
	],

	// Specifies the style of the graph.
	//  - rounded: Use smooth curves when transitioning between branches on the graph.
	//  - angular: Use angular lines when transitioning between branches on the graph.
	"git-graph.graph.style": "rounded",

	// Specifies how the Uncommitted Changes are displayed on the graph.
	//  - Open Circle at the Uncommitted Changes: Display the Uncommitted Changes as a grey open circle, connected to the commit referenced by HEAD with a solid grey line. The current file system's state is therefore always displayed as an open circle.
	//  - Open Circle at the Checked Out Commit: Display the Uncommitted Changes as a grey closed circle, connected to the commit referenced by HEAD with a dotted grey line. The commit referenced by HEAD is therefore always displayed as an open circle.
	"git-graph.graph.uncommittedChanges": "Open Circle at the Uncommitted Changes",

	// Depreciated: This setting has been renamed to `git-graph.graph.colours`
	// Specifies the colours used on the graph.
	"git-graph.graphColours": [
		"#0085d9",
		"#d9008f",
		"#00d90a",
		"#d98500",
		"#a300d9",
		"#ff0000",
		"#00d9cc",
		"#e138e8",
		"#85d900",
		"#dc5b23",
		"#6f24d6",
		"#ffcc00"
	],

	// Depreciated: This setting has been renamed to `git-graph.graph.style`
	// Specifies the style of the graph.
	//  - rounded: Use smooth curves when transitioning between branches on the graph
	//  - angular: Use angular lines when transitioning between branches on the graph
	"git-graph.graphStyle": "rounded",

	// Depreciated: This setting has been renamed to `git-graph.repository.includeCommitsMentionedByReflogs`
	// Include commits only mentioned by reflogs in the Git Graph View (only applies when showing all branches). This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.includeCommitsMentionedByReflogs": false,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.initialLoad`
	// Specifies the number of commits to initially load.
	"git-graph.initialLoadCommits": 300,

	// Specifies the path and filename of the Shell executable to be used by the Visual Studio Code Integrated Terminal, when it is opened by Git Graph. For example, to use Git Bash on Windows this setting would commonly be set to "C:\Program Files\Git\bin\bash.exe". If this setting is left blank, the default Shell is used.
	"git-graph.integratedTerminalShell": "",

	// The keybinding for the keyboard shortcut that opens the Find Widget in the Git Graph View.
	"git-graph.keyboardShortcut.find": "CTRL/CMD + F",

	// The keybinding for the keyboard shortcut that refreshes the Git Graph View.
	"git-graph.keyboardShortcut.refresh": "CTRL/CMD + R",

	// The keybinding for the keyboard shortcut that scrolls the Git Graph View to be centered on the commit referenced by HEAD.
	"git-graph.keyboardShortcut.scrollToHead": "CTRL/CMD + H",

	// The keybinding for the keyboard shortcut that scrolls the Git Graph View to the first (or next) stash in the loaded commits. The Shift Key Modifier can be applied to this keybinding to scroll the Git Graph View to the last (or previous) stash in the loaded commits.
	"git-graph.keyboardShortcut.scrollToStash": "CTRL/CMD + S",

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.loadMore`
	// Specifies the number of additional commits to load when the "Load More Commits" button is pressed, or more commits are automatically loaded.
	"git-graph.loadMoreCommits": 100,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.loadMoreAutomatically`
	// When the view has been scrolled to the bottom, automatically load more commits if they exist (instead of having to press the "Load More Commits" button).
	"git-graph.loadMoreCommitsAutomatically": true,

	// Parse and render a frequently used subset of inline Markdown formatting rules in commit messages and tag details (bold, italics, bold & italics, and inline code blocks).
	"git-graph.markdown": true,

	// Specifies the maximum depth of subfolders to search when discovering repositories in the workspace. Note: Sub-repos are not automatically detected when searching subfolders, however they can be manually added by running the command "Git Graph: Add Git Repository" in the Command Palette.
	"git-graph.maxDepthOfRepoSearch": 0,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.mute.commitsThatAreNotAncestorsOfHead`
	// Display commits that aren't ancestors of the checked-out branch / commit with a muted text color. Muting will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
	"git-graph.muteCommitsThatAreNotAncestorsOfHead": false,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.mute.mergeCommits`
	// Display merge commits with a muted text color.
	"git-graph.muteMergeCommits": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.onlyFollowFirstParent`
	// Only follow the first parent of commits when discovering the commits to load in the Git Graph View. See [--first-parent](https://git-scm.com/docs/git-log#Documentation/git-log.txt---first-parent) to find out more about this setting.
	"git-graph.onlyFollowFirstParent": false,

	// Depreciated: This setting has been renamed to `git-graph.openNewTabEditorGroup`
	// Specifies which Editor Group the Visual Studio Code Diff View is opened in.
	//  - Active: Open the Visual Studio Code Diff View in the Active Editor Group.
	//  - Beside: Open the Visual Studio Code Diff View beside the Active Editor Group.
	//  - One: Open the Visual Studio Code Diff View in the First Editor Group.
	//  - Two: Open the Visual Studio Code Diff View in the Second Editor Group.
	//  - Three: Open the Visual Studio Code Diff View in the Third Editor Group.
	//  - Four: Open the Visual Studio Code Diff View in the Fourth Editor Group.
	//  - Five: Open the Visual Studio Code Diff View in the Fifth Editor Group.
	//  - Six: Open the Visual Studio Code Diff View in the Sixth Editor Group.
	//  - Seven: Open the Visual Studio Code Diff View in the Seventh Editor Group.
	//  - Eight: Open the Visual Studio Code Diff View in the Eighth Editor Group.
	//  - Nine: Open the Visual Studio Code Diff View in the Ninth Editor Group.
	"git-graph.openDiffTabLocation": "Active",

	// Specifies the Editor Group where Git Graph should open new tabs, when performing the following actions from the Git Graph View: Viewing the Visual Studio Code Diff View, Opening a File, Viewing a File at a Specific Revision.
	//  - Active: Open the new tab in the Active Editor Group.
	//  - Beside: Open the new tab beside the Active Editor Group.
	//  - One: Open the new tab in the First Editor Group.
	//  - Two: Open the new tab in the Second Editor Group.
	//  - Three: Open the new tab in the Third Editor Group.
	//  - Four: Open the new tab in the Fourth Editor Group.
	//  - Five: Open the new tab in the Fifth Editor Group.
	//  - Six: Open the new tab in the Sixth Editor Group.
	//  - Seven: Open the new tab in the Seventh Editor Group.
	//  - Eight: Open the new tab in the Eighth Editor Group.
	//  - Nine: Open the new tab in the Ninth Editor Group.
	"git-graph.openNewTabEditorGroup": "Active",

	// Depreciated: This setting has been renamed to `git-graph.repository.onLoad.scrollToHead`
	// When opening or switching repositories in the Git Graph View, automatically scroll the view to be centered on the commit referenced by HEAD. This will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
	"git-graph.openRepoToHead": false,

	// Open the Git Graph View to the repository containing the active Text Editor document.
	"git-graph.openToTheRepoOfTheActiveTextEditorDocument": false,

	// Depreciated: This setting has been renamed to `git-graph.referenceLabels.alignment`
	// Specifies how branch and tag reference labels are aligned for each commit.
	//  - Normal: Show branch & tag labels on the left of the commit message in the 'Description' column.
	//  - Branches (on the left) & Tags (on the right): Show branch labels on the left of the commit message in the 'Description' column, and tag labels on the right.
	//  - Branches (aligned to the graph) & Tags (on the right): Show branch labels aligned to the graph in the 'Graph' column, and tag labels on the right in the 'Description' column.
	"git-graph.referenceLabelAlignment": "Normal",

	// Specifies how branch and tag reference labels are aligned for each commit.
	//  - Normal: Show branch & tag labels on the left of the commit message in the 'Description' column.
	//  - Branches (on the left) & Tags (on the right): Show branch labels on the left of the commit message in the 'Description' column, and tag labels on the right.
	//  - Branches (aligned to the graph) & Tags (on the right): Show branch labels aligned to the graph in the 'Graph' column, and tag labels on the right in the 'Description' column.
	"git-graph.referenceLabels.alignment": "Normal",

	// Combine local and remote branch labels if they refer to the same branch, and are on the same commit.
	"git-graph.referenceLabels.combineLocalAndRemoteBranchLabels": true,

	// Fetch avatars of commit authors and committers. By enabling this setting, you consent to commit author and committer email addresses being sent GitHub, GitLab or Gravatar, depending on the repositories remote origin.
	"git-graph.repository.commits.fetchAvatars": false,

	// Specifies the number of commits to initially load.
	"git-graph.repository.commits.initialLoad": 300,

	// Specifies the number of additional commits to load when the "Load More Commits" button is pressed, or more commits are automatically loaded.
	"git-graph.repository.commits.loadMore": 100,

	// When the view has been scrolled to the bottom, automatically load more commits if they exist (instead of having to press the "Load More Commits" button).
	"git-graph.repository.commits.loadMoreAutomatically": true,

	// Display commits that aren't ancestors of the checked-out branch / commit with a muted text color. Muting will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
	"git-graph.repository.commits.mute.commitsThatAreNotAncestorsOfHead": false,

	// Display merge commits with a muted text color.
	"git-graph.repository.commits.mute.mergeCommits": true,

	// Specifies the order of commits on the Git Graph View. See [git log](https://git-scm.com/docs/git-log#_commit_ordering) for more information on each order option. This can be overridden per repository via the Git Graph View's Column Header Context Menu.
	//  - date: Show commits in the commit timestamp order.
	//  - author-date: Show commits in the author timestamp order.
	//  - topo: Avoid showing commits on multiple lines of history intermixed.
	"git-graph.repository.commits.order": "date",

	// Show the commit's signature status to the right of the Committer in the Commit Details View (only for signed commits). Hovering over the signature icon displays a tooltip with the signature details. Requires Git (>= 2.4.0) & GPG (or equivalent) to be installed on the same machine that is running Visual Studio Code.
	"git-graph.repository.commits.showSignatureStatus": false,

	// Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any remote-tracking references that no longer exist on the remote(s).
	"git-graph.repository.fetchAndPrune": false,

	// Before fetching from remote(s) using the Fetch button on the Git Graph View Control Bar, remove any local tags that no longer exist on the remote(s). Requires Git >= 2.17.0, and the "Repository: Fetch And Prune" setting to be enabled. Caution: If you work in repositories that have multiple remotes, it is not recommended to use this setting (instead you can prune tags for a specific remote via "Fetch Remote" Dialog from the Repository Settings Widget on the Git Graph View).
	"git-graph.repository.fetchAndPruneTags": false,

	// Include commits only mentioned by reflogs in the Git Graph View (only applies when showing all branches). This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.repository.includeCommitsMentionedByReflogs": false,

	// Automatically scroll the Git Graph View to be centered on the commit referenced by HEAD. This will only occur if the commit referenced by HEAD is within the loaded commits on the Git Graph View.
	"git-graph.repository.onLoad.scrollToHead": false,

	// Show the checked out branch when a repository is loaded in the Git Graph View. This setting can be used in conjunction with "Repository > On Load: Show Specific Branches". Default: false (show all branches)
	"git-graph.repository.onLoad.showCheckedOutBranch": false,

	// Show specific branches when a repository is loaded in the Git Graph View. Branches can be specified as follows: A local branch name (e.g. `master`), a remote-tracking branch name prefixed with "remotes/" (e.g. `remotes/origin/master`), or a glob pattern defined in `git-graph.customBranchGlobPatterns` prefixed with "--glob=" (e.g. `--glob=heads/feature/*`). This setting can be used in conjunction with "Repository > On Load: Show Checked Out Branch". Default: [] (show all branches)
	"git-graph.repository.onLoad.showSpecificBranches": [],

	// Only follow the first parent of commits when discovering the commits to load in the Git Graph View. See [--first-parent](https://git-scm.com/docs/git-log#Documentation/git-log.txt---first-parent) to find out more about this setting. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.repository.onlyFollowFirstParent": false,

	// Show Commits that are only referenced by tags in Git Graph.
	"git-graph.repository.showCommitsOnlyReferencedByTags": true,

	// Show Remote Branches in Git Graph by default. This can be overridden per repository from the Git Graph View's Control Bar.
	"git-graph.repository.showRemoteBranches": true,

	// Show Remote HEAD Symbolic References in Git Graph (e.g. "origin/HEAD").
	"git-graph.repository.showRemoteHeads": true,

	// Show Stashes in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.repository.showStashes": true,

	// Show Tags in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.repository.showTags": true,

	// Show uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
	"git-graph.repository.showUncommittedChanges": true,

	// Show untracked files when viewing the uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
	"git-graph.repository.showUntrackedFiles": true,

	// Enables commit signing with GPG or X.509.
	"git-graph.repository.sign.commits": false,

	// Enables tag signing with GPG or X.509.
	"git-graph.repository.sign.tags": false,

	// Respect [.mailmap](https://git-scm.com/docs/git-check-mailmap#_mapping_authors) files when displaying author & committer names and email addresses.
	"git-graph.repository.useMailmap": false,

	// Specifies the order that repositories are sorted in the repository dropdown on the Git Graph View (only visible when more than one repository exists in the current Visual Studio Code Workspace).
	//  - Full Path: Sort repositories alphabetically by the full path of the repository.
	//  - Name: Sort repositories alphabetically by the name of the repository.
	//  - Workspace Full Path: Sort repositories according to the Visual Studio Code Workspace Folder order, then alphabetically by the full path of the repository.
	"git-graph.repositoryDropdownOrder": "Workspace Full Path",

	// Specifies if the Git Graph View's Visual Studio Code context is kept when the panel is no longer visible (e.g. moved to background tab). Enabling this setting will make Git Graph load significantly faster when switching back to the Git Graph tab, however has a higher memory overhead.
	"git-graph.retainContextWhenHidden": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.showCommitsOnlyReferencedByTags`
	// Show commits that are only referenced by tags in Git Graph.
	"git-graph.showCommitsOnlyReferencedByTags": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.onLoad.showCheckedOutBranch`
	// Show the current branch by default when Git Graph is opened. Default: false (show all branches)
	"git-graph.showCurrentBranchByDefault": false,

	// Depreciated: This setting has been renamed to `git-graph.repository.commits.showSignatureStatus`
	// Show the commit's signature status to the right of the Committer in the Commit Details View (only for signed commits). Hovering over the signature icon displays a tooltip with the signature details. Requires Git (>= 2.4.0) & GPG (or equivalent) to be installed on the same machine that is running Visual Studio Code.
	"git-graph.showSignatureStatus": false,

	// Show a Status Bar Item that opens the Git Graph View when clicked.
	"git-graph.showStatusBarItem": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.showTags`
	// Show Tags in Git Graph by default. This can be overridden per repository in the Git Graph View's Repository Settings Widget.
	"git-graph.showTags": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.showUncommittedChanges`
	// Show uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
	"git-graph.showUncommittedChanges": true,

	// Depreciated: This setting has been renamed to `git-graph.repository.showUntrackedFiles`
	// Show untracked files when viewing the uncommitted changes. If you work on large repositories, disabling this setting can reduce the load time of the Git Graph View.
	"git-graph.showUntrackedFiles": true,

	// Specifies where the "View Git Graph" action appears on the title of SCM Providers.
	//  - Inline: Show the 'View Git Graph' action on the title of SCM Providers
	//  - More Actions: Show the 'View Git Graph' action in the 'More Actions...' menu on the title of SCM Providers
	"git-graph.sourceCodeProviderIntegrationLocation": "Inline",

	// Specifies the colour theme of the icon displayed on the Git Graph tab.
	//  - colour: Show a colour icon which suits most Visual Studio Code colour themes
	//  - grey: Show a grey icon which suits Visual Studio Code colour themes that are predominantly grayscale
	"git-graph.tabIconColourTheme": "colour",

	// Depreciated: This setting has been renamed to `git-graph.repository.useMailmap`
	// Respect [.mailmap](https://git-scm.com/docs/git-check-mailmap#_mapping_authors) files when displaying author & committer names and email addresses.
	"git-graph.useMailmap": false,

	// Array of web apps with its connections
	"appService.connections": [],

	// The default web app to use when deploying represented by its full Azure id.  Every subsequent deployment of this workspace will deploy to this web app or slot. Can be disabled by setting to "None"
	"appService.defaultWebAppToDeploy": "",

	// The default subpath of a workspace folder to use when deploying.
	"appService.deploySubpath": "",

	// Prepends each line displayed in the Azure App Service output channel with a timestamp
	"appService.enableOutputTimestamps": true,

	// Enable remote debugging for Python web apps (experimental)
	"appService.enablePythonRemoteDebugging": false,

	// The name of the task to run after zip deployments.
	"appService.postDeployTask": "",

	// The name of the task to run before deploying.
	"appService.preDeployTask": "",

	// Show prompt to improve performance of Zip Deploy by excluding build artifacts from the zip file and running a build during deployment.
	"appService.showBuildDuringDeployPrompt": true,

	// Ask for confirmation before deploying to Azure App Service (deploying will overwrite any previous deployment and cannot be undone).
	"appService.showDeployConfirmation": true,

	// Show a warning when the "deploySubpath" setting does not match the selected folder for deploying.
	"appService.showDeploySubpathWarning": true,

	// Show or hide the App Service Explorer
	"appService.showExplorer": true,

	// Show hidden runtime stacks when creating a web app in Azure. WARNING: These stacks may be in preview or may not be available in all regions.
	"appService.showHiddenStacks": false,

	// Shows a warning that performance may drop when creating an app in an App Service Plan that has more than 3 web apps associated to it
	"appService.showPlanPerformanceWarning": true,

	// Shows warning that project is not configured for VS Code deployments
	"appService.showPreDeployWarning": true,

	// Show warning dialog on remote file uploading.
	"appService.showSavePrompt": true,

	// Defines which files in the workspace to deploy. This applies to Zip deploy only, has no effect on other deployment methods.
	"appService.zipGlobPattern": "**/*",

	// Defines which files in the workspace to ignore for Zip deploy. This applies to Zip deploy only, has no effect on other deployment methods.
	"appService.zipIgnorePattern": [],

	// The behavior to use when confirming delete of a resource group.
	//  - EnterName: Prompts with an input box where you enter the resource group name to delete.
	//  - ClickButton: Prompts with a warning dialog where you click a button to delete.
	"azureResourceGroups.deleteConfirmation": "EnterName",

	// Prepends each line displayed in the output channel with a timestamp.
	"azureResourceGroups.enableOutputTimestamps": true,

	// Show some ancillary resources that are created/managed by Azure infrastructure. Displaying them is typically useful when you want to clean up your resource groups or subscriptions.
	"azureResourceGroups.showHiddenTypes": false,

	// Equivalent to setting the DOCKER_CERT_PATH environment variable.
	"docker.certPath": "",

	// Command templates for `docker attach` / `docker exec -it` commands.
	"docker.commands.attach": "docker exec -it ${containerId} ${shellCommand}",

	// Command template(s) for `docker build` commands.
	"docker.commands.build": "docker build --pull --rm -f \"${dockerfile}\" -t ${tag} \"${context}\"",

	// Command templates for `docker-compose down` commands.
	"docker.commands.composeDown": [
		{
			"label": "Compose Down",
			"template": "docker-compose ${configurationFile} down",
			"contextTypes": [
				"moby"
			]
		},
		{
			"label": "Compose Down",
			"template": "docker compose ${configurationFile} down"
		}
	],

	// Command templates for `docker-compose up` commands.
	"docker.commands.composeUp": [
		{
			"label": "Compose Up",
			"template": "docker-compose ${configurationFile} up ${detached} ${build}",
			"contextTypes": [
				"moby"
			]
		},
		{
			"label": "Compose Up",
			"template": "docker compose ${configurationFile} up ${detached}"
		}
	],

	// Command templates for `docker-compose up <subset>` commands.
	"docker.commands.composeUpSubset": [
		{
			"label": "Compose Up",
			"template": "docker-compose ${profileList} ${configurationFile} up ${detached} ${build} ${serviceList}",
			"contextTypes": [
				"moby"
			]
		},
		{
			"label": "Compose Up",
			"template": "docker compose ${configurationFile} ${profileList} up ${detached} ${serviceList}"
		}
	],

	// Command templates for `docker logs` commands.
	"docker.commands.logs": "docker logs --tail 1000 -f ${containerId}",

	// Command templates for `docker run` commands.
	"docker.commands.run": "docker run --rm -d ${exposedPorts} ${tag}",

	// Command templates for `docker run -it` (interactive) commands.
	"docker.commands.runInteractive": "docker run --rm -it ${exposedPorts} ${tag}",

	// Any secondary properties to display for a container (an array). Possible elements include: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, and Tag
	"docker.containers.description": [
		"ContainerName",
		"Status"
	],

	// The property to use to group containers in Docker view: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, Tag, or None
	"docker.containers.groupBy": "Compose Project Name",

	// The primary property to display for a container: ContainerId, ContainerName, CreatedTime, FullTag, ImageId, Networks, Ports, Registry, Repository, RepositoryName, RepositoryNameAndTag, State, Status, or Tag
	"docker.containers.label": "FullTag",

	// The property to use to sort containers in Docker view: CreatedTime or Label
	"docker.containers.sortBy": "CreatedTime",

	// Equivalent to setting the DOCKER_CONTEXT environment variable.
	"docker.context": "",

	// Any secondary properties to display for a Docker context (an array). Possible elements include: Name, Description and DockerEndpoint
	"docker.contexts.description": [
		"Description"
	],

	// The primary property to display for a Docker context: Name, Description or DockerEndpoint
	"docker.contexts.label": "Name",

	// Set to true to include --build option when docker-compose command is invoked
	"docker.dockerComposeBuild": true,

	// Set to true to include --d (detached) option when docker-compose command is invoked
	"docker.dockerComposeDetached": true,

	// If specified, this object will be passed to the Dockerode constructor. Takes precedence over DOCKER_HOST, the Docker Host setting, and any existing Docker contexts.
	"docker.dockerodeOptions": {},

	// Absolute path to Docker client executable ('docker' command). If the path contains whitespace, it needs to be quoted appropriately.
	"docker.dockerPath": "docker",

	// Whether or not to enable the preview Docker Compose Language Service. Changing requires restart to take effect.
	"docker.enableDockerComposeLanguageService": true,

	// Docker view refresh interval (milliseconds)
	"docker.explorerRefreshInterval": 2000,

	// Equivalent to setting the DOCKER_HOST environment variable, for example, ssh://myuser@mymachine or tcp://1.2.3.4.
	"docker.host": "",

	// Build context PATH to pass to Docker build command.
	"docker.imageBuildContextPath": "",

	// Check for outdated base images once per Visual Studio Code session
	"docker.images.checkForOutdatedImages": true,

	// Any secondary properties to display for a image (an array). Possible elements include: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, Tag, and Size
	"docker.images.description": [
		"CreatedTime"
	],

	// The property to use to group images in Docker view: CreatedTime, FullTag, ImageId, None, Registry, Repository, RepositoryName, RepositoryNameAndTag, or Tag
	"docker.images.groupBy": "Repository",

	// The primary property to display for a image: CreatedTime, FullTag, ImageId, Registry, Repository, RepositoryName, RepositoryNameAndTag, Tag, or Size
	"docker.images.label": "Tag",

	// The property to use to sort images in Docker view: CreatedTime, Label, or Size
	"docker.images.sortBy": "CreatedTime",

	// Controls the diagnostic severity for the deprecated MAINTAINER instruction
	"docker.languageserver.diagnostics.deprecatedMaintainer": "warning",

	// Controls the diagnostic severity for parser directives that are not written in lowercase
	"docker.languageserver.diagnostics.directiveCasing": "warning",

	// Controls the diagnostic severity for flagging empty continuation lines found in instructions that span multiple lines
	"docker.languageserver.diagnostics.emptyContinuationLine": "warning",

	// Controls the diagnostic severity for instructions that are not written in uppercase
	"docker.languageserver.diagnostics.instructionCasing": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple CMD instructions
	"docker.languageserver.diagnostics.instructionCmdMultiple": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple ENTRYPOINT instructions
	"docker.languageserver.diagnostics.instructionEntrypointMultiple": "warning",

	// Controls the diagnostic severity for flagging a Dockerfile with multiple HEALTHCHECK instructions
	"docker.languageserver.diagnostics.instructionHealthcheckMultiple": "warning",

	// Controls the diagnostic severity for JSON instructions that are written incorrectly with single quotes
	"docker.languageserver.diagnostics.instructionJSONInSingleQuotes": "warning",

	// Controls the diagnostic severity for WORKDIR instructions that do not point to an absolute path
	"docker.languageserver.diagnostics.instructionWorkdirRelative": "warning",

	// Controls whether the Dockerfile formatter should ignore instructions that span multiple lines when formatting
	"docker.languageserver.formatter.ignoreMultilineInstructions": false,

	// Equivalent to setting the DOCKER_MACHINE_NAME environment variable.
	"docker.machineName": "",

	// Any secondary properties to display for a Docker network (an array). Possible elements include CreatedTime, NetworkDriver, NetworkId, and NetworkName
	"docker.networks.description": [
		"NetworkDriver",
		"CreatedTime"
	],

	// The property to use to group networks in Docker view: CreatedTime, NetworkDriver, NetworkId, NetworkName, or None
	"docker.networks.groupBy": "None",

	// The primary property to display for a Docker network: CreatedTime, NetworkDriver, NetworkId, or NetworkName
	"docker.networks.label": "NetworkName",

	// Show the built-in networks in the explorer.
	"docker.networks.showBuiltInNetworks": true,

	// The property to use to sort networks in Docker view: CreatedTime or Label
	"docker.networks.sortBy": "CreatedTime",

	// Prompt for registry selection if the image is not explicitly tagged.
	"docker.promptForRegistryWhenPushingImages": true,

	// The path to use for scaffolding templates.
	"docker.scaffolding.templatePath": "",

	// Set to true to prompt to switch from "UI" extension mode to "Workspace" extension mode if an operation is not supported in UI mode.
	"docker.showRemoteWorkspaceWarning": true,

	// Equivalent to setting the DOCKER_TLS_VERIFY environment variable.
	"docker.tlsVerify": "",

	// Set to true to truncate long image and container registry paths in Docker view
	"docker.truncateLongRegistryPaths": false,

	// Maximum length of a registry paths displayed in Docker view, including ellipsis. The truncateLongRegistryPaths setting must be set to true for truncateMaxLength setting to be effective.
	"docker.truncateMaxLength": 10,

	// Any secondary properties to display for a Docker volume (an array). Possible values include CreatedTime and VolumeName
	"docker.volumes.description": [
		"CreatedTime"
	],

	// The property to use to group volumes in Docker view: CreatedTime, VolumeName, or None
	"docker.volumes.groupBy": "None",

	// The primary property to display for a Docker volume: CreatedTime or VolumeName
	"docker.volumes.label": "VolumeName",

	// The property to use to sort volumes in Docker view: CreatedTime or Label
	"docker.volumes.sortBy": "CreatedTime",

	// Enable/disable default C# formatter (requires restart).
	"csharp.format.enable": true,

	// Specifies the maximum number of files for which diagnostics are reported for the whole workspace. If this limit is exceeded, diagnostics will be shown for currently opened files only. Specify 0 or less to disable the limit completely.
	"csharp.maxProjectFileCountForDiagnosticAnalysis": 1000,

	// Specifies whether the references CodeLens should be shown.
	"csharp.referencesCodeLens.enabled": true,

	// Array of custom symbol names for which CodeLens should be disabled.
	"csharp.referencesCodeLens.filteredSymbols": [],

	// Enable/disable Semantic Highlighting for C# files (Razor files currently unsupported). Defaults to false. Close open files for changes to take effect.
	"csharp.semanticHighlighting.enabled": false,

	// Shows the OmniSharp log in the Output pane when OmniSharp reports an error.
	"csharp.showOmnisharpLogOnError": true,

	// Suppress the notification window to add missing assets to build or debug the application.
	"csharp.suppressBuildAssetsNotification": false,

	// Suppress the warning that the .NET Core SDK is not on the path.
	"csharp.suppressDotnetInstallWarning": false,

	// Suppress the notification window to perform a 'dotnet restore' when dependencies can't be resolved.
	"csharp.suppressDotnetRestoreNotification": false,

	// Suppress 'hidden' diagnostics (such as 'unnecessary using directives') from appearing in the editor or the Problems pane.
	"csharp.suppressHiddenDiagnostics": true,

	// Suppress the warning that project.json is no longer a supported project format for .NET Core applications
	"csharp.suppressProjectJsonWarning": false,

	// Specifies whether the run and debug test CodeLens should be shown.
	"csharp.testsCodeLens.enabled": true,

	// Options to use with the debugger when launching for unit test debugging. Any launch.json option is valid here.
	"csharp.unitTestDebuggingOptions": {},

	// Specifies whether the OmniSharp server will be automatically started or not. If false, OmniSharp can be started with the 'Restart OmniSharp' command
	"omnisharp.autoStart": true,

	// The name of the default solution used at start up if the repo has multiple solutions. e.g.'MyAwesomeSolution.sln'. Default value is `null` which will cause the first in alphabetical order to be chosen.
	"omnisharp.defaultLaunchSolution": null,

	// Specifies whether notifications should be shown if OmniSharp encounters warnings or errors loading a project. Note that these warnings/errors are always emitted to the OmniSharp log
	"omnisharp.disableMSBuildDiagnosticWarning": false,

	// (EXPERIMENTAL) Enables support for resolving completion edits asynchronously. This can speed up time to show the completion list, particularly override and partial method completion lists, at the cost of slight delays after inserting a completion item. Most completion items will have no noticeable impact with this feature, but typing immediately after inserting an override or partial method completion, before the insert is completed, can have unpredictable results.
	"omnisharp.enableAsyncCompletion": false,

	// Enables support for decompiling external references instead of viewing metadata.
	"omnisharp.enableDecompilationSupport": false,

	// Enables support for reading code style, naming convention and analyzer settings from .editorconfig.
	"omnisharp.enableEditorConfigSupport": true,

	// Enables support for showing unimported types and unimported extension methods in completion lists. When committed, the appropriate using directive will be added at the top of the current file. This option can have a negative impact on initial completion responsiveness, particularly for the first few completion sessions after opening a solution.
	"omnisharp.enableImportCompletion": false,

	// If true, MSBuild project system will only load projects for files that were opened in the editor. This setting is useful for big C# codebases and allows for faster initialization of code navigation features only for projects that are relevant to code that is being edited. With this setting enabled OmniSharp may load fewer projects and may thus display incomplete reference lists for symbols.
	"omnisharp.enableMsBuildLoadProjectsOnDemand": false,

	// Enables support for roslyn analyzers, code fixes and rulesets.
	"omnisharp.enableRoslynAnalyzers": false,

	// Specifies the level of logging output from the OmniSharp server.
	"omnisharp.loggingLevel": "information",

	// The maximum number of items that 'Go to Symbol in Workspace' operation can show. The limit is applied only when a positive number is specified here.
	"omnisharp.maxFindSymbolsItems": 1000,

	// The maximum number of projects to be shown in the 'Select Project' dropdown (maximum 250).
	"omnisharp.maxProjectResults": 250,

	// The minimum number of characters to enter before 'Go to Symbol in Workspace' operation shows any results.
	"omnisharp.minFindSymbolsFilterLength": 0,

	// Specifies the path to a mono installation to use when "useGlobalMono" is set to "always", instead of the default system one. Example: "/Library/Frameworks/Mono.framework/Versions/Current"
	"omnisharp.monoPath": null,

	// Specifies whether 'using' directives should be grouped and sorted during document formatting.
	"omnisharp.organizeImportsOnFormat": false,

	// Specifies the path to OmniSharp. When left empty the OmniSharp version pinned to the C# Extension is used. This can be the absolute path to an OmniSharp executable, a specific version number, or "latest". If a version number or "latest" is specified, the appropriate version of OmniSharp will be downloaded on your behalf. Setting "latest" is an opt-in into latest beta releases of OmniSharp.
	"omnisharp.path": null,

	// The time Visual Studio Code will wait for the OmniSharp server to start. Time is expressed in seconds.
	"omnisharp.projectLoadTimeout": 60,

	// Specifes whether OmniSharp should use VS Code editor settings for C# code formatting (use of tabs, indentation size).
	"omnisharp.useEditorFormattingSettings": true,

	// Launch OmniSharp with the globally-installed Mono. If set to "always", "mono" version 6.4.0 or greater must be available on the PATH. If set to "auto", OmniSharp will be launched with "mono" if version 6.4.0 or greater is available on the PATH.
	//  - auto: Automatically launch OmniSharp with internal "mono", since "mono" 6.12.0 does not support .NET Core 3.1.40x or .NET 5 SDKs.
	//  - always: Always launch OmniSharp with "mono". If version 6.4.0 or greater is not available on the PATH, an error will be printed.
	//  - never: Never launch OmniSharp on a globally-installed Mono.
	"omnisharp.useGlobalMono": "auto",

	// Pass the --debug flag when launching the OmniSharp server to allow a debugger to be attached.
	"omnisharp.waitForDebugger": false,

	// Forces the omnisharp-vscode extension to run in a mode that enables local Razor.VSCode deving.
	"razor.devmode": false,

	// Disable Blazor WebAssembly's debug requirements notification.
	"razor.disableBlazorDebugPrompt": false,

	// Specifies whether to disable Razor language features.
	"razor.disabled": false,

	// Enable/disable default Razor formatter.
	"razor.format.enable": true,

	// Specifies whether to wait for debug attach when launching the language server.
	"razor.languageServer.debug": false,

	// Overrides the path to the Razor Language Server directory.
	"razor.languageServer.directory": null,

	// Overrides the path to the Razor plugin dll.
	"razor.plugin.path": null,

	// Specifies whether to output all messages [Verbose], some messages [Messages] or not at all [Off].
	//  - Off: Does not log messages from the Razor extension
	//  - Messages: Logs only some messages from the Razor extension
	//  - Verbose: Logs all messages from the Razor extension
	"razor.trace": "Off",

	// List of paths to libraries and the like that need to be imported by auto complete engine. E.g. when using Google App SDK, the paths are not in system path, hence need to be added into this list.
	"python.autoComplete.extraPaths": [],

	// Path to the conda executable to use for activation (version 4.4+).
	"python.condaPath": "",

	// Path to Python, you can use a custom version of Python by modifying this setting to include the full path. This default setting is used as a fallback if no interpreter is selected for the workspace. The extension will also not set nor change the value of this setting, it will only read from it.
	"python.defaultInterpreterPath": "python",

	// Enable source map support for meaningful stack traces in error logs.
	"python.diagnostics.sourceMapsEnabled": false,

	// Whether to check if Python is installed (also warn when using the macOS-installed Python).
	"python.disableInstallationCheck": false,

	// Absolute path to a file containing environment variable definitions.
	"python.envFile": "${workspaceFolder}/.env",

	// Enables A/B tests experiments in the Python extension. If enabled, you may get included in proposed enhancements and/or features.
	"python.experiments.enabled": true,

	// List of experiment to opt into. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.
	"python.experiments.optInto": [],

	// List of experiment to opt out of. If empty, user is assigned the default experiment groups. See https://github.com/microsoft/vscode-python/wiki/Experiments for more details.
	"python.experiments.optOutFrom": [],

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.autopep8Args": [],

	// Path to autopep8, you can use a custom version of autopep8 by modifying this setting to include the full path.
	"python.formatting.autopep8Path": "autopep8",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.blackArgs": [],

	// Path to Black, you can use a custom version of Black by modifying this setting to include the full path.
	"python.formatting.blackPath": "black",

	// Provider for formatting. Possible options include 'autopep8', 'black', and 'yapf'.
	"python.formatting.provider": "autopep8",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.formatting.yapfArgs": [],

	// Path to yapf, you can use a custom version of yapf by modifying this setting to include the full path.
	"python.formatting.yapfPath": "yapf",

	// Whether to install Python modules globally when not using an environment.
	"python.globalModuleInstallation": false,

	// Set to "weekly" or "daily" to automatically download and install the latest Insiders builds of the python extension, which include upcoming features and bug fixes.
	"python.insidersChannel": "off",

	// Defines type of the language server.
	//  - Default: Automatically select a language server: Pylance if installed and available, otherwise fallback to Jedi.
	//  - Jedi: Use Jedi behind the Language Server Protocol (LSP) as a language server.
	//  - Pylance: Use Pylance as a language server.
	//  - None: Disable language server capabilities.
	"python.languageServer": "Default",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.banditArgs": [],

	// Whether to lint Python files using bandit.
	"python.linting.banditEnabled": false,

	// Path to bandit, you can use a custom version of bandit by modifying this setting to include the full path.
	"python.linting.banditPath": "bandit",

	// Optional working directory for linters.
	"python.linting.cwd": null,

	// Whether to lint Python files.
	"python.linting.enabled": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.flake8Args": [],

	// Severity of Flake8 message type 'E'.
	"python.linting.flake8CategorySeverity.E": "Error",

	// Severity of Flake8 message type 'F'.
	"python.linting.flake8CategorySeverity.F": "Error",

	// Severity of Flake8 message type 'W'.
	"python.linting.flake8CategorySeverity.W": "Warning",

	// Whether to lint Python files using flake8
	"python.linting.flake8Enabled": false,

	// Path to flake8, you can use a custom version of flake8 by modifying this setting to include the full path.
	"python.linting.flake8Path": "flake8",

	// Patterns used to exclude files or folders from being linted.
	"python.linting.ignorePatterns": [
		"**/site-packages/**/*.py",
		".vscode/*.py"
	],

	// Whether to lint Python files when saved.
	"python.linting.lintOnSave": true,

	// Controls the maximum number of problems produced by the server.
	"python.linting.maxNumberOfProblems": 100,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.mypyArgs": [
		"--follow-imports=silent",
		"--ignore-missing-imports",
		"--show-column-numbers",
		"--no-pretty"
	],

	// Severity of Mypy message type 'Error'.
	"python.linting.mypyCategorySeverity.error": "Error",

	// Severity of Mypy message type 'Note'.
	"python.linting.mypyCategorySeverity.note": "Information",

	// Whether to lint Python files using mypy.
	"python.linting.mypyEnabled": false,

	// Path to mypy, you can use a custom version of mypy by modifying this setting to include the full path.
	"python.linting.mypyPath": "mypy",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.prospectorArgs": [],

	// Whether to lint Python files using prospector.
	"python.linting.prospectorEnabled": false,

	// Path to Prospector, you can use a custom version of prospector by modifying this setting to include the full path.
	"python.linting.prospectorPath": "prospector",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pycodestyleArgs": [],

	// Severity of pycodestyle message type 'E'.
	"python.linting.pycodestyleCategorySeverity.E": "Error",

	// Severity of pycodestyle message type 'W'.
	"python.linting.pycodestyleCategorySeverity.W": "Warning",

	// Whether to lint Python files using pycodestyle
	"python.linting.pycodestyleEnabled": false,

	// Path to pycodestyle, you can use a custom version of pycodestyle by modifying this setting to include the full path.
	"python.linting.pycodestylePath": "pycodestyle",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pydocstyleArgs": [],

	// Whether to lint Python files using pydocstyle
	"python.linting.pydocstyleEnabled": false,

	// Path to pydocstyle, you can use a custom version of pydocstyle by modifying this setting to include the full path.
	"python.linting.pydocstylePath": "pydocstyle",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pylamaArgs": [],

	// Whether to lint Python files using pylama.
	"python.linting.pylamaEnabled": false,

	// Path to pylama, you can use a custom version of pylama by modifying this setting to include the full path.
	"python.linting.pylamaPath": "pylama",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.linting.pylintArgs": [],

	// Severity of Pylint message type 'Convention/C'.
	"python.linting.pylintCategorySeverity.convention": "Information",

	// Severity of Pylint message type 'Error/E'.
	"python.linting.pylintCategorySeverity.error": "Error",

	// Severity of Pylint message type 'Fatal/F'.
	"python.linting.pylintCategorySeverity.fatal": "Error",

	// Severity of Pylint message type 'Refactor/R'.
	"python.linting.pylintCategorySeverity.refactor": "Hint",

	// Severity of Pylint message type 'Warning/W'.
	"python.linting.pylintCategorySeverity.warning": "Warning",

	// Whether to lint Python files using pylint.
	"python.linting.pylintEnabled": false,

	// Path to Pylint, you can use a custom version of pylint by modifying this setting to include the full path.
	"python.linting.pylintPath": "pylint",

	// The logging level the extension logs at, defaults to 'error'
	"python.logging.level": "error",

	// Path to the pipenv executable to use for activation.
	"python.pipenvPath": "pipenv",

	// Path to the poetry executable.
	"python.poetryPath": "poetry",

	// (DEPRECATED: Note this setting is not used when in pythonDeprecatePythonPath experiment) Path to Python, you can use a custom version of Python by modifying this setting to include the full path.
	"python.pythonPath": "python",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.sortImports.args": [],

	// Path to isort script, default using inner version
	"python.sortImports.path": "",

	// Set this setting to your preferred TensorBoard log directory to skip log directory prompt when starting TensorBoard.
	"python.tensorBoard.logDirectory": "",

	// Activate Python Environment in the current Terminal on load of the Extension.
	"python.terminal.activateEnvInCurrentTerminal": false,

	// Activate Python Environment in Terminal created using the Extension.
	"python.terminal.activateEnvironment": true,

	// When executing a file in the terminal, whether to use execute in the file's directory, instead of the current open folder.
	"python.terminal.executeInFileDir": false,

	// Python launch arguments to use when executing a file in the terminal.
	"python.terminal.launchArgs": [],

	// Enable auto run test discovery when saving a test file.
	"python.testing.autoTestDiscoverOnSaveEnabled": true,

	// Optional working directory for tests.
	"python.testing.cwd": null,

	// Port number used for debugging of tests.
	"python.testing.debugPort": 3000,

	// Prompt to configure a test framework if potential tests directories are discovered.
	"python.testing.promptToConfigure": true,

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.pytestArgs": [],

	// Enable testing using pytest.
	"python.testing.pytestEnabled": false,

	// Path to pytest (pytest), you can use a custom version of pytest by modifying this setting to include the full path.
	"python.testing.pytestPath": "pytest",

	// Arguments passed in. Each argument is a separate item in the array.
	"python.testing.unittestArgs": [
		"-v",
		"-s",
		".",
		"-p",
		"*test*.py"
	],

	// Enable testing using unittest.
	"python.testing.unittestEnabled": false,

	// Folders in your home directory to look into for virtual environments (supports pyenv, direnv and virtualenvwrapper by default).
	"python.venvFolders": [],

	// Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).
	"python.venvPath": "",

	// Pylance insiders download channel.
	//  - off: Do not check for insiders updates.
	//  - daily: Automatically check for and install insiders updates daily.
	"pylance.insidersChannel": "off",

	// Offer auto-import completions.
	"python.analysis.autoImportCompletions": true,

	// Automatically add common search paths like 'src'.
	"python.analysis.autoSearchPaths": true,

	// Add parentheses to function completions.
	"python.analysis.completeFunctionParens": false,

	// Analysis mode for diagnostics.
	//  - openFilesOnly: Analyzes and reports errors on only open files.
	//  - workspace: Analyzes and reports errors on all files in the workspace.
	"python.analysis.diagnosticMode": "openFilesOnly",

	// Allows a user to override the severity levels for individual diagnostics.
	"python.analysis.diagnosticSeverityOverrides": {},

	// Additional import search resolution paths
	"python.analysis.extraPaths": [],

	// Specifies the level of logging for the Output panel
	"python.analysis.logLevel": "Information",

	// Path to directory containing custom type stub files.
	"python.analysis.stubPath": "typings",

	// Defines the default rule set for type checking.
	//  - off: Surfaces diagnostics for invalid syntax, unresolved imports, undefined variables.
	//  - basic: All "off" rules + basic type checking rules.
	//  - strict: All "off" rules + all type checking rules.
	"python.analysis.typeCheckingMode": "off",

	// Paths to look for typeshed modules.
	"python.analysis.typeshedPaths": [],

	// Use library implementations to extract type information when type stub is not present.
	"python.analysis.useLibraryCodeForTypes": true,

	// After running a cell, add a 'Goto' code lens on the cell. Note, disabling all code lenses disables this code lens as well.
	"jupyter.addGotoCodeLenses": true,

	// This setting is deprecated and will be removed in the next release.
	// Allows a user to import a jupyter notebook into a python file anytime one is opened.
	"jupyter.allowImportFromNotebook": true,

	// This setting is deprecated and will be removed in the next release.
	// Allow the inputting of python code directly into the Interactive window
	"jupyter.allowInput": true,

	// This setting is deprecated as Live Share support for the interactive window no longer exists in the Jupyter extension.
	// Allow the Interactive window to be shared during a Live Share session
	"jupyter.allowLiveShare": true,

	// Allow for connecting the Interactive window to a https Jupyter server that does not have valid certificates. This can be a security risk, so only use for known and trusted servers.
	"jupyter.allowUnauthorizedRemoteConnection": false,

	// Automatically scroll the interactive window to show the output of the last statement executed. If false, the interactive window will only automatically scroll if the bottom of the prior cell is visible.
	"jupyter.alwaysScrollOnNewCell": false,

	// Warn the user before restarting a kernel.
	"jupyter.askForKernelRestart": true,

	// Warn the user before trying to open really large data frames.
	"jupyter.askForLargeDataFrames": true,

	// When importing or exporting a Jupyter Notebook add a directory change command to allow relative path loading to work.
	"jupyter.changeDirOnImportExport": false,

	// Set of commands to put as code lens above a cell.
	"jupyter.codeLenses": "jupyter.runcell,  jupyter.runallcellsabove, jupyter.debugcell",

	// Regular expression used to identify code cells. All code until the next match is considered part of this cell.
	"jupyter.codeRegularExpression": "^(#\\s*%%|#\\s*\\<codecell\\>|#\\s*In\\[\\d*?\\]|#\\s*In\\[ \\])",

	// Collapse cell input code by default.
	"jupyter.collapseCellInputCodeByDefault": true,

	// This setting is deprecated and will be removed in an upcoming release.
	// Whether or not to use the theme's peek color as the background for the input box.
	"jupyter.colorizeInputBox": true,

	// Set of debug commands to put as code lens above a cell while debugging.
	"jupyter.debugCodeLenses": "jupyter.debugcontinue, jupyter.debugstop, jupyter.debugstepover",

	// When debugging, debug just my code.
	"jupyter.debugJustMyCode": true,

	// Path to debugpy bits for debugging cells.
	"jupyter.debugpyDistPath": "",

	// Draw a highlight behind the currently active cell.
	"jupyter.decorateCells": true,

	// Cell marker used for delineating a cell in a python file.
	"jupyter.defaultCellMarker": "# %%",

	// When true, disables Jupyter from being automatically started for you. You must instead run a cell to start Jupyter.
	"jupyter.disableJupyterAutoStart": false,

	// Enables moving to the next cell when clicking on a 'Run Cell' code lens.
	"jupyter.enableAutoMoveToNextCell": true,

	// Enables code lens for 'cells' in a python file.
	"jupyter.enableCellCodeLens": true,

	// This setting has been deprecated as Jupyter keyboard shortcuts have been moved into the ms-toolsai.jupyter-keymap extension. If you would like to disable Jupyter keyboard shortcuts, please uninstall or disable that extension instead.
	// Enables Jupyter style keyboard shortcuts for Notebooks.
	"jupyter.enableKeyboardShortcuts": true,

	// This setting is deprecated and will be removed in the next release.
	// Enables scrolling for large cell outputs in the Notebook Editor. This setting does not apply to the Interactive Window.
	"jupyter.enableScrollingForCellOutputs": true,

	// Enables/disables A/B tests.
	"jupyter.experiments.enabled": true,

	// List of experiment to opt into. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
	"jupyter.experiments.optInto": [],

	// List of experiment to opt out of. If empty, user is assigned the default experiment groups. [Learn more](https://github.com/microsoft/vscode-jupyter/wiki/Experiments).
	"jupyter.experiments.optOutFrom": [],

	// Enable exporting a python file into a jupyter notebook and run all cells when doing so.
	"jupyter.exportWithOutputEnabled": false,

	// Generate SVG output for notebook plots. This allows for better display in the plot viewer at the cost of generation speed and file size.
	"jupyter.generateSVGPlots": false,

	// This setting is deprecated and will be removed in the next release.
	// Don't use the VS Code theme in the Interactive window (requires reload of VS Code). This forces the Interactive window to use 'Light +(default light)' and disables matplotlib defaults.
	"jupyter.ignoreVscodeTheme": false,

	// Behavior of the Interactive Window. 'perFile' will create a new interactive window for every file that runs a cell. 'single' allows a single window. 'multiple' allows the creation of multiple.
	"jupyter.interactiveWindowMode": "multiple",

	// When a Notebook Editor or Interactive Window Jupyter server is started, these arguments will be passed to it. By default this list is generated by the Jupyter Extension.
	"jupyter.jupyterCommandLineArguments": [],

	// Amount of time (in ms) to wait for an interrupt before asking to restart the Jupyter kernel.
	"jupyter.jupyterInterruptTimeout": 10000,

	// Number of times to attempt to connect to the Jupyter Notebook
	"jupyter.jupyterLaunchRetries": 3,

	// Amount of time (in ms) to wait for the Jupyter Notebook server to start.
	"jupyter.jupyterLaunchTimeout": 60000,

	// Determines the type of connection for talking to jupyter. Local will start kernels locally. Remote allows for connections to remote servers
	"jupyter.jupyterServerType": "",

	// List of Jupyter Kernels and/or python environments that are to be excluded from the Kernel picker.
	"jupyter.kernels.filter": [],

	// This setting is deprecated and will be removed in the next release.
	// Amount of time to wait for guest connections to verify they have the Python extension installed.
	"jupyter.liveShareConnectionTimeout": 1000,

	// The logging level the extension logs at.
	"jupyter.logging.level": "debug",

	// Uncomment shell assignments (#!), line magic (#!%) and cell magic (#!%%) when parsing code cells.
	"jupyter.magicCommandsAsComments": false,

	// Regular expression used to identify markdown cells. All comments after this expression are considered part of the markdown.
	"jupyter.markdownRegularExpression": "^(#\\s*%%\\s*\\[markdown\\]|#\\s*\\<markdowncell\\>)",

	// This setting is deprecated and will be removed in the next release.
	// Maximum size (in pixels) of text output in the Notebook Editor before a scrollbar appears. First enable scrolling for cell outputs in settings.
	"jupyter.maxOutputSize": 400,

	// Append a new empty cell to an interactive window file on running the currently last cell.
	"jupyter.newCellOnRunLast": true,

	// Set the root directory for running notebooks and the Interactive window.
	"jupyter.notebookFileRoot": "${fileDirname}",

	// Determines if pylance's experimental notebook support is used or not
	"jupyter.pylanceHandlesNotebooks": false,

	// Characters which trigger auto completion on a python jupyter kernel (requires reload of VS code)
	"jupyter.pythonCompletionTriggerCharacters": ".%",

	// The method to use when exporting a notebook to a Python file. 'direct' will copy over the code directly as is. 'commentMagics' will comment out lines starting with line magics (%), cell magics (%%), and shell commands(!). 'nbconvert' will install nbconvert and use that for the conversion which can translate iPython syntax into Python syntax.
	"jupyter.pythonExportMethod": "direct",

	// When debugging a cell, open this port on the remote box. If -1 is specified, a random port between 8889 and 9000 will be attempted.
	"jupyter.remoteDebuggerPort": -1,

	// A series of Python instructions or iPython magic commands. Can be either an array of strings or a single string with commands separated by '\n'. Commands will be silently executed whenever the interactive window loads. For instance, set this to '%load_ext autoreload\n%autoreload 2' to automatically reload changes made to imported files without having to restart the interactive session.
	"jupyter.runStartupCommands": "",

	// This setting is deprecated and will be removed in the next release.
	// Search all installed Python interpreters for a Jupyter installation when starting the Interactive window
	"jupyter.searchForJupyter": true,

	// When pressing shift+enter, send selected code in a Python file to the Jupyter interactive window as opposed to the Python terminal.
	"jupyter.sendSelectionToInteractiveWindow": false,

	// This setting is deprecated and will be removed in the next release.
	// Show cell input code.
	"jupyter.showCellInputCode": true,

	// Show the Outline button in the Jupyter notebook toolbar.
	"jupyter.showOutlineButtonInNotebookToolbar": true,

	// Bring up the Variable View when starting a Run by Line session.
	"jupyter.showVariableViewWhenDebugging": true,

	// Stop running cells if a cell throws an exception.
	"jupyter.stopOnError": true,

	// When debugging a cell, stop on the first line.
	"jupyter.stopOnFirstLineWhileDebugging": true,

	// This setting is deprecated in favor of `notebook.output.textLineLimit`. This setting will be removed in an upcoming release.
	// Limit the amount of text in Interactive cell text output to this value. 0 to allow any amount of characters.
	"jupyter.textOutputLimit": 20000,

	// In the Interactive window and Notebook Editor theme matplotlib outputs to match the VS Code editor theme.
	"jupyter.themeMatplotlibPlots": false,

	// When running Jupyter locally, create a default empty Jupyter config for the Interactive window
	"jupyter.useDefaultConfigForJupyter": true,

	// Types to exclude from showing in the Interactive variable explorer
	"jupyter.variableExplorerExclude": "module;function;builtin_function_or_method;ABCMeta;type",

	// Language to query mapping for returning the list of active variables in a Jupyter kernel. Used by the Variable Explorer in both the Interactive Window and Notebooks. Example:
	// ```
	// [
	//   {
	//     "language": "python",
	//     "query": "%who_ls",
	//     "parseExpr": "'(\\w+)'"
	//   }
	// ]
	// ```
	"jupyter.variableQueries": [],

	// Defines the location and order of the sources where scripts files for Widgets are downloaded from (e.g. ipywidgest, bqplot, beakerx, ipyleaflet, etc). Not selecting any of these could result in widgets not rendering or function correctly. See [here](https://aka.ms/PVSCIPyWidgets) for more information. Once updated you will need to restart the Kernel.
	//  - jsdelivr.com: Loads widget (javascript) scripts from https://www.jsdelivr.com/
	//  - unpkg.com: Loads widget (javascript) scripts from https://unpkg.com/
	"jupyter.widgetScriptSources": [],

	// The command to run after cloning the dotfiles repository. Defaults to run the first file of `install.sh`, `install`, `bootstrap.sh`, `bootstrap`, `setup.sh` and `setup` found in the dotfiles repository's root folder.
	"dotfiles.installCommand": "",

	// URL of a dotfiles Git repository (e.g., https://github.com/owner/repository.git) or owner/repository of a GitHub repository.
	"dotfiles.repository": "",

	// The path to clone the dotfiles repository to. Defaults to `~/dotfiles`.
	"dotfiles.targetPath": "~/dotfiles",

	// Controls whether a Docker volume should be used to cache the VS Code server and extensions. Currently only applies to single container and not Docker Compose configurations.
	"remote.containers.cacheVolume": true,

	// Controls whether the Git configuration (`~/.gitconfig`) should be copied into the container. This is done after installing any `dotfiles.repository` and will not overwrite an existing Git configuration file.
	"remote.containers.copyGitConfig": true,

	// Configures the list of extensions to always install while creating a container.
	"remote.containers.defaultExtensions": [],

	// Docker Compose executable name or path.
	"remote.containers.dockerComposePath": "docker-compose",

	// Docker (or Podman) executable name or path.
	"remote.containers.dockerPath": "docker",

	// The command to run after cloning the dotfiles repository for DevContainers. This overrides the common setting for the dotfiles install command.
	"remote.containers.dotfiles.installCommand": "",

	// URL of a dotfiles Git repository (e.g., https://github.com/owner/repository.git) or owner/repository of a GitHub repository for DevContainers. This overrides the common setting for the dotfiles repository.
	"remote.containers.dotfiles.repository": "",

	// The path to clone the dotfiles repository to for DevContainers. This overrides the common setting for the dotfiles target path.
	"remote.containers.dotfiles.targetPath": "",

	// Controls whether CLI commands should always be executed in WSL. The default is to only execute in WSL for workspace folders in WSL. This setting has no effect on other platforms than Windows.
	"remote.containers.executeInWSL": false,

	// Where to write the configuration for the Git credential helper.
	//  - system: Write to system config (`/etc/gitconfig`, requires root access).
	//  - global: Write to user config (`~/.gitconfig`).
	//  - none: Do not set a credential helper.
	"remote.containers.gitCredentialHelperConfigLocation": "global",

	// The log level for the extension.
	"remote.containers.logLevel": "debug",

	// List of additional paths to search for [repository configurations](https://github.com/microsoft/vscode-dev-containers/tree/main/repository-containers).
	"remote.containers.repositoryConfigurationPaths": [],

	// The consistency level used for the workspace mount (existing containers must be rebuilt to take effect).
	//  - consistent: Perfect consistency.
	//  - cached: The host’s view is authoritative.
	//  - delegated: The container’s view is authoritative.
	"remote.containers.workspaceMountConsistency": "cached",

	// Deprecated, please use `remote.SSH.localServerDownload`
	// If downloading the VS Code server fails on the host, this allows the extension to fall back to downloading on the client and transferring it to the host with scp.
	"remote.SSH.allowLocalServerDownload": true,

	// The absolute file path to a custom SSH config file.
	"remote.SSH.configFile": "",

	// Specifies the timeout in seconds used for the SSH command that connects to the remote.
	"remote.SSH.connectTimeout": 15,

	// List of extensions that should be installed automatically on all SSH hosts.
	"remote.SSH.defaultExtensions": [],

	// A list of ports to forward when the connection is established.
	"remote.SSH.defaultForwardedPorts": [],

	// Enable fixing the remote environment so that the SSH config option `ForwardAgent` will take effect as expected from VS Code's remote extension host.
	"remote.SSH.enableAgentForwarding": true,

	// **Experimental**: Detect SSH connections that target Azure VMs in the SSH hosts explorer. Requires that you are logged in using the `Azure Account` extension.
	"remote.SSH.enableAzureIntegration": false,

	// Whether to use SSH dynamic forwarding to allow setting up new port tunnels over an existing SSH connection. When this is used, a password only needs to be entered once for each remote window.
	"remote.SSH.enableDynamicForwarding": true,

	// Enable fixing the remote environment so that the SSH config option `ForwardX11` will take effect as expected from VS Code's remote extension host.
	"remote.SSH.enableX11Forwarding": true,

	// Specifies the order in which to display folders under SSH Targets in the Remote Explorer.
	"remote.SSH.foldersSortOrder": "most recently used",

	// Whether the extension can download the VS Code Server on the client and transfer it to the host with scp, instead of downloading it on the host.
	//  - auto: The server will first be downloaded on the host, and if that fails, will fall back to downloading locally
	//  - always: The server will only be downloaded locally and transferred to the host
	//  - off: The server will only be downloaded on the host
	"remote.SSH.localServerDownload": "auto",

	// Whether to keep lockfiles in `/tmp` instead of in the server's install folder. Useful for connecting to hosts which have issues with locking, such as hosts with a home directory using NFS or another distributed filesystem.
	"remote.SSH.lockfilesInTmp": false,

	// The log level for the extension.
	"remote.SSH.logLevel": "debug",

	// The maximum number of times to attempt reconnection. Use 0 to disallow reconnection, and `null` to use the maximum of 8.
	"remote.SSH.maxReconnectionAttempts": null,

	// An absolute path to the SSH executable. When empty, it will use "ssh" on the path or in common install locations.
	"remote.SSH.path": "",

	// A map of the remote hostname to the platform for that remote. Valid values: `linux`, `macOS`, `windows`. Note - this setting will soon be required when useLocalServer is disabled, so it is currently being autopopulated for successful connections, but is not currently used.
	"remote.SSH.remotePlatform": {},

	// When true, the remote VS Code server will listen on a socket path instead of opening a port. Only valid for Linux and macOS remotes. After toggling this setting, run the command "Kill VS Code Server on Host..." for it to take effect. Requires OpenSSH 6.7+. Disables the "local server" connection multiplexing mode. Requires `AllowStreamLocalForwarding` to be enabled for the SSH server.
	"remote.SSH.remoteServerListenOnSocket": false,

	// Always reveal the SSH login terminal.
	"remote.SSH.showLoginTerminal": false,

	// Due to a bug with password handling in some versions of the SSH client bundled with Windows, the extension prefers a non-Windows SSH client, such as the one bundled with Git, and will show a warning when another one can't be found. This setting disables that warning.
	"remote.SSH.suppressWindowsSshWarning": false,

	// Whether to use `flock` for creating lockfiles on Linux remotes instead of `ln`. By default, we use `flock` on Linux remotes and `ln` on macOS.
	"remote.SSH.useFlock": true,

	// Enables a mode for connecting using a single connection shared between windows and across window reloads. This makes it faster to open new windows and reduces the number of times a password needs to be entered.
	"remote.SSH.useLocalServer": true,

	// Deprecated: Please use `remote.SSH.remotePlatorm` instead
	// **Deprecated**: Enables experimental support for connecting to Windows remotes. Add the names of windows remotes to this list.
	"remote.SSH.windowsRemotes": [],

	// If set, the output in the WSL log shows debug information.
	"remote.WSL.debug": false,

	// If set, polling is used for file watching inside WSL1. Polling can be CPU intensive but fixes the WSL1 issue that folders can not be renamed when watched. This option requires restart to take effect.
	"remote.WSL.fileWatcher.polling": false,

	// The file watcher polling interval in ms used inside WSL1 distros if `remote.WSL.fileWatcher.polling` is set.
	// This option requires restart to take effect.
	"remote.WSL.fileWatcher.pollingInterval": 5000,

	// Use `remote.WSL2.connectionMethod` instead.
	// If set, the connection to a VS Code server running in WSL2 will use localhost (::1). If not set, the connection will directly use the WSL2 VM's IP addresss if accessible or localhost if not.
	"remote.WSL.server.connectThroughLocalhost": false,

	// If set, the WSL windows gets the environment from the shell it was opened from.
	"remote.WSL.useShellEnvironment": true,

	// Specifies how Remote - WSL will connect to the VS Code server running in WSL1 distros. This option requires restart to take effect.
	//  - localhost: Connects to the server in WSL though 127.0.0.1 which is beeing shared between Windows and WSL1.
	//  - wslExeProxy: Connects to the server in WSL through a local proxy server that uses 'wsl.exe' to forward the connection to WSL.
	"remote.WSL1.connectionMethod": "localhost",

	// Specifies how Remote - WSL will connect to the VS Code server running in WSL2 distros. This option requires restart to take effect.
	//  - localhost: Connects to the server in WSL though localhost (::1) which is forwarded to the WSL2 VM by Windows.
	//  - wsl2VMAddress: Connects to the server in WSL though the IP address of the WSL2 VM.
	//  - wslExeProxy: Connects to the server in WSL through a local proxy server that uses 'wsl.exe' to forward the connection to WSL.
	"remote.WSL2.connectionMethod": "wslExeProxy",

	// The current Azure Cloud to connect to.
	//  - AzureCloud: Azure
	//  - AzureChinaCloud: Azure China
	//  - AzureGermanCloud: Azure Germany
	//  - AzureUSGovernment: Azure US Government
	//  - AzureCustomCloud: Azure Custom Cloud
	"azure.cloud": "Azure",

	// The management endpoint for your Azure Custom Cloud environment.
	"azure.customCloud.resourceManagerEndpointUrl": "",

	// Development setting: The PPE environment for testing.
	"azure.ppe": null,

	// The resource filter, each element is a tenant id and a subscription id separated by a slash.
	"azure.resourceFilter": null,

	// Whether to show the email address (e.g., in the status bar) of the signed in account.
	"azure.showSignedInEmail": true,

	// A specific tenant to sign in to. The default is to sign in to the common tenant and use all known tenants.
	"azure.tenant": "",

	// Array of paths to custom kit files
	"cmake.additionalKits": [],

	// Allow the use of JSON extensions such as comments in CMakePresets.json. Please note that your CMakePresets.json file may be considered invalid by other IDEs or on the command line if you use non-standard JSON.
	"cmake.allowCommentsInPresetsFile": false,

	// Select active folder automatically.
	"cmake.autoSelectActiveFolder": true,

	// Additional arguments to pass to CMake when building.
	"cmake.buildArgs": [],

	// Build the target before running it.
	"cmake.buildBeforeRun": true,

	// The directory where CMake build files will go.
	"cmake.buildDirectory": "${workspaceFolder}/build",

	// Environment variables to pass to CMake during build.
	"cmake.buildEnvironment": {},

	// Build using tasks.json instead of internal process.
	"cmake.buildTask": false,

	// Additional arguments to pass to the underlying build tool when building.
	"cmake.buildToolArgs": [],

	// 
	"cmake.cacheInit": null,

	// Clear build output before each build.
	"cmake.clearOutputBeforeBuild": true,

	// The protocol used to communicate between the extension and CMake
	"cmake.cmakeCommunicationMode": "automatic",

	// Name/path of the CMake executable to use.
	"cmake.cmakePath": "cmake",

	// Additional arguments to pass to CMake when configuring.
	"cmake.configureArgs": [],

	// Environment variables to pass to CMake during configure.
	"cmake.configureEnvironment": {},

	// Automatically configure CMake project directories when cmake.sourceDirectory or CMakeLists.txt content are saved.
	"cmake.configureOnEdit": true,

	// Automatically configure CMake project directories when they are opened.
	"cmake.configureOnOpen": null,

	// CMake variables to set on the command line.
	"cmake.configureSettings": {},

	// Copy compile_commands.json to this location after a successful configure.
	"cmake.copyCompileCommands": null,

	// The number of parallel test jobs. Use zero to use the value of cmake.parallelJobs.
	"cmake.ctest.parallelJobs": 0,

	// Arguments to pass to CTest.
	"cmake.ctestArgs": [],

	// Arguments passed by default to CTest.
	"cmake.ctestDefaultArgs": [
		"-T",
		"test",
		"--output-on-failure"
	],

	// Path to CTest executable. If null, will be inferred from cmake.cmakePath (recommended to leave null).
	"cmake.ctestPath": null,

	// The debug configuration to use when debugging a target.
	"cmake.debugConfig": {},

	// 
	"cmake.defaultVariants": {
		"buildType": {
			"default": "debug",
			"description": "The build type.",
			"choices": {
				"debug": {
					"short": "Debug",
					"long": "Disable optimizations - include debug information.",
					"buildType": "Debug"
				},
				"release": {
					"short": "Release",
					"long": "Optimize for speed - exclude debug information.",
					"buildType": "Release"
				},
				"minsize": {
					"short": "MinSizeRel",
					"long": "Optimize for smallest binary size - exclude debug information.",
					"buildType": "MinSizeRel"
				},
				"reldeb": {
					"short": "RelWithDebInfo",
					"long": "Optimize for speed - include debug information.",
					"buildType": "RelWithDebInfo"
				}
			}
		}
	},

	// Directories where Emscripten may be installed.
	"cmake.emscriptenSearchDirs": [],

	// Output parsers to use. Supported parsers 'cmake', 'gcc', 'gnuld' for GNULD-style linker output, 'msvc' for Microsoft Visual C++, 'ghs' for the Green Hills compiler with --no_wrap_diagnostics --brief_diagnostics, and 'diab' for the Wind River Diab compiler.
	"cmake.enabledOutputParsers": [
		"cmake",
		"gcc",
		"gnuld",
		"msvc",
		"ghs",
		"diab"
	],

	// Enable trace logging to file and console (very noisy).
	"cmake.enableTraceLogging": false,

	// Environment variables to set when running CMake commands.
	"cmake.environment": {},

	// Enables exporting compile_commands.json.
	"cmake.exportCompileCommandsFile": true,

	// The CMake generator to use.
	"cmake.generator": null,

	// Do not use the kit environment variables when running CMake commands.
	"cmake.ignoreKitEnv": false,

	// The directory where CMake installed files will go.
	"cmake.installPrefix": null,

	// 
	"cmake.loggingLevel": "info",

	// Recursively collect and merge all compile_commands.json found in the cmake.buildDirectory.
	"cmake.mergedCompileCommands": null,

	// Directories where MinGW may be installed.
	"cmake.mingwSearchDirs": [
		"${env:SystemDrive}/MinGW"
	],

	// Encoding of the output from external commands (eg.cmake -- build).
	"cmake.outputLogEncoding": "auto",

	// The number of parallel build jobs. Use zero to automatically detect the number of CPUs. Setting this to 1 will disable build parallelism.
	"cmake.parallelJobs": 0,

	// Parse compiler output for warnings and errors.
	"cmake.parseBuildDiagnostics": true,

	// The CMake platform to use when configuring.
	"cmake.platform": null,

	// The preferred CMake generator(s) to use when configuring (tried in order of listing).
	"cmake.preferredGenerators": [],

	// 
	"cmake.revealLog": "always",

	// Save open files before building.
	"cmake.saveBeforeBuild": true,

	// Set CMAKE_BUILD_TYPE also on multi config generators
	"cmake.setBuildTypeOnMultiConfig": false,

	// Skip over the configure process if cache is present.
	"cmake.skipConfigureIfCachePresent": null,

	// The directory of the root CMakeLists.txt file.
	"cmake.sourceDirectory": "${workspaceFolder}",

	// Configures the settings for individual status bar buttons. These settings overwrite the more general 'cmake.statusbar.visibility' setting.
	"cmake.statusbar.advanced": {},

	// Configures how the extension displays the buttons in the status bar.
	"cmake.statusbar.visibility": "default",

	// Environment variables to pass to CTest.
	"cmake.testEnvironment": {},

	// The CMake toolset to use when configuring.
	"cmake.toolset": null,

	// 
	"cmake.touchbar.advanced": {},

	// Configures how the extension displays the buttons on a MacBook Touch Bar
	//  - default: Show Touch Bar buttons on supported systems.
	//  - hidden: Do not show Touch Bar buttons.
	"cmake.touchbar.visibility": "default",

	// Use CMakePresets.json to configure drive CMake configure, build, and test. When using CMakePresets.json, kits, variants, and some settings in settings.json will be ignored.
	"cmake.useCMakePresets": "auto",

	// Add include paths from `nan` and `node-addon-api` when they are dependencies.
	"C_Cpp.addNodeAddonIncludePaths": false,

	// Controls whether files are automatically added to `files.associations` when they are the target of a navigation operation from a C/C++ file.
	"C_Cpp.autoAddFileAssociations": true,

	// Controls the auto-completion provider. If `Disabled` and you want word-based completion, you will also need to set `"[cpp]": {"editor.wordBasedSuggestions": true}` (and similarly for `c` and `cuda-cpp` languages).
	//  - Default: Uses the active IntelliSense engine.
	//  - Disabled: Uses the word-based completion provided by Visual Studio Code.
	"C_Cpp.autocomplete": "Default",

	// If `true`, autocomplete will automatically add `(` after function calls, in which case `)` may also be added, depending on the value of the `editor.autoClosingBrackets` setting.
	"C_Cpp.autocompleteAddParentheses": false,

	// Name of the predefined style used as a fallback in case `clang-format` is invoked with style `file` but the `.clang-format` file is not found. Possible values are `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`, `none`, or use `{key: value, ...}` to set specific parameters. For example, the `Visual Studio` style is similar to: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.
	"C_Cpp.clang_format_fallbackStyle": "Visual Studio",

	// The full path of the `clang-format` executable. If not specified, and `clang-format` is available in the environment path, that is used. If not found in the environment path, the `clang-format` bundled with the extension will be used.
	"C_Cpp.clang_format_path": "",

	// If set, overrides the include sorting behavior determined by the `SortIncludes` parameter.
	"C_Cpp.clang_format_sortIncludes": null,

	// Coding style, currently supports: `Visual Studio`, `LLVM`, `Google`, `Chromium`, `Mozilla`, `WebKit`, `Microsoft`, `GNU`. Use `file` to load the style from a `.clang-format` file in the current or parent directory. Use `{key: value, ...}` to set specific parameters. For example, the `Visual Studio` style is similar to: `{ BasedOnStyle: LLVM, UseTab: Never, IndentWidth: 4, TabWidth: 4, BreakBeforeBraces: Allman, AllowShortIfStatementsOnASingleLine: false, IndentCaseLabels: false, ColumnLimit: 0, AccessModifierOffset: -4, NamespaceIndentation: All, FixNamespaceComments: false }`.
	"C_Cpp.clang_format_style": "file",

	// If enabled, code folding ranges are provided by the language server.
	"C_Cpp.codeFolding": "Enabled",

	// Defines the editor behavior for when the Enter key is pressed inside a multiline or single line comment block.
	"C_Cpp.commentContinuationPatterns": [
		"/**"
	],

	// Determines whether pop up notifications will be shown when a configuration provider extension is unable to provide a configuration for a source file.
	"C_Cpp.configurationWarnings": "Enabled",

	// If `true`, debugger shell command substitution will use obsolete backtick (`).
	"C_Cpp.debugger.useBacktickCommandSubstitution": false,

	// The value to use in a configuration if `browse.databaseFilename` is either not specified or set to `${default}`.
	"C_Cpp.default.browse.databaseFilename": "",

	// The value to use in a configuration if `browse.limitSymbolsToIncludedHeaders` is either not specified or set to `${default}`.
	"C_Cpp.default.browse.limitSymbolsToIncludedHeaders": true,

	// The value to use in a configuration if `browse.path` is not specified, or the values to insert if `${default}` is present in `browse.path`.
	"C_Cpp.default.browse.path": null,

	// The value to use in a configuration if `compileCommands` is either not specified, or set to `${default}`.
	"C_Cpp.default.compileCommands": "",

	// The value to use in configuration if `compilerArgs` is either not specified or set to `${default}`.
	"C_Cpp.default.compilerArgs": [],

	// The value to use in a configuration if `compilerPath` is either not specified or set to `${default}`.
	"C_Cpp.default.compilerPath": null,

	// The value to use in a configuration if `configurationProvider` is either not specified or set to `${default}`.
	"C_Cpp.default.configurationProvider": "",

	// The value to use in a configuration if `cppStandard` is either not specified or set to `${default}`.
	"C_Cpp.default.cppStandard": "",

	// The value to use in a configuration if `cStandard` is either not specified or set to `${default}`.
	"C_Cpp.default.cStandard": "",

	// The value to use in a configuration if `customConfigurationVariables` is not set, or the values to insert if `${default}` is present as a key in `customConfigurationVariables`.
	"C_Cpp.default.customConfigurationVariables": null,

	// The value to use in a configuration if `defines` is not specified, or the values to insert if `${default}` is present in `defines`.
	"C_Cpp.default.defines": [],

	// Controls whether the extension will report errors detected in `c_cpp_properties.json`.
	"C_Cpp.default.enableConfigurationSquiggles": true,

	// The value to use in a configuration if `forcedInclude` is not specified, or the values to insert if `${default}` is present in `forcedInclude`.
	"C_Cpp.default.forcedInclude": [],

	// The value to use in a configuration if `includePath` is not specified in `c_cpp_properties.json`. If `includePath` is specified, add `${default}` to the array to insert the values from this setting. Usually, this should not include system includes; instead, set `C_Cpp.default.compilerPath`.
	"C_Cpp.default.includePath": [],

	// The value to use in a configuration if `intelliSenseMode` is either not specified or set to `${default}`.
	"C_Cpp.default.intelliSenseMode": "",

	// The value to use in a configuration if `macFrameworkPath` is not specified, or the values to insert if `${default}` is present in `macFrameworkPath`.
	"C_Cpp.default.macFrameworkPath": [],

	// Set to `true` to merge include paths, defines, and forced includes with those from a configuration provider.
	"C_Cpp.default.mergeConfigurations": false,

	// The value to use for the system include path. If set, it overrides the system include path acquired via `compilerPath` and `compileCommands` settings.
	"C_Cpp.default.systemIncludePath": [],

	// Version of the Windows SDK include path to use on Windows, e.g. `10.0.17134.0`.
	"C_Cpp.default.windowsSdkVersion": "",

	// Controls whether inactive preprocessor blocks are colored differently than active code. This setting has no effect if IntelliSense is disabled or if using the Default High Contrast theme.
	"C_Cpp.dimInactiveRegions": true,

	// If enabled, code is colorized based on IntelliSense. This setting only applies if `C_Cpp.intelliSenseEngine` is set to `Default`.
	"C_Cpp.enhancedColorization": "Enabled",

	// Controls whether suspected compile errors detected by the IntelliSense engine will be reported back to the editor. This setting is ignored by the Tag Parser engine.
	"C_Cpp.errorSquiggles": "EnabledIfIncludesResolve",

	// Instructs the extension when to use the `files.exclude#` (and `#C_Cpp.files.exclude#`) setting when determining which files should be added to the code navigation database while traversing through the paths in the `browse.path` array. If your `#files.exclude` setting only contains folders, then `checkFolders` is the best choice and will increase the speed at which the extension can initialize the code navigation database.
	//  - checkFolders: The exclusion filters will only be evaluated once per folder (individual files are not checked).
	//  - checkFilesAndFolders: The exclusion filters will be evaluated against every file and folder encountered.
	"C_Cpp.exclusionPolicy": "checkFolders",

	// Controls whether "experimental" features are usable.
	"C_Cpp.experimentalFeatures": "Disabled",

	// Configure glob patterns for excluding folders (and files if `C_Cpp.exclusionPolicy#` is changed). These are specific to the C/C++ extension and are in addition to `#files.exclude#`, but unlike `#files.exclude` they are not removed from the Explorer view. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options).
	"C_Cpp.files.exclude": {
		"**/.vscode": true
	},

	// Configures the formatting engine
	//  - clangFormat: `clang-format` will be used to format code.
	//  - vcFormat: The Visual C++ formatting engine will be used to format code.
	//  - Default: By default, `clang-format` will be used to format the code. However, the Visual C++ formatting engine will be used if an `.editorconfig` file with relevant settings is found nearer to the code being formatted and `C_Cpp.clang_format_style` is the default value: `file`.
	//  - Disabled: Code formatting will be disabled.
	"C_Cpp.formatting": "Default",

	// Controls the background coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to transparent. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionBackgroundColor": "",

	// Controls the font coloring of inactive preprocessor blocks. Input is in the form a hexadecimal color code or a valid Theme Color. If not set, this defaults to the syntax coloring scheme of the editor. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionForegroundColor": "",

	// Controls the opacity of inactive preprocessor blocks. Scales between `0.1` and `1.0`. This setting only applies when inactive region dimming is enabled.
	"C_Cpp.inactiveRegionOpacity": 0.55,

	// Defines the folder path for cached precompiled headers used by IntelliSense. The default cache path is `%LocalAppData%/Microsoft/vscode-cpptools` on Windows, `$XDG_CACHE_HOME/vscode-cpptools/` on Linux (or `$HOME/.cache/vscode-cpptools/` if `XDG_CACHE_HOME` is not defined), and `$HOME/Library/Caches/vscode-cpptools/` on macOS. The default path will be used if no path is specified or if a specified path is invalid.
	"C_Cpp.intelliSenseCachePath": "",

	// Maximum size of the per-workspace hard drive space in megabytes (MB) for cached precompiled headers; the actual usage may fluctuate around this value. The default size is `5120` MB. Precompiled header caching is disabled when the size is `0`.
	"C_Cpp.intelliSenseCacheSize": 5120,

	// Controls the IntelliSense provider.
	//  - Default: Provides context-aware results via a separate IntelliSense process.
	//  - Tag Parser: Provides "fuzzy" results that are not context-aware.
	//  - Disabled: Turns off C/C++ language service features.
	"C_Cpp.intelliSenseEngine": "Default",

	// Controls whether the IntelliSense engine will automatically switch to the Tag Parser for translation units containing `#include` errors.
	"C_Cpp.intelliSenseEngineFallback": "Disabled",

	// Memory usage limit in megabytes (MB) of an IntelliSense process. The default is `4096` and the maximum is `16384`. The extension will shutdown and restart an IntelliSense process when it exceeds the limit.
	"C_Cpp.intelliSenseMemoryLimit": 4096,

	// Controls the delay in milliseconds before IntelliSense starts updating after a modification.
	"C_Cpp.intelliSenseUpdateDelay": 2000,

	// The verbosity of logging in the Output Panel. The order of levels from least verbose to most verbose is: `None` < `Error` < `Warning` < `Information` < `Debug`.
	"C_Cpp.loggingLevel": "Error",

	// The character used as a path separator for `#include` auto-completion results.
	"C_Cpp.preferredPathSeparator": "Forward Slash",

	// If `true`, 'Rename Symbol' will require a valid C/C++ identifier.
	"C_Cpp.renameRequiresIdentifier": true,

	// If `true`, tooltips of hover and auto-complete will only display certain labels of structured comments. Otherwise, all comments are displayed.
	"C_Cpp.simplifyStructuredComments": true,

	// If `true`, snippets are provided by the language server.
	"C_Cpp.suggestSnippets": true,

	// Set to `Insiders` to automatically download and install the latest Insiders builds of the extension, which include upcoming features and bug fixes.
	"C_Cpp.updateChannel": "Insiders",

	// Access specifiers are indented relative to class or struct definitions by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.accessSpecifiers": false,

	// Braces are indented by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.braces": false,

	// Code inside a `case` block is indented relative to its label by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.caseContents": true,

	// Indent braces following a case statement by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.caseContentsWhenBlock": false,

	// Labels are indented relative to switch statements by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.caseLabels": false,

	// The position of goto labels.
	//  - oneLeft: Position goto labels to the left of the current code indentation, by the amount specified in the `editor.tabSize` setting.
	//  - leftmostColumn: Position goto labels at the leftmost edge of the code.
	//  - none: Goto labels will not be formatted.
	"C_Cpp.vcFormat.indent.gotoLabels": "oneLeft",

	// Indent braces of lambdas used as function parameters relative to the start of the statement by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.lambdaBracesWhenParameter": true,

	// Determines what new line indentation is relative to.
	//  - outermostParenthesis: Indent new line relative to the outermost open parenthesis.
	//  - innermostParenthesis: Indent new line relative to the innermost open parenthesis.
	//  - statementBegin: Indent new line relative to the beginning of the current statement.
	"C_Cpp.vcFormat.indent.multiLineRelativeTo": "innermostParenthesis",

	// Code is indented relative to its enclosing namespace by the amount specified in the `editor.tabSize` setting.
	"C_Cpp.vcFormat.indent.namespaceContents": true,

	// The position of preprocessor directives.
	//  - oneLeft: Preprocessor directives are positioned to the left of the current code indentation, by the amount specified in the `editor.tabSize` setting.
	//  - leftmostColumn: Preprocessor directives are positioned at the leftmost edge of the code.
	//  - none: Preprocessor directives will not be formatted.
	"C_Cpp.vcFormat.indent.preprocessor": "leftmostColumn",

	// Indentation of comments is not changed during formatting operations.
	"C_Cpp.vcFormat.indent.preserveComments": false,

	// In existing code, preserve the existing indent alignment of new lines within parentheses.
	"C_Cpp.vcFormat.indent.preserveWithinParentheses": false,

	// When a new line is typed, it is aligned under the opening parenthesis or based on `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
	//  - alignToParenthesis: New line is aligned under the opening parenthesis.
	//  - indent: New line is indented based on `C_Cpp.vcFormat.indent.multiLineRelativeTo`.
	"C_Cpp.vcFormat.indent.withinParentheses": "indent",

	// Place `catch` and similar keywords on a new line.
	"C_Cpp.vcFormat.newLine.beforeCatch": true,

	// Place `else` on a new line.
	"C_Cpp.vcFormat.newLine.beforeElse": true,

	// The position of opening braces for control blocks.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.block": "ignore",

	// The position of opening braces for functions.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.function": "ignore",

	// The position of opening braces for lambda functions.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.lambda": "ignore",

	// The position of opening braces for namespaces.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.namespace": "ignore",

	// The position of opening braces for type definitions.
	//  - newLine: Opening braces are moved to a new line.
	//  - sameLine: Opening braces are kept on the same line and a space is added before each one.
	//  - ignore: Opening braces are not formatted.
	"C_Cpp.vcFormat.newLine.beforeOpenBrace.type": "ignore",

	// Place `while` in a `do`-`while` loop on a new line.
	"C_Cpp.vcFormat.newLine.beforeWhileInDoWhile": false,

	// For empty function bodies, move closing braces to the same line as opening braces.
	"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyFunction": false,

	// For empty types, move closing braces to the same line as opening braces.
	"C_Cpp.vcFormat.newLine.closeBraceSameLine.emptyType": false,

	// Place opening and closing braces for scopes on separate lines.
	"C_Cpp.vcFormat.newLine.scopeBracesOnSeparateLines": false,

	// A space is added after the closing parenthesis of a C-style cast.
	"C_Cpp.vcFormat.space.afterCastCloseParenthesis": false,

	// A space is added after every comma.
	"C_Cpp.vcFormat.space.afterComma": true,

	// A space is added between the keyword and opening parenthesis in control flow statements.
	"C_Cpp.vcFormat.space.afterKeywordsInControlFlowStatements": true,

	// Spaces around assignment operators.
	//  - insert: A space is added before the operator and also after it.
	//  - remove: Spaces before and after the operator are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.aroundAssignmentOperator": "insert",

	// Spaces around binary operators.
	//  - insert: A space is added before the operator and also after it.
	//  - remove: Spaces before and after the operator are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.aroundBinaryOperator": "insert",

	// Spaces around conditional operators.
	//  - insert: A space is added before the operator and also after it.
	//  - remove: Spaces before and after the operator are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.aroundTernaryOperator": "insert",

	// A space is added before the opening braces of scope blocks.
	"C_Cpp.vcFormat.space.beforeBlockOpenBrace": true,

	// A space is added before every comma.
	"C_Cpp.vcFormat.space.beforeComma": false,

	// A space is added before the colon in constructor definitions.
	"C_Cpp.vcFormat.space.beforeConstructorColon": true,

	// When square brackets are empty, a space is added before the opening bracket.
	"C_Cpp.vcFormat.space.beforeEmptySquareBrackets": false,

	// Spacing between function names and opening parentheses of argument lists.
	//  - insert: Add a space before the opening parenthesis of a function.
	//  - remove: Spaces before opening parenthesis of a function are removed.
	//  - ignore: Spaces are left as entered.
	"C_Cpp.vcFormat.space.beforeFunctionOpenParenthesis": "remove",

	// A space is added before the colon for inherited types in class definitions.
	"C_Cpp.vcFormat.space.beforeInheritanceColon": true,

	// A space is added before the opening brace of uniform initialization and initializer lists.
	"C_Cpp.vcFormat.space.beforeInitializerListOpenBrace": false,

	// A space is added before the opening parenthesis of lambda argument lists.
	"C_Cpp.vcFormat.space.beforeLambdaOpenParenthesis": false,

	// A space is added before opening square brackets.
	"C_Cpp.vcFormat.space.beforeOpenSquareBracket": false,

	// When braces are empty and on the same line, a space is inserted between them.
	"C_Cpp.vcFormat.space.betweenEmptyBraces": false,

	// When square brackets are empty, a space is inserted between them.
	"C_Cpp.vcFormat.space.betweenEmptyLambdaBrackets": false,

	// When a function parameter list is empty, a space is inserted between its parentheses.
	"C_Cpp.vcFormat.space.betweenEmptyParameterListParentheses": false,

	// When square brackets are empty, a space is inserted between them.
	"C_Cpp.vcFormat.space.betweenEmptySquareBrackets": false,

	// For multi-dimensional arrays, all space between brackets is removed. Other settings that control space are overridden.
	"C_Cpp.vcFormat.space.groupSquareBrackets": true,

	// A space is inserted after every semicolon.
	"C_Cpp.vcFormat.space.insertAfterSemicolon": false,

	// Spaces around pointer and reference operators.
	//  - left: Pointer and reference operators are aligned to the left.
	//  - center: Pointer and reference operators are centered.
	//  - right: Pointer and reference operators are aligned to the right.
	//  - ignore: Pointer and reference operators are not formatted.
	"C_Cpp.vcFormat.space.pointerReferenceAlignment": "left",

	// Spaces around commas are preserved inside uniform initialization and initializer lists.
	"C_Cpp.vcFormat.space.preserveInInitializerList": true,

	// Spaces around member access operators, pointer-to-member operators, and scope resolution operators are removed.
	"C_Cpp.vcFormat.space.removeAroundMemberOperators": true,

	// Spaces between unary operators and operands are removed.
	"C_Cpp.vcFormat.space.removeAroundUnaryOperator": true,

	// Spaces are removed before every semicolon.
	"C_Cpp.vcFormat.space.removeBeforeSemicolon": true,

	// A space is added after the opening parenthesis and also before the closing parenthesis of a C-style cast.
	"C_Cpp.vcFormat.space.withinCastParentheses": false,

	// A space is added after the opening parenthesis and also before the closing parenthesis in control flow statements.
	"C_Cpp.vcFormat.space.withinControlFlowStatementParentheses": false,

	// A space is added after the opening parenthesis and also before the closing parenthesis of a parenthesized expression.
	"C_Cpp.vcFormat.space.withinExpressionParentheses": false,

	// A space is added after the opening brace and also before the closing brace of uniform initialization and initializer lists.
	"C_Cpp.vcFormat.space.withinInitializerListBraces": true,

	// A space is added after the opening square bracket and also before the closing square bracket.
	"C_Cpp.vcFormat.space.withinLambdaBrackets": false,

	// A space is added after the opening parenthesis and also before the closing parenthesis in function parameter lists.
	"C_Cpp.vcFormat.space.withinParameterListParentheses": false,

	// A space is added after the opening square bracket and also before the closing square bracket.
	"C_Cpp.vcFormat.space.withinSquareBrackets": false,

	// Wrapping options for blocks.
	//  - oneLiners: A complete code block that is entered on one line is kept on one line, regardless of the values of any of the `C_Cpp.vcFormat.newLine.*` settings.
	//  - allOneLineScopes: Any code where the opening and closing brace is entered on one line is kept on one line, regardless of the values of any of the `C_Cpp.vcFormat.newLine.*` settings.
	//  - never: Code blocks are always formatted based on the values of the `C_Cpp.vcFormat.newLine.*` settings.
	"C_Cpp.vcFormat.wrap.preserveBlocks": "oneLiners",

	// Enable integration services for the [vcpkg dependency manager](https://aka.ms/vcpkg/).
	"C_Cpp.vcpkg.enabled": true,

	// Controls whether parsing of the non-active workspace files uses sleeps to avoid using 100% CPU. The values `highest`/`high`/`medium`/`low` correspond to approximately 100/75/50/25% CPU usage.
	"C_Cpp.workspaceParsingPriority": "highest",

	// The symbols to include in the query results when 'Go to Symbol in Workspace' is invoked.
	"C_Cpp.workspaceSymbols": "Just My Code",

	// Allow guests to start and stop debugging sessions.
	"liveshare.allowGuestDebugControl": false,

	// Allow guests to run and terminate workspace tasks.
	"liveshare.allowGuestTaskControl": false,

	// Specifies who to allow session invitations from.
	"liveshare.allowInvites": "contacts",

	// Ensures that the session's host is always followed.
	"liveshare.alwaysFollowHost": false,

	// Controls how to handle join requests from anonymous guests.
	"liveshare.anonymousGuestApproval": "prompt",

	// Controls whether web servers are automatically shared, when started from the integrated terminal or well-known extensions.
	"liveshare.autoShareServers": true,

	// Controls whether terminals are automatically shared with guests (read-only).
	"liveshare.autoShareTerminals": true,

	// Controls whether to show the CodeLens for starting a collaboration session.
	"liveshare.codeLens": true,

	// Controls whether to allow comments in collaboration sessions
	"liveshare.comments": true,

	// Type of connection used for collaboration; the default (auto) mode prefers a direct connection, but may fallback to a cloud relay if the direct connection failed.
	"liveshare.connectionMode": "auto",

	// Enables the Visual Studio Live Share output channel.
	"liveshare.diagnosticLogging": false,

	// Specifies the level of logging output from Visual Studio Live Share Extension
	"liveshare.diagnosticLoggingLevel": "Warning",

	// Enables diagnostic notifications and logs.
	"liveshare.diagnosticMode": false,

	// Controls set of active features. By selecting `insiders`, you agree to the [Pre-Release Software License Terms](https://aka.ms/vsls-license-preview) and [Privacy Statement](https://aka.ms/vsls-privacy).
	"liveshare.featureSet": "stable",

	// Specifies how to respond to focus requests from other participants.
	"liveshare.focusBehavior": "accept",

	// Controls whether the host needs to explicitly approve guest requests to join collaboration sessions.
	"liveshare.guestApprovalRequired": false,

	// Increases the guest limit from 5 to 30.
	"liveshare.increasedGuestLimit": true,

	// Controls how the participant will join incoming shared debug sessions.
	"liveshare.joinDebugSessionOption": "Automatic",

	// Sets the number of seconds to wait before sending keep-alive messages in an idle session, used to detect abnormal network disconnection. Set to -1 to disable sending keep-alive messages.
	"liveshare.keepAliveInterval": 20,

	// Allow guests to run arbitrary commands via Code Actions (“Quick Fixes”) and CodeLens
	"liveshare.languages.allowGuestCommandControl": false,

	// Specifies the client to launch when clicking on a Live Share URL.
	"liveshare.launcherClient": "web",

	// Controls when to display a participant's name tag instead of just their cursor.
	"liveshare.nameTagVisibility": "Activity",

	// Allow guests to run notebook cells
	"liveshare.notebooks.allowGuestExecuteCells": false,

	// Controls whether to automatically open shared servers in your default browser.
	"liveshare.openSharedServers": true,

	// Specifies when to automatically populate your Git commit message with guest attribution (using the Git-co-author trailer).
	"liveshare.populateGitCoAuthors": "always",

	// Controls whether to publish your presence to other users, and allow in-tool invites for collaboration sessions
	"liveshare.presence": false,

	// Controls whether to publish your current workspace folder to other users
	"liveshare.publishWorkspaceInfo": false,

	// Height of shared terminal window, characters.
	"liveshare.sharedTerminalHeight": 50,

	// Width of shared terminal window, characters.
	"liveshare.sharedTerminalWidth": 120,

	// Automatically share external files opened by the host during a collaboration session.
	"liveshare.shareExternalFiles": true,

	// Show or hide the Live Share status bar items.
	"liveshare.showInStatusBar": "always",

	// Controls visibility of the cursor and highlights for read-only users.
	"liveshare.showReadOnlyUsersInEditor": "whileFollowing",

	// Controls whether to show verbose notifications, such as when a guest joins and leaves a session.
	"liveshare.showVerboseNotifications": true,

	// Controls how to respond when an audio call is started.
	"liveshare.audio.joinCallBehavior": "prompt",

	// Controls whether to automatically start an audio call whenever you share.
	"liveshare.audio.startCallOnShare": false,

	// Name(s) of the connection to auto connect on start
	"sqltools.autoConnectTo": [],

	// Auto open session file when connect
	"sqltools.autoOpenSessionFiles": true,

	// Languages with SQL codelens enabled.
	// 
	// You can use any language identifier defined on https://code.visualstudio.com/docs/languages/identifiers.
	// 
	// More info about codelens, see https://vscode-sqltools.mteixeira.dev/features/codelens
	"sqltools.codelensLanguages": [
		"sql"
	],

	// Languages with SQL completion enabled.
	// 
	// You can use any language identifier defined on https://code.visualstudio.com/docs/languages/identifiers.
	"sqltools.completionLanguages": [
		"sql"
	],

	// Group connection in two groups, 'Connected' and 'Not Connected'
	"sqltools.connectionExplorer.groupConnected": false,

	// Connections list
	"sqltools.connections": [],

	// Default export results mode.
	"sqltools.defaultExportType": "prompt",

	// Default open results mode.
	"sqltools.defaultOpenType": "prompt",

	// Dependency manager settings
	"sqltools.dependencyManager": {
		"packageManager": "npm",
		"installArgs": [
			"install"
		],
		"runScriptArgs": [
			"run"
		],
		"autoAccept": false
	},

	// Disable new release notifications.
	"sqltools.disableReleaseNotifications": false,

	// Flatten groups with has only one child
	"sqltools.flattenGroupsIfOne": false,

	// 
	"sqltools.format": {},

	// Languages with SQL formatting enabled.
	// 
	// You can use any language identifier defined on https://code.visualstudio.com/docs/languages/identifiers.
	"sqltools.formatLanguages": [
		"sql"
	],

	// Enable or disable hightlight current query under cursor.
	"sqltools.highlightQuery": true,

	// Number of queries to keep on History.
	"sqltools.historySize": 100,

	// Set environment variables to be passed to language server. Eg: ORACLE_HOME, PATH...
	"sqltools.languageServerEnv": {},

	// Enables query parameter checking
	"sqltools.queryParams.enableReplace": false,

	// RegEx used to identify query parameters
	"sqltools.queryParams.regex": "\\$[\\d]+|\\$\\[[\\d\\w]+\\]",

	// 
	"sqltools.results": {},

	// Folder for session files to be saved in
	"sqltools.sessionFilesFolder": "",

	// Toggle statusbar visibility.
	"sqltools.showStatusbar": true,

	// Sort columns criteria.
	"sqltools.sortColumns": "name",

	// Table columns should be expanded on load?
	"sqltools.tableTreeItemsExpanded": false,

	// Enable node runtime usage.
	"sqltools.useNodeRuntime": false,

	// Controls if plugin is enabled
	"color-highlight.enable": true,

	// An array of language ids which should be highlighted by Color Highlight. "*" to trigger on any language; Prepend language id with "!" to exclude the language (i.e "!typescript", "!javascript")
	"color-highlight.languages": [
		"*"
	],

	// Style of the highlight. Can be 'dot-before', 'dot-after', 'foreground', 'background', 'outline', 'underline'
	"color-highlight.markerType": "background",

	// Highlight colors on the ruler (scroll bar), true/false
	"color-highlight.markRuler": true,

	// Highlight rgb without functions like rgb() ('255, 255, 255', [255, 255, 255], '255 255 255', etc.)
	"color-highlight.matchRgbWithNoFunction": false,

	// Highlight color words in all files (grey, green, etc.)
	"color-highlight.matchWords": false,

	// An array of language ids which should be highlighted by Color Highlight with the rgbWithNoFunction pattern. "*" to trigger on any language; Prepend language id with "!" to exclude the language (i.e "!typescript", "!javascript")
	"color-highlight.rgbWithNoFunctionLanguages": [
		"*"
	],

	// Array of absolute paths to search while perform file lookups.
	"color-highlight.sass.includePaths": [],

	// Specify the DateTime format in moment.js notation.
	"python-coding-tools.update-module-variable.dateTimeFmt": "YYYY-MM-DD HH:mm:ss",

	// Enable to update a module variable on saving a python file.
	"python-coding-tools.update-module-variable.enableOnSave": true,

	// Name of the module variable which should be updated.
	"python-coding-tools.update-module-variable.variableName": "__updated__",

	// Path to custom docstring template (overrides docstringFormat). Path can be absolute or relative to the project root.
	"autoDocstring.customTemplatePath": "",

	// Which docstring format to use.
	"autoDocstring.docstringFormat": "google",

	// Generate docstring on pressing enter after opening a docstring (use quoteStyle)
	"autoDocstring.generateDocstringOnEnter": true,

	// Guess the type of parameters and return values
	"autoDocstring.guessTypes": true,

	// Include [extended_summary] tag
	"autoDocstring.includeExtendedSummary": false,

	// Include function names at the start of docstrings
	"autoDocstring.includeName": false,

	// Output log information
	"autoDocstring.logLevel": "Info",

	// Style of quote used with generate docstring command
	"autoDocstring.quoteStyle": "\"\"\"",

	// Start docstring on new line
	"autoDocstring.startOnNewLine": false,

	// If enabled, other files in the workspace are searched when estimating types for a parameter. Disabling this will increase performance, but may reduce estimation accuracy.
	"workspace.searchEnabled": true,

	// The maximum number of files searched in a workspace search. Has no effect if workspace searching is disabled.
	"workspace.searchLimit": 10,

	// If error color is disabled, indent colors will be rendered until the length of rendered characters (white spaces, tabs, and other ones) is divisible by tabsize. Turn on this option to render white spaces and tabs only.
	"indentRainbow.colorOnWhiteSpaceOnly": false,

	// An array with color (hex, rgba, rgb) strings which are used as colors, can be any length.
	"indentRainbow.colors": [
		"rgba(255,255,64,0.07)",
		"rgba(127,255,127,0.07)",
		"rgba(255,127,255,0.07)",
		"rgba(79,236,236,0.07)"
	],

	// Indent color for when there is an error in the indentation, for example if you have your tabs set to 2 spaces but the indent is 3 spaces. Can be any type of web based color format (hex, rgba, rgb).
	"indentRainbow.errorColor": "rgba(128,32,32,0.6)",

	// For which languages indent-rainbow should be deactivated. When left empty will ignore.
	"indentRainbow.excludedLanguages": [
		"plaintext"
	],

	// For which languages indent-rainbow should skip indent error detection (use '*' to deactivate errors for all languages).
	"indentRainbow.ignoreErrorLanguages": [
		"markdown"
	],

	// Skip error highlighting for RegEx patterns. Defaults to c/cpp decorated block and full line comments.
	"indentRainbow.ignoreLinePatterns": [
		"/[ \t]* [*]/g",
		"/[ \t]+[/]{2}/g"
	],

	// For which languages indent-rainbow should be activated. When empty will use for all languages.
	"indentRainbow.includedLanguages": [],

	// Automatically change indent settings for languages (see README.md for details).
	"indentRainbow.indentSetter": {},

	// Indent color for when there is a mix between spaces and tabs in the indentation. Can be any type of web based color format (hex, rgba, rgb) or a empty string(to be disabled this coloring).
	"indentRainbow.tabmixColor": "rgba(128,32,96,0.6)",

	// The delay in ms until the editor gets updated.
	"indentRainbow.updateDelay": 100,

	// Which parser to use. Valid options are 'flow' and 'babylon'
	"prettier.parser": "babylon",

	// Use the flow parser instead of babylon (deprecated, use 'parser:"babylon"' instead)
	"prettier.useFlowParser": false,

	// Select an icon pack that enables specific icons.
	//  - angular: Icons for Angular.
	//  - angular_ngrx: Icons for Angular and ngrx.
	//  - react: Icons for React.
	//  - react_redux: Icons for React and Redux.
	//  - vue: Icons for Vue.
	//  - vue_vuex: Icons for Vue and Vuex.
	//  - nest: Icons for NestJS.
	//  - none: No icon pack enabled.
	"material-icon-theme.activeIconPack": "angular",

	// Set custom file icon associations.
	"material-icon-theme.files.associations": {},

	// Set custom folder icon associations.
	"material-icon-theme.folders.associations": {},

	// Change the color of the folder icons.
	"material-icon-theme.folders.color": "#90a4ae",

	// Set the type for the folder icons.
	//  - specific: Select specific folder icons.
	//  - classic: Select classic folder icons.
	//  - none: No folder icons.
	"material-icon-theme.folders.theme": "specific",

	// Hide explorer arrows before folder.
	"material-icon-theme.hidesExplorerArrows": false,

	// Set custom language icon associations.
	"material-icon-theme.languages.associations": {},

	// Change the opacity of the icons.
	"material-icon-theme.opacity": 1,

	// Change the saturation of the icons.
	"material-icon-theme.saturation": 1,

	// Show restart notification.
	"material-icon-theme.showReloadMessage": true,

	// Show the update message after each update.
	"material-icon-theme.showUpdateMessage": false,

	// Show the welcome message after first installation.
	"material-icon-theme.showWelcomeMessage": true,

	// Background color of snippet container. Use any value for CSS `background-color`
	"polacode.backgroundColor": "#f2f2f2",

	// Shadow of the snippet node. Use any value for CSS `box-shadow`
	"polacode.shadow": "rgba(0, 0, 0, 0.55) 0px 20px 68px",

	// Shoot with or without container
	//  - container: Shoot with the container.
	//  - snippet: Shoot with the snippet alone. If you want transparent padding, use `container` with `"polacode.transparentBackground": true`
	"polacode.target": "container",

	// Transparent background for containers
	"polacode.transparentBackground": false,

	// Controls the enablement.
	"cssPeek.enable": true,

	// A list of vscode language names where the extension should be used.
	"cssPeek.peekFromLanguages": [
		"html",
		"django-html",
		"laravel-blade",
		"razor",
		"vue",
		"blade",
		"pug",
		"jade",
		"handlebars",
		"php",
		"twig",
		"md",
		"nunjucks",
		"javascript",
		"javascriptreact",
		"erb",
		"typescript",
		"typescriptreact",
		"HTML (Eex)",
		"html-eex",
		"ejs"
	],

	// A list of file globs that filters out peekable files
	"cssPeek.peekToExclude": [
		"**/node_modules/**",
		"**/bower_components/**"
	],

	// Enable Peeking from HTML tags in addition to classnames and IDs. React components are ignored, but it's a good idea to disable this feature when using Angular
	"cssPeek.supportTags": true,

	// Traces the communication between VSCode and the language server.
	"cssPeek.trace.server": "off",

	// Enable/disable show remote branches
	"gitflow.views.feature.showRemoteBranches": true,

	// Enable usage data and errors to be sent to Red Hat servers. Read our [privacy statement](https://developers.redhat.com/article/tool-data-collection).
	"redhat.telemetry.enabled": null,

	// Register XML catalog files. See how to configure [XML catalog with XSD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-catalog-with-xsd%22%7D%5D) or [XML catalog with DTD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-catalog-with-dtd%22%7D%5D) for more information.
	"xml.catalogs": [],

	// Enable/disable XML CodeLens. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22CodeLens%22%2C%22section%22%3A%22Code%20Lens%22%7D%5D) for information about CodeLens features
	"xml.codeLens.enabled": false,

	// Enable/disable the content of an element being removed when the element start tag is turned into a self-closing tag. The default setting is to remove the content. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22auto-close-removes-content%22%7D%5D) for more information.
	"xml.completion.autoCloseRemovesContent": true,

	// Enable/disable autoclosing of XML tags. Default is `true`. 
	// 
	// IMPORTANT: Turn off `editor.autoClosingTags` for this to work.
	"xml.completion.autoCloseTags": true,

	// An array of paths to JARs that should be contributed to the LemMinX classpath. The paths can include glob patterns. This is intended to be used as a tool for developing extensions to vscode-xml. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22extension-jars%22%7D%5D) for more information
	"xml.extension.jars": [],

	// Allows XML schemas/ DTD to be associated to file name patterns. Please refer to [XML file association with XSD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-file-association-with-xsd%22%7D%5D) or [XML file association with DTD](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xml-file-association-with-dtd%22%7D%5D) for more information. 
	// 
	// Example:
	// ```json
	// [{
	//   "pattern": "file1.xml",
	//   "systemId": "path/to/file.xsd"
	// },
	// {
	//   "pattern": "**/*.xsd",
	//   "systemId": "http://www.w3.org/2001/XMLSchema.xsd"
	// }]
	// ```
	"xml.fileAssociations": [],

	// The option to put a closing bracket on a newline when `xml.format.splitAttributes` is `true`. Default value is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatclosingbracketnewline%22%7D%5D) for more information.
	"xml.format.closingBracketNewLine": false,

	// Expand/collapse empty elements. Default is `ignore`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatemptyelements%22%7D%5D) for more information.
	"xml.format.emptyElements": "ignore",

	// Enable/disable ability to format document. Default is `true`.
	"xml.format.enabled": true,

	// Enforce `preferred` quote style (set by `xml.preferences.quoteStyle`) or `ignore` quote style when formatting. Default is `ignore`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatenforcequotestyle%22%7D%5D) for more information.
	//  - preferred: Use preferred quote style set by `xml.preferences.quoteStyle` when formatting.
	//  - ignore: Ignore quote style formatting.
	"xml.format.enforceQuoteStyle": "ignore",

	// Set to `true` to join lines in CDATA content during formatting. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincdatalines%22%7D%5D) for more information.
	"xml.format.joinCDATALines": false,

	// Join comment content on format. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincommentlines%22%7D%5D) for more information.
	"xml.format.joinCommentLines": false,

	// Normalize the whitespace of content inside an element. Newlines and excess whitespace are removed. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatjoincontentlines%22%7D%5D) for more information.
	"xml.format.joinContentLines": false,

	// Preserve line breaks that appear before and after attributes. This setting is overridden if `xml.format.splitAttributes` is set to `true`. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreserveattributelinebreaks%22%7D%5D) for more information.
	"xml.format.preserveAttributeLineBreaks": false,

	// Preserve new lines that separate tags. The value represents the maximum number of new lines per section. A value of 0 removes all new lines. Default is `2`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreservednewlines%22%7D%5D) for more information.
	"xml.format.preservedNewlines": 2,

	// Preserve empty content/whitespace in a tag. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatpreserveemptycontent%22%7D%5D) for more information.
	"xml.format.preserveEmptyContent": false,

	// Insert space before end of self closing tag. 
	// Example:
	//   ```<tag/> -> <tag />```. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatspacebeforeemptyclosetag%22%7D%5D) for more information.
	"xml.format.spaceBeforeEmptyCloseTag": true,

	// Split multiple attributes each onto a new line. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatsplitattributes%22%7D%5D) for more information.
	"xml.format.splitAttributes": false,

	// How many levels to indent the attributes by when `xml.format.splitAttributes` is `true`. Default value is `2`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatsplitattributesindentsize%22%7D%5D) for more information
	"xml.format.splitAttributesIndentSize": 2,

	// Split `xsi:schemaLocation` content. Default is `none`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Formatting%22%2C%22section%22%3A%22xmlformatxsischemalocationsplit%22%7D%5D) for more information
	//  - onElement: Put a new line after each namespace and URI, arranging them into one column.
	//  - onPair: Put a new line after each URI, arranging the content into pairs of namespace and URI.
	//  - none: Ignore `xsi:schemaLocation` content formatting.
	"xml.format.xsiSchemaLocationSplit": "none",

	// Specifies the folder path to the JDK (8 or more recent) used to launch the XML Language Server if the Java server is being run.
	// On Windows, backslashes must be escaped, i.e.
	// `"xml.java.home": "C:\\Program Files\\Java\\jdk1.8.0_161"`. For more information, please refer to [this document](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22java-home%22%7D%5D).
	"xml.java.home": null,

	// Enable/disable logging to the Output view. Default is `true`.
	"xml.logs.client": true,

	// Preferred quote style to use for completion: `single` quotes, `double` quotes. Default is `double`.
	"xml.preferences.quoteStyle": "double",

	// Specifies the source of the XML schema documentation displayed on hover and completion. Default is `all`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22documentation-type%22%7D%5D) for more information.
	//  - documentation: Documentation comes from the `xs:documentation` element.
	//  - appinfo: Documentation comes from the `xs:appinfo` element.
	//  - all: Documentation comes from the `xs:documentation` and `xs:appinfo` elements.
	//  - none: Displays no documentation.
	"xml.preferences.showSchemaDocumentationType": "all",

	// Command line arguments to supply to the binary server when the binary server is being used. Takes into effect after relaunching VSCode. Please refer to [this website for the available options](https://www.graalvm.org/reference-manual/native-image/HostedvsRuntimeOptions/). For example, you can increase the maximum memory that the server can use to 1 GB by adding `-Xmx1g`
	"xml.server.binary.args": "",

	// Specify the path of a custom binary version of the XML server to use. A binary will be downloaded if this is not set.
	"xml.server.binary.path": "",

	// List of the SHA256 hashes of trusted copies of the lemminx (XML language server) binary. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22trusted-binary-hashes%22%7D%5D) for more information
	"xml.server.binary.trustedHashes": [],

	// By default, vscode-xml tries to run the Java version of the XML Language Server. If no Java is detected, vscode-xml runs the binary XML language server. When this setting is enabled, the binary will also be used even if Java is installed. If there are additions to the XML Language Server provided by other extensions, Java will be used (if available) even if this setting is enabled.
	"xml.server.preferBinary": false,

	// The XML Language server allows other VSCode extensions to extend its functionality. It requires Java-specific features in order to do this. If extensions to the XML language server are detected, but a binary XML language server is run, a warning will appear. This setting can be used to disable this warning.
	"xml.server.silenceExtensionWarning": false,

	// Specifies extra VM arguments used to launch the XML Language Server. Eg. use `-Xmx1G  -XX:+UseG1GC -XX:+UseStringDeduplication` to increase the heap size to 1GB and enable String deduplication with the G1 Garbage collector. Please refer to [this document](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22server-vm-arguments%22%7D%5D) for more information on the Java server arguments.
	"xml.server.vmargs": "-Xmx64M",

	// Set a custom folder path for cached XML Schemas. An absolute path is expected, although the `~` prefix (for the user home directory) is supported. Default is `~/.lemminx`. Please refer to the [cache documentation](command:xml.open.docs?%5B%7B%22page%22%3A%22Preferences%22%2C%22section%22%3A%22server-cache-path%22%7D%5D) for more information.
	"xml.server.workDir": "~/.lemminx",

	// Enable/disable document symbols (Outline). Default is `true`. No symbols are given if `"xml.symbols.enabled": false`.
	"xml.symbols.enabled": true,

	// Disable document symbols (Outline) for the given file name patterns. Updating file name patterns does not automatically reload the Outline view for the relevant file(s). Each file must either be reopened or changed, in order to trigger an Outline view reload.
	// 
	// Example:
	// ```
	// [
	//  "**/*LargeFile.xml"
	// ]```.
	"xml.symbols.excluded": [],

	// Allows XML symbols filter to be associated to file name patterns. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsfilters%22%7D%5D) for more information.. 
	// 
	// Example:
	// ```json
	// [
	//   {
	//     "pattern": "pom.xml",
	//     "expressions": [
	//       {
	//         "xpath": "//text()"
	//       }
	//     ]
	//   }
	// ]
	// ```
	"xml.symbols.filters": [],

	// The maximum number of outline symbols and folding regions computed (limited for performance reasons). Default is `5000`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsmaxitemscomputed%22%7D%5D) for more information.
	"xml.symbols.maxItemsComputed": 5000,

	// Show referenced grammars in the Outline. Default is `true`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Symbols%22%2C%22section%22%3A%22xmlsymbolsshowreferencedgrammars%22%7D%5D) for more information.
	"xml.symbols.showReferencedGrammars": true,

	// Traces the communication between VS Code and the XML language server in the Output view. Default is `off`.
	"xml.trace.server": "off",

	// Enable/disable if a fatal error is thrown if the incoming document contains a DOCTYPE declaration. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22disallow-doc-type-declarations%22%7D%5D) for more information
	"xml.validation.disallowDocTypeDecl": false,

	// Enable/disable all validation. Default is `true`.
	"xml.validation.enabled": true,

	// Enable/disable namespaces validation. Default is `always`. Ignored if `xml.validation.enabled` is set to `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xmlnamespaceschemaenabled%22%7D%5D) for more information.
	//  - always: Enable namespaces validation.
	//  - never: Disable namespaces validation.
	//  - onNamespaceEncountered: Enable namespaces validation only when the root element declares an xmlns namespace.
	"xml.validation.namespaces.enabled": "always",

	// The message severity when a document has no associated grammar. Default is `hint`.
	"xml.validation.noGrammar": "hint",

	// Enable/disable resolve of external entities. Default is `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22resolve-external-entities%22%7D%5D) for more information. Disabled for untrusted workspaces
	"xml.validation.resolveExternalEntities": false,

	// Enable/disable schema based validation. Default is `always`. Ignored if `xml.validation.enabled` is set to `false`. See [here](command:xml.open.docs?%5B%7B%22page%22%3A%22Validation%22%2C%22section%22%3A%22xmlvalidationschemaenabled%22%7D%5D) for more information.
	//  - always: Enable schema based validation.
	//  - never: Disable schema based validation.
	//  - onValidSchema: Enable schema based validation only when the declared xsi:schemaLocation hint or xsi:noNamespaceSchemaLocation is valid for the root element.
	"xml.validation.schema.enabled": "always",

	// Enable/disable completion feature
	"yaml.completion": true,

	// Custom tags for the parser to use
	"yaml.customTags": [],

	// Globally set additionalProperties to false for all objects. So if its true, no extra properties are allowed inside yaml.
	"yaml.disableAdditionalProperties": false,

	// Print spaces between brackets in objects
	"yaml.format.bracketSpacing": true,

	// Enable/disable default YAML formatter
	"yaml.format.enable": true,

	// Specify the line length that the printer will wrap on
	"yaml.format.printWidth": 80,

	// Always: wrap prose if it exeeds the print width, Never: never wrap the prose, Preserve: wrap prose as-is
	"yaml.format.proseWrap": "preserve",

	// Use single quotes instead of double quotes
	"yaml.format.singleQuote": false,

	// Enable/disable hover feature
	"yaml.hover": true,

	// The maximum number of outline symbols and folding regions computed (limited for performance reasons).
	"yaml.maxItemsComputed": 5000,

	// Associate schemas to YAML files in the current workspace
	"yaml.schemas": {},

	// Automatically pull available YAML schemas from JSON Schema Store
	"yaml.schemaStore.enable": true,

	// URL of schema store catalog to use
	"yaml.schemaStore.url": "https://www.schemastore.org/api/json/catalog.json",

	// Traces the communication between VSCode and the YAML language service.
	"yaml.trace.server": "off",

	// Enable/disable validation feature
	"yaml.validate": true,

	// Default YAML spec version
	"yaml.yamlVersion": "1.2",

	// Note: If it is not Null, It will override CustomBrowser and ChromeDebuggingAttachment settings.
	// 
	//  Examples : 
	// chrome --incognito --headless --remote-debugging-port=9222 
	//  C:\\Program Files\\Firefox Developer Edition\\firefox.exe --private-window
	"liveServer.settings.AdvanceCustomBrowserCmdLine": null,

	// Enable Chrome Debugging Attachment to Live Server at Debuging Port 9222.
	//  NOTE: You have to install 'Debugger for Chrome' 
	// If the value is true, Select 'Attach to Chrome' from Debug Window to start debugging. 
	// 
	//  CAUTION: If it is true, 'Launch Chrome against localhost' may not work.
	"liveServer.settings.ChromeDebuggingAttachment": false,

	// Specify custom browser settings for Live Server. 
	// By Default it will open your default favorite browser.
	"liveServer.settings.CustomBrowser": null,

	// To disable information pop up messages.
	"liveServer.settings.donotShowInfoMsg": false,

	// To turn off prompt warning message if body or head or other supporting tag is missing in your HTML.
	"liveServer.settings.donotVerifyTags": false,

	// When set, serve this file (server root relative) for every 404 (useful for single-page applications)
	"liveServer.settings.file": "",

	// By Default Live Server inject CSS changes without full reloading of browser. You can change this behviour by making this setting as `true`
	"liveServer.settings.fullReload": false,

	// To switch between localhost or 127.0.0.1 or anything else. Default is 127.0.0.1
	"liveServer.settings.host": "127.0.0.1",

	// Setup https configuration
	"liveServer.settings.https": {
		"enable": false,
		"cert": "",
		"key": "",
		"passphrase": ""
	},

	// To ignore specific file changes
	"liveServer.settings.ignoreFiles": [
		".vscode/**",
		"**/*.scss",
		"**/*.sass",
		"**/*.ts"
	],

	// Mount a directory to a route. Such as [['/components', './node_modules']]
	"liveServer.settings.mount": [],

	// This the entry point of server when you're in multiroot workspace
	"liveServer.settings.multiRootWorkspaceName": null,

	// If it is true live server will start without browser opened.
	"liveServer.settings.NoBrowser": false,

	// Set Custom Port Number of Live Server. Set 0 if you want random port.
	"liveServer.settings.port": 5500,

	// To Setup Proxy
	"liveServer.settings.proxy": {
		"enable": false,
		"baseUri": "/",
		"proxyUri": "http://127.0.0.1:80"
	},

	// Set Custom root of Live Server. 
	// To change root the the server to sub folder of workspace, use '/' and relative path from workspace. 
	// Example: /subfolder1/subfolder2
	"liveServer.settings.root": "/",

	// Change this to false if you don't want the button to show in the statusbar
	"liveServer.settings.showOnStatusbar": true,

	// Open in Browser Preview inside VS Code, instead of default browser
	"liveServer.settings.useBrowserPreview": false,

	// Use local IP as host
	"liveServer.settings.useLocalIp": false,

	// You have to install a browser extension. That will be works for your dynamic pages (like PHP).
	"liveServer.settings.useWebExt": false,

	// Delay before live reloading. Value in milliseconds. Default is 100
	"liveServer.settings.wait": 100,

	// Specifies the directory containing workspace related code actions.
	"javascriptBooster.codemodDir": "codemods",

	// Specifies formatting options that will be used for newly generated code. Only the code fragment affected by a chosen code action is reformatted.
	"javascriptBooster.formattingOptions": {},

	// Controls the amount of information in the output log. Switching to verbose will also show performance metrics.
	"javascriptBooster.logLevel": "info",

	// Specifies the fallback command that should be executed if the file is not supported by smart selection.
	"javascriptBooster.smartExtendFallbackCommand": "editor.action.smartSelect.grow",

	// Specifies the fallback command that should be executed if the file is not supported by smart selection.
	"javascriptBooster.smartShrinkFallbackCommand": "editor.action.smartSelect.shrink",

	// Number of spaces for a signle indnent
	"bashBeautify.tabSize": 4,

	// Enable debug messages
	"djangointellisense.debugMessages": false,

	// Django project root directory
	"djangointellisense.projectRoot": "",

	// settings module path (Example: `projectname.settings`)
	"djangointellisense.settingsModule": "",

	// Set it true to Auto Download the settings on code start. [Code Restart Required]
	"sync.autoDownload": false,

	// Set it true to Auto Upload on the settings change. [Code Restart Required]
	"sync.autoUpload": false,

	// Set it to true if you want to download the settings even when you have the latest settings.
	"sync.forceDownload": false,

	// Set it to true if you want to upload the settings even when the GIST has newer settings.
	"sync.forceUpload": false,

	// GitHub GIST ID for Settings Sync.
	"sync.gist": "",

	// When set to true, will show the result in status bar instead of summary page.
	"sync.quietSync": false,

	// Set it to false if you don't want to remove extensions while downloading.
	"sync.removeExtensions": true,

	// Set it to false if you don't want to upload/download the extensions.
	"sync.syncExtensions": true,

	// Qiniu AccessKey
	"markdown-preview-enhanced.AccessKey": "",

	// Automatically show preview of markdown being edited.
	"markdown-preview-enhanced.automaticallyShowPreviewOfMarkdownBeingEdited": false,

	// In Markdown, a single newline character doesn't cause a line break in the generated HTML. In GitHub Flavored Markdown, that is not true. Enable this config option to insert line breaks in rendered HTML for single newlines in Markdown source.
	"markdown-preview-enhanced.breakOnSingleNewLine": true,

	// Qiniu Bucket
	"markdown-preview-enhanced.Bucket": "",

	// Chrome executable path, which is used for Puppeteer export. Leaving it empty means the path will be found automatically.
	"markdown-preview-enhanced.chromePath": "",

	// Code block theme. If `auto.css` is chosen, then the code block theme that best matches the current preview theme will be picked.
	"markdown-preview-enhanced.codeBlockTheme": "auto.css",

	// The configuration directory path. Leave it empty to use '~/.mume' as the config path. Please reload vscode to take effect.
	"markdown-preview-enhanced.configPath": "",

	// Qiniu Domain
	"markdown-preview-enhanced.Domain": "http://",

	// Enable CriticMarkup syntax. Only works with markdown-it parser. Please check http://criticmarkup.com/users-guide.php for more information.
	"markdown-preview-enhanced.enableCriticMarkupSyntax": false,

	// Enable emoji & font-awesome plugin. This only works for markdown-it parser, but not pandoc parser.
	"markdown-preview-enhanced.enableEmojiSyntax": true,

	// Enable extended table syntax to support merging table cells.
	"markdown-preview-enhanced.enableExtendedTableSyntax": false,

	//  Enables transform audio video link to to html5 embed audio video tags.
	"markdown-preview-enhanced.enableHTML5Embed": false,

	// Enable or disable conversion of URL-like text to links in the markdown preview.
	"markdown-preview-enhanced.enableLinkify": true,

	// Enables executing code chunks and importing javascript files.
	// ⚠️ Please use this feature with caution because it may put your security at risk! Your machine can get hacked if someone makes you open a markdown with malicious code while script execution is enabled.
	"markdown-preview-enhanced.enableScriptExecution": false,

	// Enable smartypants and other sweet transforms.
	"markdown-preview-enhanced.enableTypographer": false,

	// Enable Wiki Link syntax support. More information can be found at https://help.github.com/articles/adding-links-to-wikis/
	"markdown-preview-enhanced.enableWikiLinkSyntax": true,

	// Front matter rendering option
	"markdown-preview-enhanced.frontMatterRenderingOption": "none",

	// HTML attributes to pass to audio tags.
	"markdown-preview-enhanced.HTML5EmbedAudioAttributes": "controls preload=\"metadata\" width=\"320\"",

	// When true embed media with http:// schema in URLs. When false ignore and don't embed them.
	"markdown-preview-enhanced.HTML5EmbedIsAllowedHttp": false,

	//  Enables video/audio embed with ![]() syntax (default).
	"markdown-preview-enhanced.HTML5EmbedUseImageSyntax": true,

	// Enables video/audio embed with []() syntax.
	"markdown-preview-enhanced.HTML5EmbedUseLinkSyntax": false,

	// HTML attributes to pass to video tags.
	"markdown-preview-enhanced.HTML5EmbedVideoAttributes": "controls preload=\"metadata\" width=\"320\" height=\"240\"",

	// When using Image Helper to copy images, by default images will be copied to root image folder path '/assets'
	"markdown-preview-enhanced.imageFolderPath": "/assets",

	// ImageMagick command line path. Should be either `magick` or `convert`. Leaving it empty means the path will be found automatically.
	"markdown-preview-enhanced.imageMagickPath": "",

	// You can choose different image uploader to upload image
	"markdown-preview-enhanced.imageUploader": "imgur",

	// Default latex engine for Pandoc export and latex code chunk.
	"markdown-preview-enhanced.latexEngine": "pdflatex",

	// Re-render the preview as the contents of the source changes, without requiring the source buffer to be saved. If disabled, the preview is re-rendered only when the buffer is saved to disk.
	"markdown-preview-enhanced.liveUpdate": true,

	// Use customized Math expression block delimiters.
	"markdown-preview-enhanced.mathBlockDelimiters": [
		[
			"$$",
			"$$"
		],
		[
			"\\[",
			"\\]"
		]
	],

	// Use customized Math expression inline delimiters.
	"markdown-preview-enhanced.mathInlineDelimiters": [
		[
			"$",
			"$"
		],
		[
			"\\(",
			"\\)"
		]
	],

	// Choose the Math expression rendering method option for GFM markdown export (Save as Markdown).
	"markdown-preview-enhanced.mathRenderingOnlineService": "https://latex.codecogs.com/gif.latex",

	// Choose the Math expression rendering method here. You can also disable math rendering if you want by choosing 'None'.
	"markdown-preview-enhanced.mathRenderingOption": "KaTeX",

	// Mermaid theme, you can choose one from ["mermaid.css", "mermaid.dark.css", "mermaid.forest.css"]
	"markdown-preview-enhanced.mermaidTheme": "default",

	// Args passed to pandoc command e.g. ["--smart", "--filter=/bin/exe"] Please use long argument names.
	"markdown-preview-enhanced.pandocArguments": [],

	// The pandoc markdown flavor you want
	"markdown-preview-enhanced.pandocMarkdownFlavor": "markdown-raw_tex+tex_math_single_backslash",

	// Pandoc executable path
	"markdown-preview-enhanced.pandocPath": "pandoc",

	// Render using PlantUML server instead of binary. Leave it empty to use the builtin plantuml.jar binary (`java` is required in system path). Eg: "http://localhost:8080/svg/"
	"markdown-preview-enhanced.plantumlServer": "",

	// Preview Theme
	"markdown-preview-enhanced.previewTheme": "github-light.css",

	// Whether to print background for file export or not. If set to `false`, then `github-light` preview theme will be used. You can also set `print_background` in front-matter for individual files.
	"markdown-preview-enhanced.printBackground": false,

	// Accepted protocols for links.
	"markdown-preview-enhanced.protocolsWhiteList": "http://, https://, atom://, file://, mailto:, tel:",

	// Args passed to puppeteer.launch({args: $puppeteerArgs})
	"markdown-preview-enhanced.puppeteerArgs": [],

	// Puppeteer waits for a certain timeout in milliseconds before the document export.
	"markdown-preview-enhanced.puppeteerWaitForTimeout": 0,

	// RevealJS Presentation Theme
	"markdown-preview-enhanced.revealjsTheme": "white.css",

	// Automatic scroll sync. This is now partially supported.
	"markdown-preview-enhanced.scrollSync": true,

	// Qiniu SecretKey
	"markdown-preview-enhanced.SecretKey": "",

	// Open Only One Preview.
	"markdown-preview-enhanced.singlePreview": true,

	// If checked, we use GitHub style piped wiki links, i.e. [[linkText|wikiLink]]. Otherwise, we use [[wikiLink|linkText]] as the original Wikipedia style.
	"markdown-preview-enhanced.useGitHubStylePipedLink": true,

	// Enable this option will render markdown by pandoc instead of markdown-it.
	"markdown-preview-enhanced.usePandocParser": false,

	// If set to true, then locally installed puppeteer-core will be required. Otherwise, the puppeteer globally installed by `npm install -g puppeteer` will be required.
	"markdown-preview-enhanced.usePuppeteerCore": true,

	// By default, the extension for wikilink is `.md`. For example: [[test]] will direct to file path `test.md`.
	"markdown-preview-enhanced.wikiLinkFileExtension": ".md",

	// Color of the indent marker for dark themes
	"indenticator.color.dark": "#888",

	// Color of the indent marker for light themes
	"indenticator.color.light": "#999",

	// Wether to highlight the contained code block when hovering the indent line. If activated, the peeked content will be shown at top or bottom of the block, otherwise it will be shown at cursor position.
	"indenticator.hover.highlight": true,

	// Lines before the current indent to be shown on hover
	"indenticator.hover.peekBack": 1,

	// Block placeholder to be written between peeked lines
	"indenticator.hover.peekBlockPlaceholder": "...",

	// Lines after the current indent to be shown on hover
	"indenticator.hover.peekForward": 0,

	// Remove lines from the hover at the beginning and end that have less characters than this
	"indenticator.hover.trimLinesShorterThan": 2,

	// Color of the inner indent marker for dark themes
	"indenticator.inner.color.dark": "",

	// Color of the inner indent marker for light themes
	"indenticator.inner.color.light": "#999",

	// Wether to highlight the contained code block when hovering the inner indent line. If activated, the peeked content will be shown at top or bottom of the block, otherwise it will be shown at cursor position.
	"indenticator.inner.hover.highlight": true,

	// Lines before the current inner indent to be shown on hover
	"indenticator.inner.hover.peekBack": 1,

	// Block placeholder to be written between peeked lines for the hover of the inner indent
	"indenticator.inner.hover.peekBlockPlaceholder": "...",

	// Lines after the current inner indent to be shown on hover
	"indenticator.inner.hover.peekForward": 0,

	// Remove lines from the inner indent hover at the beginning and end that have less characters than this
	"indenticator.inner.hover.trimLinesShorterThan": 2,

	// Whether to display the hover near the inner indent line, or minimum number of lines in current indent block to activate the hover.
	"indenticator.inner.showHover": false,

	// Whether to highlight the indent of the block enclosed by the current line
	"indenticator.inner.showIndentGuide": false,

	// Line style of the inner indent marker
	"indenticator.inner.style": "inset",

	// Width of the inner indent marker in pixels
	"indenticator.inner.width": 1,

	// A construct with language identifiers as properties containing a subset of indenticator options to be applied to that language
	"indenticator.languageSpecific": {},

	// Whether to display the current indent depth on the statusbar
	"indenticator.showCurrentDepthInStatusBar": true,

	// Whether to display the hover near the indent line, or minimum number of lines in current indent block to activate the hover.
	"indenticator.showHover": false,

	// Whether to highlight the indent of the block enclosing the current line
	"indenticator.showIndentGuide": true,

	// Line style of the indent marker
	"indenticator.style": "inset",

	// Width of the indent marker in pixels
	"indenticator.width": 1,

	// Install package from this source
	//  - pypi: https://pypi.python.org/pypi
	//  - tsinghua: https://pypi.tuna.tsinghua.edu.cn/simple
	//  - aliyun: http://mirrors.aliyun.com/pypi/simple
	//  - douban: http://pypi.douban.com/simple
	"pip-manager.source": "tsinghua",

	// If setting this config, will use this config override source, otherwise keep empty
	"pip-manager.sourceCustom": "",

	// Active indentation guides rendering color for dark themes.
	"guides.active.color.dark": "rgba(120, 60, 60, 0.75)",

	// Active indentation guides rendering color for light themes.
	"guides.active.color.light": "rgba(200, 100, 100, 0.75)",

	// Enable active indentation guides in addition to normal indentation guides.
	"guides.active.enabled": true,

	// Expand active indentation guides on the bracket's line.
	"guides.active.expandBrackets": true,

	// Shift active indentations by a level. This will also render an extra indentation guide.
	"guides.active.extraIndent": false,

	// Enable active indentation region indicator in the gutter area in addition to normal indentation guides.
	"guides.active.gutter": false,

	// Hide active indentation guides in selections.
	"guides.active.hideOnSelection": true,

	// Active indentation guides rendering style.
	"guides.active.style": "solid",

	// Active indentation guides rendering width.
	"guides.active.width": 1,

	// Enable the extension.
	"guides.enabled": true,

	// Indentation background colors.
	"guides.indent.backgrounds": [],

	// Hide indentation background in selections.
	"guides.indent.hideBackgroundOnSelection": true,

	// Show start-of-line indentation guides.
	"guides.indent.showFirstIndentGuides": true,

	// Maximum rendering boundary based on current cursor position. Set to -1 for no limit. Use floating point between 0-1 to determine from document size instead.
	"guides.limit.maximum": 500,

	// Normal indentation guides rendering color for dark themes.
	"guides.normal.color.dark": "rgba(60, 60, 60, 0.75)",

	// Normal indentation guides rendering color for light themes.
	"guides.normal.color.light": "rgba(220, 220, 220, 0.75)",

	// Enable normal indentation guides.
	"guides.normal.enabled": true,

	// Hide normal indentation guides in selections.
	"guides.normal.hideOnSelection": true,

	// Normal indentation guides rendering style.
	"guides.normal.style": "solid",

	// Normal indentation guides rendering width.
	"guides.normal.width": 1,

	// Override default Visual Studio Code behaviours (such as indentation guides or rulers).
	"guides.overrideDefault": false,

	// Send anonymous usage statistics data to the developer.
	"guides.sendUsagesAndStats": true,

	// Stack indentation guides rendering color for dark themes.
	"guides.stack.color.dark": "rgba(80, 80, 80, 0.75)",

	// Stack indentation guides rendering color for light themes.
	"guides.stack.color.light": "rgba(180, 180, 180, 0.75)",

	// Enable stack indentation guides in addition to normal indentation guides.
	"guides.stack.enabled": true,

	// Hide stack indentation guides in selections.
	"guides.stack.hideOnSelection": true,

	// Stack indentation guides rendering style.
	"guides.stack.style": "solid",

	// Stack indentation guides rendering width.
	"guides.stack.width": 1,

	// Time duration between each guide lines update (in seconds).
	"guides.updateDelay": 0.1,

	// Enable / Disable allowing word compounds. `true` means `arraylength` would be ok, `false` means it would not pass.
	"cSpell.allowCompoundWords": false,

	// Control which file schemas will be checked for spelling (VS Code must be restarted for this setting to take effect).
	"cSpell.allowedSchemas": [
		"file",
		"gist",
		"sftp",
		"untitled",
		"vscode-notebook-cell"
	],

	// The maximum average length of chunks of text without word breaks.
	// 
	// A chunk is the characters between absolute word breaks.
	// Absolute word breaks match: `/[\s,{}[\]]/`
	// 
	// **Error Message:** _Average Word Size is Too High._
	// 
	// If you are seeing this message, it means that the file contains mostly long lines
	// without many word breaks.
	"cSpell.blockCheckingWhenAverageChunkSizeGreatherThan": 80,

	// The maximum line length.
	// 
	// Block spell checking if lines are longer than the value given.
	// This is used to prevent spell checking generated files.
	// 
	// **Error Message:** _Lines are too long._
	"cSpell.blockCheckingWhenLineLengthGreaterThan": 10000,

	// The maximum length of a chunk of text without word breaks.
	// 
	// It is used to prevent spell checking of generated files.
	// 
	// A chunk is the characters between absolute word breaks.
	// Absolute word breaks match: `/[\s,{}[\]]/`, i.e. spaces or braces.
	// 
	// **Error Message:** _Maximum Word Length is Too High._
	// 
	// If you are seeing this message, it means that the file contains a very long line
	// without many word breaks.
	"cSpell.blockCheckingWhenTextChunkSizeGreaterThan": 500,

	// Words must match case rules.
	"cSpell.caseSensitive": false,

	// The limit in K-Characters to be checked in a file.
	"cSpell.checkLimit": 500,

	// Define custom dictionaries to be included by default.
	// If `addWords` is `true` words will be added to this dictionary.
	// 
	// **Example:**
	// 
	// ```js
	// "cSpell.customDictionaries": {
	//   "project-words": {
	//     "name": "project-words",
	//     "path": "${workspaceRoot}/project-words.txt",
	//     "description": "Words used in this project",
	//     "addWords": true
	//   },
	//   "custom": true, // Enable the `custom` dictionary
	//   "internal-terms": false // Disable the `internal-terms` dictionary
	// }
	// ```
	"cSpell.customDictionaries": {},

	// - Use `customDictionaries` instead.
	// Define custom dictionaries to be included by default for the folder.
	// If `addWords` is `true` words will be added to this dictionary.
	"cSpell.customFolderDictionaries": [],

	// - Use `customDictionaries` instead.
	// Define custom dictionaries to be included by default for the user.
	// If `addWords` is `true` words will be added to this dictionary.
	"cSpell.customUserDictionaries": [],

	// - Use `customDictionaries` instead.
	// Define custom dictionaries to be included by default for the workspace.
	// If `addWords` is `true` words will be added to this dictionary.
	"cSpell.customWorkspaceDictionaries": [],

	// Issues found by the spell checker are marked with a Diagnostic Severity Level. This affects the color of squiggle.
	//  - Error: Report Spelling Issues as Errors
	//  - Warning: Report Spelling Issues as Warnings
	//  - Information: Report Spelling Issues as Information
	//  - Hint: Report Spelling Issues as Hints, will not show up in Problems
	"cSpell.diagnosticLevel": "Information",

	// Optional list of dictionaries to use. Each entry should match the name of the dictionary. To remove a dictionary from the list add `!` before the name. i.e. `!typescript` will turn off the dictionary with the name `typescript`.
	"cSpell.dictionaries": [],

	// Define additional available dictionaries
	"cSpell.dictionaryDefinitions": [],

	// Enable / Disable the spell checker.
	"cSpell.enabled": true,

	// Specify file types to spell check. Use `cSpell.enableFiletypes` to Enable / Disable checking files types.
	"cSpell.enabledLanguageIds": [
		"asciidoc",
		"c",
		"cpp",
		"csharp",
		"css",
		"git-commit",
		"go",
		"graphql",
		"handlebars",
		"haskell",
		"html",
		"jade",
		"java",
		"javascript",
		"javascriptreact",
		"json",
		"jsonc",
		"jupyter",
		"latex",
		"less",
		"markdown",
		"php",
		"plaintext",
		"python",
		"pug",
		"restructuredtext",
		"rust",
		"scala",
		"scss",
		"text",
		"typescript",
		"typescriptreact",
		"yaml",
		"yml"
	],

	// Enable / Disable checking file types (languageIds).
	// These are in additional to the file types specified by `cSpell.enabledLanguageIds`.
	// To disable a language, prefix with `!` as in `!json`,
	// 
	// Example:
	// ```
	// jsonc       // enable checking for jsonc
	// !json       // disable checking for json
	// kotlin      // enable checking for kotlin
	// ```
	"cSpell.enableFiletypes": [],

	// Show Regular Expression Explorer
	"cSpell.experimental.enableRegexpView": false,

	// Glob patterns of files to be checked. Glob patterns are relative to the `globRoot` of the configuration file that defines them.
	"cSpell.files": [],

	// Use Rename when fixing spelling issues.
	"cSpell.fixSpellingWithRenameProvider": true,

	// list of words to always be considered incorrect.
	"cSpell.flagWords": [],

	// The root to use for glop patterns found in this configuration. Default: The current workspace folder. Use `globRoot` to define a different location. `globRoot` can be relative to the location of this configuration file. Defining globRoot, does not impact imported configurations.
	// 
	// Special Values:
	// 
	// - `${workspaceFolder}` - Default - globs will be relative to the current workspace folder\n
	// - `${workspaceFolder:<name>}` - Where `<name>` is the name of the workspace folder.
	"cSpell.globRoot": "",

	// Glob patterns of files to be ignored. The patterns are relative to the `globRoot` of the configuration file that defines them.
	"cSpell.ignorePaths": [
		"package-lock.json",
		"node_modules",
		"vscode-extension",
		".git/objects",
		".vscode",
		".vscode-insiders"
	],

	// List of RegExp patterns or Pattern names to exclude from spell checking.
	// 
	// Example: ["href"] - to exclude html href
	"cSpell.ignoreRegExpList": [],

	// A list of words to be ignored by the spell checker.
	"cSpell.ignoreWords": [],

	// Other settings files to be included
	"cSpell.import": [],

	// List of RegExp patterns or defined Pattern names to define the text to be included for spell checking. If includeRegExpList is defined, ONLY, text matching the included patterns will be checked.
	"cSpell.includeRegExpList": [],

	// Current active spelling language.
	// Example: "en-GB" for British English
	// Example: "en,nl" to enable both English and Dutch
	"cSpell.language": "en",

	// Additional settings for individual languages.
	"cSpell.languageSettings": [],

	// Set the Debug Level for logging messages.
	//  - None: Do not log
	//  - Error: Log only errors
	//  - Warning: Log errors and warnings
	//  - Information: Log errors, warnings, and info
	//  - Debug: Log everything (noisy)
	"cSpell.logLevel": "Error",

	// The maximum number of times the same word can be flagged as an error in a file.
	"cSpell.maxDuplicateProblems": 5,

	// Controls the maximum number of spelling errors per document.
	"cSpell.maxNumberOfProblems": 100,

	// The minimum length of a word before checking it against a dictionary.
	"cSpell.minWordLength": 4,

	// Prevents searching for local configuration when checking individual documents.
	"cSpell.noConfigSearch": false,

	// Optional list of dictionaries that will not be used for suggestions. Words in these dictionaries are considered correct, but will not be used when making spell correction suggestions.
	// 
	// Note: if a word is suggested by another dictionary, but found in one of these dictionaries, it will be removed from the set of possible suggestions.
	"cSpell.noSuggestDictionaries": [],

	// Controls the number of suggestions shown.
	"cSpell.numSuggestions": 8,

	// Overrides to apply based upon the file path.
	"cSpell.overrides": [],

	// Defines a list of patterns that can be used in ignoreRegExpList and includeRegExpList
	"cSpell.patterns": [],

	// Show Spell Checker actions in Editor Context Menu
	"cSpell.showCommandsInEditorContextMenu": true,

	// Display the spell checker status on the status bar.
	"cSpell.showStatus": true,

	// The side of the status bar to display the spell checker status.
	//  - Left: Left Side of Statusbar
	//  - Right: Right Side of Statusbar
	"cSpell.showStatusAlignment": "Right",

	// Delay in ms after a document has changed before checking it for spelling errors.
	"cSpell.spellCheckDelayMs": 50,

	// Only spell check files that are in the currently open workspace.
	// This same effect can be achieved using the `files` setting.
	// 
	// ```
	// "cSpell.files": ["**", "**​/.*", "**​/.*​/**"]
	// ```
	"cSpell.spellCheckOnlyWorkspaceFiles": false,

	// The type of menu used to display spelling suggestions.
	//  - quickPick: Suggestions will appear as a drop down at the top of the IDE. (Best choice for Vim Key Bindings)
	//  - quickFix: Suggestions will appear inline near the word, inside the text editor.
	"cSpell.suggestionMenuType": "quickPick",

	// The maximum number of changes allowed on a word to be considered a suggestions.
	// 
	// For example, appending an `s` onto `example` -> `examples` is considered 1 change.
	// 
	// Range: between 1 and 5.
	"cSpell.suggestionNumChanges": 3,

	// The maximum amount of time in milliseconds to generate suggestions for a word.
	"cSpell.suggestionsTimeout": 400,

	// Tells the spell checker to load `.gitignore` files and skip files that match the globs in the `.gitignore` files found.
	"cSpell.useGitignore": true,

	// Packages managers like Yarn 2 use a `.pnp.cjs` file to assist in loading packages stored in the repository.
	// 
	// When true, the spell checker will search up the directory structure for the existence of a PnP file and load it.
	"cSpell.usePnP": false,

	// Words to add to global dictionary -- should only be in the user config file.
	"cSpell.userWords": [],

	// list of words to be always considered correct
	"cSpell.words": [],

	// Define the path to the workspace root folder in a multi-root workspace.
	// By default it is the first folder.
	// 
	// This is used to find the `cspell.json` file for the workspace.
	// 
	// Example: use the `client` folder
	// ```
	// ${workspaceFolder:client}
	// ```
	"cSpell.workspaceRootPath": "",

	// Disable Tabnine when the file path contains a match of any of the provided regexes. For example, add "[.]js$" to disable Tabnine in JavaScript files.
	"tabnine.disable_file_regex": [],

	// Disable Tabnine when the current line contains a match of any of the provided regexes. For example, add "require" to disable Tabnine when the current line contains the word 'require'.
	"tabnine.disable_line_regex": [],

	// Experimental: Enable modules auto-import following applying Tabnine suggestions
	"tabnine.experimentalAutoImports": null,

	// Tabnine's log file (Visual Studio Code must be restarted for this setting to take effect)
	"tabnine.logFilePath": "",

	// Receive Tabnine VSCode extention beta updates
	"tabnine.receiveBetaChannelUpdates": false,

	// Set default browser
	"open-in-browser.default": "",

	// Copy and paste your badge name and links here. ["name", "link"]
	"badge-viewer.badge-links": [],

	// The linter to use
	"python.linter": "pyLint",

	// Controls the maximum number of problems produced by the server.
	"python.maxNumberOfProblems": 100,

	// Specifies the folder path to the JRE used to launch the W3C Validation Language Server.
	// For example "C:\Program Files\Java\jdk-11" (Windows)
	//  /usr/lib/jvm/java-11-openjdk-amd64 (Ubuntu, etc.)
	"vscode-w3cvalidation.javaHome": "",

	// Traces the communication between VS Code and the HTML validation language server.
	"vscode-w3cvalidation.trace.server": "off",

	// Last-Modified, a timestamp, for the last release of war tag in the Nu Html Checker repository.
	"vscode-w3cvalidation.validator-token": "Sun, 21 Mar 2021 02:44:38 GMT",

	// 
	"vsintellicode.features.python.deepLearning": "default",

	// Enable Visual Studio IntelliCode completions for Java
	"vsintellicode.java.completionsEnabled": true,

	// Specifies the folder path where downloaded model files are stored. Defaults to the extension install directory if not specified.
	"vsintellicode.modelDownloadPath": null,

	// Control whether Visual Studio IntelliCode will modify `editor.suggestSelection` if it is set to a value (`recentlyUsed`) that will result in IntelliCode suggested completion items not being visible.
	//  - enabled: Allows IntelliCode to modify the editor.suggestSelection setting on your behalf.
	//  - disabled: You've explicitly opted out of having this configuration controlled by IntelliCode.
	//  - automaticallyOverrodeDefaultValue: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that configuration has been automatically modified to override a default value.
	//  - choseToUpdateConfiguration: (DO NOT SET THIS MANUALLY) IntelliCode will set this to record that you've chosen to let IntelliCode change the configuration from a value that was explicitly set.
	"vsintellicode.modify.editor.suggestSelection": "enabled",

	// Enable Visual Studio IntelliCode completions for Python
	"vsintellicode.python.completionsEnabled": true,

	// Enable Visual Studio IntelliCode completions for MSSQL
	"vsintellicode.sql.completionsEnabled": true,

	// Enable Visual Studio IntelliCode completions for TypeScript and JavaScript
	"vsintellicode.typescript.completionsEnabled": true,

	// Automatically start on file open if Quokka was last running when the file was closed
	"quokka.automaticRestart": false,

	// Automatically start on file open when the file path matches the regular expression
	"quokka.automaticStartRegex": "",

	// Code auto-play delay in milliseconds
	"quokka.codeAutoPlayDelay": 1000,

	// Colorize Quokka output
	"quokka.colorizeOutput": true,

	// Quokka gutter indicators colors (requires a restart after change)
	"quokka.colors": {
		"covered": "#62b455",
		"errorPath": "#ffa0a0",
		"errorSource": "#fe536a",
		"notCovered": "#cccccc",
		"partiallyCovered": "#d2a032"
	},

	// Minimize the number of new line characters between output console messages
	"quokka.compactMessageOutput": false,

	// Override Quokka Dark Theme Error
	"quokka.darkTheme.error.decorationAttachmentRenderOptions": {
		"border": null,
		"borderColor": null,
		"fontStyle": null,
		"fontWeight": null,
		"textDecoration": null,
		"color": "#fe536a",
		"backgroundColor": null,
		"margin": "1.2em",
		"width": null,
		"height": null
	},

	// Override Quokka Dark Theme Log
	"quokka.darkTheme.log.decorationAttachmentRenderOptions": {
		"border": null,
		"borderColor": null,
		"fontStyle": null,
		"fontWeight": null,
		"textDecoration": null,
		"color": "rgba(86, 156, 214, 1)",
		"backgroundColor": null,
		"margin": "1.2em",
		"width": null,
		"height": null
	},

	// Override Quokka Dark Theme System Log
	"quokka.darkTheme.system.decorationAttachmentRenderOptions": {
		"border": null,
		"borderColor": null,
		"fontStyle": null,
		"fontWeight": null,
		"textDecoration": null,
		"color": "rgb(153, 153, 153)",
		"backgroundColor": null,
		"margin": "1.2em",
		"width": null,
		"height": null
	},

	// Override Quokka Light Theme Error
	"quokka.lightTheme.error.decorationAttachmentRenderOptions": {
		"border": null,
		"borderColor": null,
		"fontStyle": null,
		"fontWeight": null,
		"textDecoration": null,
		"color": "#c80000",
		"backgroundColor": null,
		"margin": "1.2em",
		"width": null,
		"height": null
	},

	// Override Quokka Light Theme Log
	"quokka.lightTheme.log.decorationAttachmentRenderOptions": {
		"border": null,
		"borderColor": null,
		"fontStyle": null,
		"fontWeight": null,
		"textDecoration": null,
		"color": "#0000ff",
		"backgroundColor": null,
		"margin": "1.2em",
		"width": null,
		"height": null
	},

	// Override Quokka Light Theme System Log
	"quokka.lightTheme.system.decorationAttachmentRenderOptions": {
		"border": null,
		"borderColor": null,
		"fontStyle": null,
		"fontWeight": null,
		"textDecoration": null,
		"color": "rgb(153, 153, 153)",
		"backgroundColor": null,
		"margin": "1.2em",
		"width": null,
		"height": null
	},

	// Display code lens in Quokka output
	"quokka.showCodeLensInOutputChannel": true,

	// Show Quokka output window on start up
	"quokka.showOutputOnStart": true,

	// Display information about new features when they are released
	"quokka.showStartViewOnFeatureRelease": true,

	// Display Quokka Start View status bar indicator
	"quokka.startViewStatusBar": true,

	// Stop Quokka expiring license update reminders
	"quokka.suppressExpirationNotifications": false,

	// Suppress Quokka Glyph Margin Notifications
	"quokka.suppressGlyphMarginNotifications": true,

	// Set default project location for your project.
	"wts.changeSaveToLocation": "",

	// Enable upcoming features; Warning: may cause stability issues.
	"wts.enablePreviewMode": false,

	// [Privacy Link](https://privacy.microsoft.com/en-US/privacystatement) | [Terms of Use](https://www.microsoft.com/en-us/legal/intellectualproperty/copyright/default.aspx)
	"wts.legalResources": null,

	// injected into livecode each run. Use 'Developer: Open Webview Developer Tools' command to inspect livecode html
	"livecode.customCSS": null,

	// Any variables with these types are not shown in livecode variable view. You can use the livecode_filter_type variable in livecode to play around with this setting in real-time
	"livecode.defaultFilterTypes": [
		"<class 'module'>",
		"<class 'function'>"
	],

	// Any variables with these names are not shown in livecode variable view. You can use the livecode_filter variable in livecode to play around with this setting in real-time
	"livecode.defaultFilterVars": [],

	// Default imports for new livecode sessions. 
	"livecode.defaultImports": [
		""
	],

	// delay in milliseconds before executing code after typing
	"livecode.delay": 300,

	// Absolute path to a file containing environment variable definitions. If not set the setting from the python extension will be used, or ${workspaceFolder}/.env if the python extension is not installed
	"livecode.envFile": null,

	// whether to show errors / results / prints inline. (Currently just error icons)
	"livecode.inlineResults": false,

	// If set to true livecode will add onto the local state each run instead of clearing it and starting fresh.
	"livecode.keepPreviousVars": false,

	// strings over X characters are truncated with an option to expand
	"livecode.max_string_length": 70,

	// 
	//  - top: print results appear on top
	//  - bottom: print results appear on bottom
	"livecode.printResultPlacement": "bottom",

	// livecode enters restart mode when one of these libraries are imported. Process is restarted at end of each run so GUI window is updated
	"livecode.pyGuiLibraries": [
		"matplotlib",
		"tkinter",
		"kivy",
		"pyforms",
		"PyQt4",
		"PyQt5",
		"wx",
		"pyside",
		"plotly",
		"ggplot",
		"bokeh",
		"ppb",
		"PySimpleGUI",
		"pyglet"
	],

	// default -u to see prints in real-time. See https://docs.python.org/3/using/cmdline.html#miscellaneous-options for other options. Changing this setting not reccomended
	"livecode.pythonOptions": [
		"-u"
	],

	// livecode uses the path you have defined in the official python extension. If not present then this setting will be used. If this setting is also empty then on windows py will be used, or python3 otherwise
	"livecode.pythonPath": null,

	// when restart mode is active we add this to delay to delay longer
	"livecode.restartDelay": 300,

	// Whether to automatically load django models. This setting doesn't actually do anything yet. See https://github.com/Almenon/livecode-vscode/issues/279
	"livecode.shell_plus": false,

	// 2 shows x=1 and x=[1,2], provides option to expand deeply nested data like x=[[1]]
	"livecode.show_to_level": 5,

	// 
	"livecode.showFooter": true,

	// Whether to show global vars. Potential speed improvement if turned off - you can still inspect vars with dump()
	"livecode.showGlobalVars": true,

	// 
	"livecode.showIcons": true,

	// Whether to show name errors.
	"livecode.showNameErrors": true,

	// Whether to show syntax errors.
	"livecode.showSyntaxErrors": true,

	// 
	"livecode.skipLandingPage": false,

	// Whether to report useful anonymous data back to developer.
	"livecode.telemetry": true,

	// livecode will not evaulate your code in real-time mode if one of these keywords are detected. Keywords are applied via regex.
	"livecode.unsafeKeywords": [
		"rmdir\\(",
		"rmtree\\("
	],

	// When to execute your code
	//  - afterDelay: after a delay (change livecode.delay to control the amount)
	//  - onSave: on save
	//  - onKeybinding: on keyboard shortcut
	"livecode.whenToExecute": "afterDelay",

	// Enable line breaks
	"markdown-pdf.breaks": false,

	// png and jpeg only. height of clipping area.
	"markdown-pdf.clip.height": "",

	// png and jpeg only. width of clipping area.
	"markdown-pdf.clip.width": "",

	// png and jpeg only. x-coordinate of top-left corner of clip area.
	"markdown-pdf.clip.x": "",

	// png and jpeg only. y-coordinate of top-left corner of clip area.
	"markdown-pdf.clip.y": "",

	// Enable Auto convert on save. To apply the settings, you need to restart Visual Studio Code
	"markdown-pdf.convertOnSave": false,

	// Excluded file name of convertOnSave option
	"markdown-pdf.convertOnSaveExclude": [],

	// pdf only. Display header and footer.
	"markdown-pdf.displayHeaderFooter": true,

	// Enable emoji. [Emoji cheat sheet](https://www.webfx.com/tools/emoji-cheat-sheet/)
	"markdown-pdf.emoji": true,

	// Path to a Chromium or Chrome executable to run instead of the bundled Chromium.
	"markdown-pdf.executablePath": "",

	// pdf only. HTML template for the print footer.
	"markdown-pdf.footerTemplate": "<div style=\"font-size: 9px; margin: 0 auto;\"> <span class='pageNumber'></span> / <span class='totalPages'></span></div>",

	// pdf only. Paper format [Letter, Legal, Tabloid, Ledger, A0, A1, A2, A3, A4, A5, A6].
	"markdown-pdf.format": "A4",

	// pdf only. HTML template for the print header.
	"markdown-pdf.headerTemplate": "<div style=\"font-size: 9px; margin-left: 1cm;\"> <span class='title'></span></div> <div style=\"font-size: 9px; margin-left: auto; margin-right: 1cm; \"> <span class='date'></span></div>",

	// pdf only. Paper height, accepts values labeled with units(mm, cm, in, px). If it is set, it overrides the markdown-pdf.format option.
	"markdown-pdf.height": "",

	// Enable Syntax highlighting
	"markdown-pdf.highlight": true,

	// Set the style file name. [highlight.js demo](https://highlightjs.org/static/demo/) [highlight.js/src/styles](https://github.com/highlightjs/highlight.js/tree/master/src/styles)
	"markdown-pdf.highlightStyle": "",

	// Enable the inclusion of default Markdown styles (VSCode, markdown-pdf)
	"markdown-pdf.includeDefaultStyles": true,

	// Page Option. Border bottom. units: mm, cm, in, px
	"markdown-pdf.margin.bottom": "1cm",

	// Page Option. Border left. units: mm, cm, in, px
	"markdown-pdf.margin.left": "1cm",

	// Page Option. Border right. units: mm, cm, in, px
	"markdown-pdf.margin.right": "1cm",

	// Page Option. Border Top. units: mm, cm, in, px
	"markdown-pdf.margin.top": "1.5cm",

	// Enable markdown-it-include. 
	"markdown-pdf.markdown-it-include.enable": true,

	// mermaid server.
	"markdown-pdf.mermaidServer": "https://unpkg.com/mermaid/dist/mermaid.min.js",

	// png and jpeg only. Hides default white background and allows capturing screenshots with transparency.
	"markdown-pdf.omitBackground": false,

	// pdf only. Paper orientation. portrait or landscape.
	"markdown-pdf.orientation": "portrait",

	// Output Directory.
	"markdown-pdf.outputDirectory": "",

	// If markdown-pdf.outputDirectoryRelativePathFile option is set to true, the relative path set with markdown-pdf.styles is interpreted as relative from the file
	"markdown-pdf.outputDirectoryRelativePathFile": false,

	// pdf only. Paper ranges to print, e.g., '1-5, 8, 11-13'.
	"markdown-pdf.pageRanges": "",

	// Closing delimiter used for the plantuml parser.
	"markdown-pdf.plantumlCloseMarker": "@enduml",

	// Oppening delimiter used for the plantuml parser.
	"markdown-pdf.plantumlOpenMarker": "@startuml",

	// plantuml server
	"markdown-pdf.plantumlServer": "http://www.plantuml.com/plantuml",

	// pdf only. Print background graphics.
	"markdown-pdf.printBackground": true,

	// jpeg only. The quality of the image, between 0-100. Not applicable to png images.
	"markdown-pdf.quality": 100,

	// Scale of the page rendering.
	"markdown-pdf.scale": 1,

	// Statusbar message timeout [milliseconds]
	"markdown-pdf.StatusbarMessageTimeout": 10000,

	// A list of local paths to the stylesheets to use from the markdown-pdf. All '\' need to be written as '\\'.
	"markdown-pdf.styles": [],

	// If markdown-pdf.stylesRelativePathFile option is set to true, the relative path set with markdown-pdf.styles is interpreted as relative from the file
	"markdown-pdf.stylesRelativePathFile": false,

	// Output format: pdf, html, png, jpeg. Multiple output formats support
	"markdown-pdf.type": [
		"pdf"
	],

	// pdf only. Paper width, accepts values labeled with units(mm, cm, in, px). If it is set, it overrides the markdown-pdf.format option.
	"markdown-pdf.width": "",

	// Whether to exclude files from auto-completion using VS Code's `search.exclude` setting. (`node_modules`, `bower_components` and `*.code-search` are **always excluded**, not affected by this option.)
	"markdown.extension.completion.respectVscodeSearchExclude": true,

	// The root folder for path auto-completion.
	"markdown.extension.completion.root": "",

	// Use `*` or `_` to wrap italic text.
	"markdown.extension.italic.indicator": "*",

	// User-defined KaTeX macros.
	"markdown.extension.katex.macros": {},

	// List indentation scheme. (Also affects TOC generation.)
	// 
	// Whether to use different indentation sizes on different list contexts or stick to VS Code's tab size.
	//  - adaptive: Adaptive indentation size according to the context, trying to **left align the sublist with its parent's content**. For example:
	// 
	// ```markdown
	// - Parent
	//   - Sublist
	// 
	// 1. Parent
	//    1. Sublist
	// 
	// 10. Parent with longer marker
	//     1. Sublist
	// ```
	//  - inherit: Use the configured tab size of the current document (see the status bar). For example (with `tabSize: 4`):
	// 
	// ```markdown
	// - Parent
	//     - Sublist
	// 
	// 1. Parent
	//     1. Sublist
	// 
	// 10. Parent with longer marker
	//     1. Sublist
	// ```
	"markdown.extension.list.indentationSize": "adaptive",

	// Enable basic math support (Powered by KaTeX).
	"markdown.extension.math.enabled": true,

	// Auto fix ordered list markers.
	"markdown.extension.orderedList.autoRenumber": true,

	// Ordered list marker.
	//  - one: Always use `1.` as ordered list marker.
	//  - ordered: Use increasing numbers as ordered list marker.
	"markdown.extension.orderedList.marker": "ordered",

	// Auto show preview to side.
	"markdown.extension.preview.autoShowPreviewToSide": false,

	// Convert image path to absolute path.
	"markdown.extension.print.absoluteImgPath": true,

	// Convert images to base64 when printing to HTML.
	"markdown.extension.print.imgToBase64": false,

	// Include VS Code's basic Markdown styles so that the exported HTML looks similar as inside VS Code.
	"markdown.extension.print.includeVscodeStylesheets": true,

	// Print current document to HTML when file is saved.
	"markdown.extension.print.onFileSave": false,

	// Theme of the exported HTML. Only affects code blocks.
	"markdown.extension.print.theme": "light",

	// Enable/disable URL validation when printing.
	"markdown.extension.print.validateUrls": true,

	// If a file is larger than this size (in byte/B), we won't attempt to render syntax decorations.
	"markdown.extension.syntax.decorationFileSizeLimit": 50000,

	// Add syntax decorations in editors. (e.g. ~~strikethrough~~, `code span`)
	"markdown.extension.syntax.decorations": true,

	// (**Experimental**) Report issue at <https://github.com/yzhang-gh/vscode-markdown/issues/185>.
	// 
	// Only take effect when `markdown.extension.syntax.decorations` is enabled.
	"markdown.extension.syntax.plainTheme": false,

	// Enable [GitHub Flavored Markdown](https://github.github.com/gfm/) table formatter.
	"markdown.extension.tableFormatter.enabled": true,

	// Normalize table indentation to closest multiple of configured editor tab size.
	"markdown.extension.tableFormatter.normalizeIndentation": false,

	// Whether to **force** to downcase TOC links.
	"markdown.extension.toc.downcaseLink": true,

	// Range of levels for table of contents. Use `x..y` for level `x` to `y`.
	"markdown.extension.toc.levels": "1..6",

	// Lists of headings to omit by project file.
	// Example:
	// { "README.md": ["# Introduction"] }
	"markdown.extension.toc.omittedFromToc": {},

	// Use ordered list, that is:
	// 1. ...
	// 2. ...
	"markdown.extension.toc.orderedList": false,

	// Just plain text TOC, no links.
	"markdown.extension.toc.plaintext": false,

	// The method to generate heading ID. This affects **links to headings** in **TOC**, **code completion**, and **printing**.
	//  - github: GitHub
	//  - azureDevops: Azure DevOps
	//  - gitea: Gitea
	//  - gitlab: GitLab
	//  - vscode: Visual Studio Code
	"markdown.extension.toc.slugifyMode": "github",

	// Use `-`, `*`, or `+` in the table of contents (for **unordered** list).
	"markdown.extension.toc.unorderedList.marker": "-",

	// Auto update TOC on save.
	"markdown.extension.toc.updateOnSave": true,

	// Toggle bold on some scopes
	"oneDarkPro.bold": false,

	// Code highlight color, read more [docs](https://binaryify.github.io/OneDark-Pro/#/?id=highlight-color-custom)
	"oneDarkPro.color": {
		"chalky": "",
		"coral": "",
		"dark": "",
		"error": "",
		"fountainBlue": "",
		"green": "",
		"invalid": "",
		"lightDark": "",
		"lightWhite": "",
		"malibu": "",
		"purple": "",
		"whiskey": "",
		"deepRed": ""
	},

	// Switch to different editor theme
	"oneDarkPro.editorTheme": "One Dark Pro",

	// Toggle italics on some scopes
	"oneDarkPro.italic": true,

	// Toggle Markdown style
	"oneDarkPro.markdownStyle": true,

	// Toggle vivid colors
	"oneDarkPro.vivid": false,

}